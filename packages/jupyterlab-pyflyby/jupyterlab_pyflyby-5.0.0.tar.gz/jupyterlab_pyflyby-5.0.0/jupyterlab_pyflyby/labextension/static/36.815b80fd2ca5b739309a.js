"use strict";(self.webpackChunk_deshaw_jupyterlab_pyflyby=self.webpackChunk_deshaw_jupyterlab_pyflyby||[]).push([[36],{36:(e,t,s)=>{s.r(t),s.d(t,{default:()=>v});var o=s(697),n=s(778),i=s(501),r=s(629),a=s(901),l=s(305),c=s(29),h=s.n(c);const d="pyflyby-cell",u="# END AUTO-GENERATED BLOCK\n",m="pyflyby.missing_imports",y="pyflyby.format_imports",g="pyflyby.init_comms",_=e=>"string"==typeof e?e.split("\n"):e,p=e=>!(e.startsWith("#")||e.startsWith('"""')||""===e.trim()||e.match(/^\s.*$/))||e.startsWith("%"),f=e=>""===e.trim()||!e.match(/^\s.*$/);var b=s(406),C=s(67);async function w(e="",t={}){const s=C.ServerConnection.makeSettings(),o=b.URLExt.join(s.baseUrl,"pyflyby",e);let n;try{n=await C.ServerConnection.makeRequest(o,t,s)}catch(e){throw new C.ServerConnection.NetworkError(e)}let i=await n.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",n)}if(!n.ok)throw new C.ServerConnection.ResponseError(n,i.message||i);return i}const k=(0,l.debug)("PYFLYBY:");class x{constructor(e,t){this._recentKernelState="",this._lockTimeout=e,this._activeTimeout=void 0,this.requestedLockCount=0,this.clearedLockCount=0,this._releaseLock={},this.promise={0:Promise.resolve()},this._timeoutSignal=new a.Signal(this),this._sessionContext=t,this._sessionContext.statusChanged.connect(this.kernelStateRecorder,this),this._timeoutSignal.connect(this.timeoutExpireHandler,this)}kernelStateRecorder(e,t){this._recentKernelState=t}_clearTimeout(){window.clearTimeout(this._activeTimeout),this._activeTimeout=void 0}timeoutExpireHandler(e,t){this._clearTimeout(),"busy"===this._recentKernelState?(console.debug("Extending Timeout For: ",t),this.createTimeout(t)):this.release(t)}async acquire(){const e=this.promise[this.requestedLockCount];this.requestedLockCount++;const t=this.requestedLockCount;return this.promise[t]=new Promise((e=>{this._releaseLock[t]=e})),await e,new Promise(((e,s)=>e(t)))}release(e){var t,s;this.clearedLockCount=e,null===(s=(t=this._releaseLock)[e])||void 0===s||s.call(t),delete this._releaseLock[e],this._clearTimeout(),this.clearedLockCount<this.requestedLockCount&&this.createTimeout(e+1)}createTimeout(e){this._activeTimeout=setTimeout((()=>{this._timeoutSignal.emit(e)}),this._lockTimeout)}}let S=!1;class Y extends n.Widget{constructor(e,t,s){super(),this._comms={},s.load("@deshaw/jupyterlab-pyflyby:plugin").then((e=>{this._settings=e,(e.get("enabled").user||e.get("enabled").composite)&&(this._sessionContext.kernelChanged.connect(this._handleKernelChange,this),this._sessionContext.statusChanged.connect(this._handleKernelStatusChange,this));const t=1e3*(e.get("lockTimeout").user||e.get("lockTimeout").composite);this._lock=new x(t,this._sessionContext)}),(e=>{k("PYFLYBY extension has been disabled")})),this._context=e,this._sessionContext=e.sessionContext}async _launchDialog(e){const t=new i.Dialog({title:"PYFLYBY",body:"PYFLYBY will be adding imports to the first code cell in the notebook.\n            To disable the PYFLYBY extension or to disable this notification in future, go\n            to Settings -> Advanced Settings Editor and choose PYFLYBY preferences tab",buttons:[i.Dialog.okButton()]});try{return await t.launch(),e}catch(e){console.error(e)}}_findAndSetImportCoordinates(){const{model:e}=this._context;let t=o.ArrayExt.findFirstIndex(Array.from(e.cells),((e,t)=>{const s=e.getMetadata("tags");return!(!s||-1===s.indexOf(d))}));-1===t&&(t=(e=>{const t=(0,o.toArray)(e);for(let e=0;e<t.length;e++){const s=t[e];if("code"===s.type){const t=_(s.toJSON().source);if(t.length>0&&!t[0].startsWith("%")&&!t[0].startsWith('"""'))for(let s=0;s<t.length;s++)if(p(t[s]))return e}}return-1})(Array.from(e.cells)));let s=e.cells.get(t).sharedModel,n=(e=>{const t=_(e.toJSON().source);for(let e=t.length-1;e>=0;e--)if(t[e]===u.substr(0,26)){let s=0;for(let o=0;o<e-1;o++)s+=t[o].length+1;return s}for(let e=t.length-1;e>=0;e--)if(s=t[e],p(s)&&(s.includes("__future__")||-1!==s.split(" ").indexOf("import")||s.includes("import_all_names"))&&(e===t.length-1||f(t[e+1]))){let s=0;for(let o=0;o<=e;o++)s+=t[o].length+1;return s}var s;return-1})(e.cells.get(t));return-1===n&&(s=this._context.model.sharedModel.insertCell(0,{source:`# THIS CELL WAS AUTO-GENERATED BY PYFLYBY\n\n\n${u}`,cell_type:"code",metadata:{}}),n=43),s.setMetadata("tags",[d]),{cellIndex:t,position:n}}_insertImport(e){let t;return S||!this._settings||this._settings.get("disableNotification").user?t=Promise.resolve(e):(t=this._launchDialog(e),S=!0),this._findAndSetImportCoordinates(),t}_sendFormatCodeMsg(e,t){const s=o.ArrayExt.findFirstIndex(Array.from(this._context.model.cells),((e,t)=>{const s=e.getMetadata("tags");return!(!s||-1===s.indexOf(d))}));if(-1!==s){const o=this._context.model.cells.get(s).toJSON().source,n=this._comms[y];n&&!n.isDisposed&&n.send({msg_id:t,input_code:o,imports:e,type:y})}}_getCommMsgHandler(){return async e=>{const t=e.content.data;switch(t.type){case m:{const e=t.missing_imports;this._insertImport(e).then((async e=>{if(void 0!==this._lock){const t=await this._lock.acquire();this._sendFormatCodeMsg(e,t)}}));break}case y:{this._formatImports(t);const{msg_id:e}=t;void 0!==this._lock&&this._lock.release(e);break}case g:this._initializeComms().catch(console.error)}}}async _initializeComms(){if(!this._sessionContext.session)return;const{kernel:e}=this._sessionContext.session;if(!e)return;const t=m,s=e.createComm(t);s.onMsg=this._getCommMsgHandler();try{s.open()}catch(e){console.error(`Unable to open PYFLYBY comm - ${e}`)}const o=e.createComm(y);o.onMsg=this._getCommMsgHandler(),o.onClose=e=>{const t=e.content.comm_id;delete this._comms[t]},this._comms[y]=o;try{o.open()}catch(e){console.error(`Unable to open PYFLYBY comm - ${e}`)}return e.registerCommTarget(g,((e,t)=>{e.onMsg=this._getCommMsgHandler()})),Promise.resolve()}_formatImports(e){const{formatted_code:t}=e,s=o.ArrayExt.findFirstIndex(Array.from(this._context.model.cells),((e,t)=>{const s=e.getMetadata("tags");return!(!s||-1===s.indexOf(d))}));if(-1!==s){const e=this._context.model.cells.get(s).sharedModel;e.updateSource(0,e.source.length,t)}}async _handleKernelChange(e,t){return await this._initializeComms()}_handleKernelStatusChange(e,t){return"restarting"===t?this._initializeComms():null}}class E{constructor(e){this._settingRegistry=e,this._loadSettings().catch(console.error)}async _loadSettings(){try{await this._settingRegistry.load("@deshaw/jupyterlab-pyflyby:plugin"),k("Successfully loaded PYFLYBY extension settings")}catch(e){console.error("Settings could not be loaded")}}createNew(e,t){return new Y(t,e,this._settingRegistry)}}async function T(){try{await w("install-pyflyby",{method:"POST"})}catch(e){console.error(e)}}const L=h().createElement("div",null,h().createElement("p",null,"To use @deshaw/jupyterlab-pyflyby,"," ",h().createElement("a",{href:"https://github.com/deshaw/pyflyby/blob/master/README.rst",style:{color:"#0000EE"},target:"_blank",rel:"noopener noreferrer"},"pyflyby")," ","ipython extension needs to be installed."),h().createElement("br",null),h().createElement("p",null,'Clicking on "Install" will run following command'),h().createElement("div",{style:{font:"monospace",color:"#ffffff",backgroundColor:"#000000",marginTop:"5px"}},"$ py pyflyby.install_in_ipython_config_file"),h().createElement("br",null)),v={id:"@deshaw/jupyterlab-pyflyby:plugin",autoStart:!0,requires:[r.ISettingRegistry],activate:async function(e,t){console.log("JupyterLab extension @deshaw/jupyterlab-pyflyby is activated!");const s=await t.load("@deshaw/jupyterlab-pyflyby:plugin"),o=s.get("enabled").user||s.get("enabled").composite,n=s.get("installDialogDisplayed").user;o&&"loaded"!==await async function(){return(await w("pyflyby-status")).status}()&&(n||(await(0,i.showDialog)({title:"Installation required",body:L,buttons:[i.Dialog.okButton({label:"Install"}),i.Dialog.cancelButton({label:"Cancel",displayType:"default"})],defaultButton:0})).button.accept?await T():await async function(e){try{await w("disable-pyflyby",{method:"POST",mode:"cors",cache:"no-cache",credentials:"include",headers:{"Content-type":"application/x-www-form-urlencoded"},body:new URLSearchParams("installDialogDisplayed=true")})}catch(e){console.error(e)}await e.reload("@deshaw/jupyterlab-pyflyby:plugin")}(t)),e.docRegistry.addWidgetExtension("Notebook",new E(t))}}}}]);