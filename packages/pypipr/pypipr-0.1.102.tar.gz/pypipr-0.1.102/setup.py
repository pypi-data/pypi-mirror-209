# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pypipr']

package_data = \
{'': ['*']}

install_requires = \
['colorama',
 'cssselect',
 'lxml',
 'pint>=0.21,<0.22',
 'pyyaml>=6.0,<7.0',
 'requests>=2.30.0,<3.0.0',
 'tzdata']

extras_require = \
{':platform_system == "Linux"': ['getch']}

setup_kwargs = {
    'name': 'pypipr',
    'version': '0.1.102',
    'description': 'The Python Package Index Project',
    'long_description': '\n# About\nThe Python Package Index Project (pypipr)\n\npypi : https://pypi.org/project/pypipr\n\n\n# Setup\nInstall with pip\n```\npython -m pip install pypipr\n```\n\nImport with * for fastest access\n```python\nfrom pypipr.pypipr import *\n```\n\n# CONSTANT\n\n`LINUX`\n\n`WINDOWS`\n\n# FUNCTION\n\n## avg\n\n`avg`\n\nSimple Average Function karena tidak disediakan oleh python\n\n```python\nn = [1, 22, 2, 3, 13, 2, 123, 12, 31, 2, 2, 12, 2, 1]\nprint(avg(n))\n```\n\nOutput:\n```py\n16.285714285714285\n```\n\n## basename\n\n`basename`\n\nMengembalikan nama file dari path\n\n```python\nprint(basename("/ini/nama/folder/ke/file.py"))\n```\n\nOutput:\n```py\nfile.py\n```\n\n## batchmaker\n\n`batchmaker`\n\nAlat Bantu untuk membuat teks yang berulang.\nGunakan {[start]-[finish][-[step]]}.\n```\n[start] dan [finish]    -> bisa berupa huruf maupun angka\n[-[step]]               -> bersifat optional\n```\n\n```python\ns = "Urutan {1-6-3} dan {10-9} dan {j-k} dan {Z-A-15} saja."\nprint(generator.batchmaker(s))\nprint(batchmaker(s))\n```\n\nOutput:\n```py\n<generator object generator.batchmaker at 0x0000021E30427200>\n(\'Urutan 1 dan 10 dan j dan Z saja.\', \'Urutan 1 dan 10 dan j dan K saja.\', \'Urutan 1 dan 10 dan k dan Z saja.\', \'Urutan 1 dan 10 dan k dan K saja.\', \'Urutan 1 dan 9 dan j dan Z saja.\', \'Urutan 1 dan 9 dan j dan K saja.\', \'Urutan 1 dan 9 dan k dan Z saja.\', \'Urutan 1 dan 9 dan k dan K saja.\', \'Urutan 4 dan 10 dan j dan Z saja.\', \'Urutan 4 dan 10 dan j dan K saja.\', \'Urutan 4 dan 10 dan k dan Z saja.\', \'Urutan 4 dan 10 dan k dan K saja.\', \'Urutan 4 dan 9 dan j dan Z saja.\', \'Urutan 4 dan 9 dan j dan K saja.\', \'Urutan 4 dan 9 dan k dan Z saja.\', \'Urutan 4 dan 9 dan k dan K saja.\')\n```\n\n## calculate\n\n`calculate`\n\nMengembalikan hasil dari perhitungan teks menggunakan modul pint.\nMendukung perhitungan matematika dasar dengan satuan.\n\nReturn value:\n- Berupa class Quantity dari modul pint\n\nFormat:\n- f"{result:~P}"            -> pretty\n- f"{result:~H}"            -> html\n- result.to_base_units()    -> SI\n- result.to_compact()       -> human readable\n\n```python\nfx = "3 meter * 10 cm * 3 km"\nres = calculate(fx)\nprint(res)\nprint(res.to_base_units())\nprint(res.to_compact())\nprint(f"{res:~P}")\nprint(f"{res:~H}")\n```\n\nOutput:\n```py\n90 centimeter * kilometer * meter\n900.0 meter ** 3\n900.0 meter ** 3\n90 cm·km·m\n90 cm km m\n```\n\n## chunck_array\n\n`chunck_array`\n\nMembagi array menjadi potongan-potongan dengan besaran yg diinginkan\n\n```python\narray = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]\nprint(generator.chunck_array(array, 5))\nprint(chunck_array(array, 5))\n```\n\nOutput:\n```py\n<generator object generator.chunck_array at 0x0000021E30427120>\n([2, 3, 12, 3, 3], [42, 42, 1, 43, 2], [42, 41, 4, 24, 32], [42, 3, 12, 32, 42], [42])\n```\n\n## console_run\n\n`console_run`\n\nMenjalankan command seperti menjalankan command di Command Terminal\n\n```py\nconsole_run(\'dir\')\nconsole_run(\'ls\')\n```\n\n## create_folder\n\n`create_folder`\n\nMembuat folder.\nMembuat folder secara recursive dengan permission.\n\n```py\ncreate_folder("contoh_membuat_folder")\ncreate_folder("contoh/membuat/folder/recursive")\ncreate_folder("./contoh_membuat_folder/secara/recursive")\n```\n\n## datetime_from_string\n\n`datetime_from_string`\n\nParse iso_string menjadi datetime object\n\n```python\nprint(datetime_from_string("2022-12-12 15:40:13").isoformat())\nprint(datetime_from_string("2022-12-12 15:40:13", timezone="Asia/Jakarta").isoformat())\n```\n\nOutput:\n```py\n2022-12-12T15:40:13+00:00\n2022-12-12T15:40:13+07:00\n```\n\n## datetime_now\n\n`datetime_now`\n\nMemudahkan dalam membuat Datetime untuk suatu timezone tertentu\n\n```python\nprint(datetime_now("Asia/Jakarta"))\nprint(datetime_now("GMT"))\nprint(datetime_now("Etc/GMT+7"))\n```\n\nOutput:\n```py\n2023-05-18 19:10:21.362652+07:00\n2023-05-18 12:10:21.363655+00:00\n2023-05-18 05:10:21.368656-07:00\n```\n\n## dict_first\n\n`dict_first`\n\nMengambil nilai (key, value) pertama dari dictionary dalam bentuk tuple\n\n```python\nd = {\n    "key1": "value1",\n    "key2": "value2",\n    "key3": "value3",\n}\nprint(dict_first(d))\n```\n\nOutput:\n```py\n(\'key1\', \'value1\')\n```\n\n## dirname\n\n`dirname`\n\nMengembalikan nama folder dari path.\nTanpa trailing slash di akhir.\n\n```python\nprint(dirname("/ini/nama/folder/ke/file.py"))\n```\n\nOutput:\n```py\n/ini/nama/folder/ke\n```\n\n## exit_if_empty\n\n`exit_if_empty`\n\nKeluar dari program apabila seluruh variabel\nsetara dengan empty\n\n```py\nvar1 = None\nvar2 = \'0\'\nexit_if_empty(var1, var2)\n```\n\n## explode\n\n`explode`\n\nMemecah text menjadi list berdasarkan separator.\n\n```python\nt = \'/ini/contoh/path/\'\nprint(explode(t, separator=\'/\'))\n```\n\nOutput:\n```py\n[\'\', \'ini\', \'contoh\', \'path\', \'\']\n```\n\n## file_get_contents\n\n`file_get_contents`\n\nMembaca seluruh isi file ke memory.\nApabila file tidak ada maka akan return None.\nApabila file ada tetapi kosong, maka akan return empty string\n\n```py\nprint(file_get_contents("test.txt"))\n```\n\n## file_put_contents\n\n`file_put_contents`\n\nMenuliskan content ke file.\nApabila file tidak ada maka file akan dibuat.\nApabila file sudah memiliki content maka akan di overwrite.\n\n```py\nfile_put_contents("test.txt", "Contoh menulis content")\n```\n\n## filter_empty\n\n`filter_empty`\n\n## get_class_method\n\n`get_class_method`\n\nMengembalikan berupa tuple yg berisi list dari method dalam class\n\n```python\nclass ExampleGetClassMethod:\n    def a():\n        return [x for x in range(10)]\n\n    def b():\n        return [x for x in range(10)]\n\n    def c():\n        return [x for x in range(10)]\n\n    def d():\n        return [x for x in range(10)]\n\nprint(get_class_method(ExampleGetClassMethod))\n```\n\nOutput:\n```py\n(<function ExampleGetClassMethod.a at 0x0000021E305E1CA0>, <function ExampleGetClassMethod.b at 0x0000021E305E1C10>, <function ExampleGetClassMethod.c at 0x0000021E305E1D30>, <function ExampleGetClassMethod.d at 0x0000021E305E1DC0>)\n```\n\n## get_filemtime\n\n`get_filemtime`\n\nMengambil informasi last modification time file dalam nano seconds\n\n```python\nprint(get_filemtime(__file__))\n```\n\nOutput:\n```py\n1684411811737850500\n```\n\n## get_filesize\n\n`get_filesize`\n\nMengambil informasi file size dalam bytes\n\n```python\nprint(get_filesize(__file__))\n```\n\nOutput:\n```py\n36159\n```\n\n## github_pull\n\n`github_pull`\n\nMenjalankan command `git pull`\n\n```py\ngithub_pull()\n```\n\n## github_push\n\n`github_push`\n\nMenjalankan command status, add, commit dan push\n\n```py\ngithub_push(\'Commit Message\')\n```\n\n## html_get_contents\n\n`html_get_contents`\n\nMengambil content html dari url.\n\nRETURN:\n- String: Apabila hanya url saja yg diberikan\n- List of etree: Apabila xpath diberikan\n- False: Apabila terjadi error\n\n```py\nprint(html_get_contents("https://www.google.com/"))\n\n# Using XPATH\na = html_get_contents("https://www.google.com/", xpath="//a")\nfor i in a:\n    print(i.text)\n    print(i.attrib.get(\'href\'))\n\n# Using REGEX\na = html_get_contents("https://www.google.com/", regex=r"(<a.[^>]+>(?:(?:\\s+)?(.[^<]+)(?:\\s+)?)<\\/a>)")\nfor i in a:\n    print(i)\n```\n```python\n# Using cssselect\na = html_get_contents("https://www.google.com/", css_select="a")\nfor i in a:\n    print(i.text)\n    print(i.attrib.get("href"))\n```\n\nOutput:\n```py\nSemua\nNone\nGambar\nhttps://www.google.com/webhp?output=search&tbm=isch&tbo=u&sa=X&ved=0ahUKEwi6weGB6_7-AhW5m1YBHauHDoEQ0tQDCBAoAQ\nNone\nhttps://www.google.co.id/intl/id/about/products?tab=wh\nNone\nhttps://accounts.google.com/ServiceLogin?hl=id&passive=true&continue=https://www.google.com/&ec=GAZAAQ\nNone\nhttps://search.app.goo.gl/?ofl=https%3A%2F%2Flens.google&al=googleapp%3A%2F%2Flens%3Flens_data%3DKAw&apn=com.google.android.googlequicksearchbox&amv=301204913&isi=284815942&ius=googleapp&ibi=com.google.GoogleMobile&link=https%3A%2F%2Fgoo.gl%2Fiosgoogleapp%2Fdefault%3Furl%3Dgoogleapp%253A%252F%252Flens%253Fmin-version%253D180%2526lens_data%253DKAw&ifl=https%3A%2F%2Fapps.apple.com%2Fus%2Fapp%2Fgoogle%2Fid284815942%3Fppid%3D1ac8cc35-d99c-4a1d-b909-321c8968cc74%26pt%3D9008%26mt%3D8%26ct%3D4815459-oo-lens-isb-bar-lens-cam%26UTM_campaign%3Dgoogle_search_mweb&efr=1&ct=4815459-oo-lens-isb-bar-lens-cam&utm_campaign=4815459-oo-lens-isb-bar-lens-cam&utm_source=google_search_mweb&utm_medium=owned&pt=9008&mt=8\nEnglish\nhttps://www.google.com/setprefs?sig=0_ukaOV2KMgZVrcXakGNyUhFJseO4%3D&hl=en&source=homepage&sa=X&ved=0ahUKEwi6weGB6_7-AhW5m1YBHauHDoEQ2ZgBCBk\nNone\nhttps://www.google.com/setprefs?sig=0_ukaOV2KMgZVrcXakGNyUhFJseO4%3D&hl=jv&source=homepage&sa=X&ved=0ahUKEwi6weGB6_7-AhW5m1YBHauHDoEQ2ZgBCBo\nBasa Bali\nhttps://www.google.com/setprefs?sig=0_ukaOV2KMgZVrcXakGNyUhFJseO4%3D&hl=ban&source=homepage&sa=X&ved=0ahUKEwi6weGB6_7-AhW5m1YBHauHDoEQ2ZgBCBs\n \nNone\n \n/preferences?hl=id&prev=https://www.google.com/&sa=X&ved=0ahUKEwi6weGB6_7-AhW5m1YBHauHDoEQr8gICCA\n   \n#\nTema gelap: nonaktif\n#\nSetelan\nhttps://www.google.com/preferences?hl=id\nPrivasi\nhttps://policies.google.com/privacy?hl=id&fg=1\nPersyaratan\nhttps://policies.google.com/terms?hl=id&fg=1\nPeriklanan\nhttps://www.google.com/intl/id_id/ads/?subid=ww-ww-et-g-awa-a-g_hpafoot1_1!o2&utm_source=google.com&utm_medium=referral&utm_campaign=google_hpafooter&fg=1\nBisnis\nhttps://www.google.com/services/?subid=ww-ww-et-g-awa-a-g_hpbfoot1_1!o2&utm_source=google.com&utm_medium=referral&utm_campaign=google_hpbfooter&fg=1\nTentang\nhttps://about.google/?utm_source=google-ID&utm_medium=referral&utm_campaign=hp-footer&fg=1\n```\n\n## html_put_contents\n\n`html_put_contents`\n\nFungsi untuk mengirim data ke URL dengan method POST dan mengembalikan\nrespon dari server sebagai string.\n\nParameters:\n    url (str): URL tujuan.\n    data (dict): Data yang akan dikirim.\n\nReturns:\n- str: Respon dari server dalam bentuk string.\n\n```py\ndata = dict(pengirim="saya", penerima="kamu")\nprint(html_put_contents("https://arbadzukhron.deta.dev/", data))\n```\n\n## iexec\n\n`iexec`\n\nimprove exec() python function untuk mendapatkan outputnya\n\n```python\nprint(iexec(\'print(9*9)\'))\n```\n\nOutput:\n```py\n81\n\n```\n\n## implode\n\n`implode`\n\nSimplify Python join functions like PHP function.\nIterable bisa berupa sets, tuple, list, dictionary.\n\n```python\narr = {\'asd\',\'dfs\',\'weq\',\'qweqw\'}\nprint(implode(arr, \', \'))\n\narr = \'/ini/path/seperti/url/\'.split(\'/\')\nprint(implode(arr, \',\'))\nprint(implode(arr, \',\', remove_empty=True))\n\narr = {\'a\':\'satu\', \'b\':(12, 34, 56), \'c\':\'tiga\', \'d\':\'empat\'}\nprint(implode(arr, separator=\'</li>\\n<li>\', start=\'<li>\', end=\'</li>\', recursive_flat=True))\nprint(implode(arr, separator=\'</div>\\n<div>\', start=\'<div>\', end=\'</div>\'))\nprint(implode(10, \' \'))\n```\n\nOutput:\n```py\ndfs, qweqw, asd, weq\n,ini,path,seperti,url,\nini,path,seperti,url\n<li>satu</li>\n<li>12</li>\n<li>34</li>\n<li>56</li>\n<li>tiga</li>\n<li>empat</li>\n<div>satu</div>\n<div><div>12</div>\n<div>34</div>\n<div>56</div></div>\n<div>tiga</div>\n<div>empat</div>\n10\n```\n\n## input_char\n\n`input_char`\n\nMeminta masukan satu huruf tanpa menekan Enter.\n\n```py\ninput_char("Input char : ")\ninput_char("Input char : ", default=\'Y\')\ninput_char("Input Char without print : ", echo_char=False)\n```\n\n## irange\n\n`irange`\n\nImprove python range() function untuk pengulangan menggunakan huruf\n\n```python\nprint(generator.irange(\'a\', \'z\'))\nprint(irange(\'H\', \'a\'))\nprint(irange(\'1\', \'5\', 3))\nprint(irange(\'1\', 5, 3))\n# print(irange(\'a\', 5, 3))\nprint(irange(-10, 4, 3))\nprint(irange(1, 5))\n```\n\nOutput:\n```py\n<generator object generator.irange at 0x0000021E304B86D0>\n[\'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\', \'Z\', \'[\', \'\\\\\', \']\', \'^\', \'_\', \'`\', \'a\']\n[\'1\', \'4\']\n[1, 4]\n[-10, -7, -4, -1, 2]\n[1, 2, 3, 4, 5]\n```\n\n## is_empty\n\n`is_empty`\n\nMengecek apakah variable setara dengan nilai kosong pada empty.\n\nPengecekan nilai yang setara menggunakan simbol \'==\', sedangkan untuk\npengecekan lokasi memory yang sama menggunakan keyword \'is\'\n\n```python\nprint(is_empty("teks"))\nprint(is_empty(True))\nprint(is_empty(False))\nprint(is_empty(None))\nprint(is_empty(0))\nprint(is_empty([]))\n```\n\nOutput:\n```py\nFalse\nFalse\nTrue\nTrue\nTrue\nTrue\n```\n\n## is_iterable\n\n`is_iterable`\n\nMengecek apakah suatu variabel bisa dilakukan forloop atau tidak\n\n```python\ns = \'ini string\'\nprint(is_iterable(s))\n\nl = [12,21,2,1]\nprint(is_iterable(l))\n\nr = range(100)\nprint(is_iterable(r))\n\nd = {\'a\':1, \'b\':2}\nprint(is_iterable(d.values()))\n```\n\nOutput:\n```py\nFalse\nTrue\nTrue\nTrue\n```\n\n## iscandir\n\n`iscandir`\n\nMempermudah scandir untuk mengumpulkan folder, subfolder dan file\n\n```py\nprint(generator.iscandir())\nprint(iscandir())\n```\n\n## log\n\n`log`\n\nDecorator untuk mempermudah pembuatan log karena tidak perlu mengubah fungsi yg sudah ada.\nMelakukan print ke console untuk menginformasikan proses yg sedang berjalan didalam program.\n\n```py\n@log\ndef some_function():\n    pass\n\n@log()\ndef some_function_again():\n    pass\n\n@log("Calling some function")\ndef some_function_more():\n    pass\n\nsome_function()\nsome_function_again()\nsome_function_more()\n```\n\n## print_colorize\n\n`print_colorize`\n\nPrint text dengan warna untuk menunjukan text penting\n\n```py\nprint_colorize("Print some text")\nprint_colorize("Print some text", color=colorama.Fore.RED)\n```\n\n## print_dir\n\n`print_dir`\n\nPrint property dan method yang tersedia pada variabel\n\n```python\np = pathlib.Path("https://www.google.com/")\nprint_dir(p)\n```\n\nOutput:\n```py\n           __bytes__ : b\'https:\\\\www.google.com\'\n           __class__ : .\n             __dir__ : [\'__module__\', \'__doc__\', \'__slots__\', \'is_mount\', \'__new__\', \'_init\', \'_make_child_relpath\', \'__enter__\', \'__exit__\', \'_opener\', \'_raw_open\', \'cwd\', \'home\', \'samefile\', \'iterdir\', \'glob\', \'rglob\', \'absolute\', \'resolve\', \'stat\', \'owner\', \'group\', \'open\', \'read_bytes\', \'read_text\', \'write_bytes\', \'write_text\', \'readlink\', \'touch\', \'mkdir\', \'chmod\', \'lchmod\', \'unlink\', \'rmdir\', \'lstat\', \'link_to\', \'rename\', \'replace\', \'symlink_to\', \'exists\', \'is_dir\', \'is_file\', \'is_symlink\', \'is_block_device\', \'is_char_device\', \'is_fifo\', \'is_socket\', \'expanduser\', \'_accessor\', \'__reduce__\', \'_parse_args\', \'_from_parts\', \'_from_parsed_parts\', \'_format_parsed_parts\', \'_make_child\', \'__str__\', \'__fspath__\', \'as_posix\', \'__bytes__\', \'__repr__\', \'as_uri\', \'_cparts\', \'__eq__\', \'__hash__\', \'__lt__\', \'__le__\', \'__gt__\', \'__ge__\', \'__class_getitem__\', \'drive\', \'root\', \'anchor\', \'name\', \'suffix\', \'suffixes\', \'stem\', \'with_name\', \'with_stem\', \'with_suffix\', \'relative_to\', \'is_relative_to\', \'parts\', \'joinpath\', \'__truediv__\', \'__rtruediv__\', \'parent\', \'parents\', \'is_absolute\', \'is_reserved\', \'match\', \'_cached_cparts\', \'_drv\', \'_hash\', \'_parts\', \'_pparts\', \'_root\', \'_str\', \'__getattribute__\', \'__setattr__\', \'__delattr__\', \'__ne__\', \'__init__\', \'__reduce_ex__\', \'__subclasshook__\', \'__init_subclass__\', \'__format__\', \'__sizeof__\', \'__dir__\', \'__class__\', \'_flavour\']\n             __doc__ : Path subclass for Windows systems.\n\n    On a Windows system, instantiating a Path should return this object.\n    \n           __enter__ : https:\\www.google.com\n          __fspath__ : https:\\www.google.com\n            __hash__ : -3459111094813906924\n            __init__ : None\n   __init_subclass__ : None\n          __module__ : pathlib\n          __reduce__ : (<class \'pathlib.WindowsPath\'>, (\'https:\', \'www.google.com\'))\n            __repr__ : WindowsPath(\'https:/www.google.com\')\n          __sizeof__ : 80\n           __slots__ : ()\n             __str__ : https:\\www.google.com\n    __subclasshook__ : NotImplemented\n           _accessor : <pathlib._NormalAccessor object at 0x0000021E2F7F3CD0>\n      _cached_cparts : [\'https:\', \'www.google.com\']\n             _cparts : [\'https:\', \'www.google.com\']\n                _drv : \n            _flavour : <pathlib._WindowsFlavour object at 0x0000021E2F7F34C0>\n               _hash : -3459111094813906924\n               _init : None\n              _parts : [\'https:\', \'www.google.com\']\n               _root : \n                _str : https:\\www.google.com\n            absolute : C:\\Users\\ToshibaM840\\Desktop\\website\\pypipr\\https:\\www.google.com\n              anchor : \n            as_posix : https:/www.google.com\n                 cwd : C:\\Users\\ToshibaM840\\Desktop\\website\\pypipr\n               drive : \n          expanduser : https:\\www.google.com\n                home : C:\\Users\\ToshibaM840\n         is_absolute : False\n         is_reserved : False\n             iterdir : <generator object Path.iterdir at 0x0000021E30555A50>\n            joinpath : https:\\www.google.com\n                name : www.google.com\n              parent : https:\n             parents : <WindowsPath.parents>\n               parts : (\'https:\', \'www.google.com\')\n                root : \n                stem : www.google\n              suffix : .com\n            suffixes : [\'.google\', \'.com\']\n```\n\n## print_log\n\n`print_log`\n\nAkan melakukan print ke console.\nBerguna untuk memberikan informasi proses program yg sedang berjalan.\n\n```py\nprint_log("Standalone Log")\n```\n\n## random_bool\n\n`random_bool`\n\nMenghasilkan nilai random True atau False.\nFungsi ini merupakan fungsi tercepat untuk mendapatkan random bool.\n\n```python\nprint(random_bool())\n```\n\nOutput:\n```py\nFalse\n```\n\n## scan_file\n\n`scan_file`\n\nMengumpulkan nama-nama file dalam folder dan subfolder.\n\n```py\nprint(generator.scan_file())\nprint(scan_file())\n```\n\n## scan_folder\n\n`scan_folder`\n\nMengumpulkan nama-nama folder dan subfolder.\nTidak termasuk [".", ".."] dan file.\n\n```python\nprint(generator.scan_folder(recursive=False))\nprint(scan_folder(recursive=False))\n```\n\nOutput:\n```py\n<generator object generator.scan_folder at 0x0000021E304B86D0>\n(WindowsPath(\'.git\'), WindowsPath(\'.pytest_cache\'), WindowsPath(\'.vscode\'), WindowsPath(\'dist\'), WindowsPath(\'pypipr\'))\n```\n\n## serialize\n\n`serialize`\n\nMengubah variabel data menjadi string untuk yang dapat dibaca untuk disimpan.\nString yang dihasilkan berbentuk syntax YAML.\n\n```python\ndata = {\n    \'a\': 123,\n    \'t\': [\'disini\', \'senang\', \'disana\', \'senang\'],\n    \'l\': (12, 23, [12, 42])\n}\nprint(serialize(data))\n```\n\nOutput:\n```py\na: 123\nl:\n- 12\n- 23\n- - 12\n  - 42\nt:\n- disini\n- senang\n- disana\n- senang\n\n```\n\n## set_timeout\n\n`set_timeout`\n\nMenjalankan fungsi ketika sudah sekian detik.\nApabila timeout masih berjalan tapi kode sudah selesai dieksekusi semua, maka\nprogram tidak akan berhenti sampai timeout selesai, kemudian fungsi dijalankan,\nkemudian program dihentikan.\n\n```python\nset_timeout(3, lambda: print("Timeout 3"))\nx = set_timeout(7, lambda: print("Timeout 7"))\nprint(x)\nprint("menghentikan timeout 7")\nx.cancel()\n```\n\nOutput:\n```py\n<Timer(Thread-2, started 4820)>\nmenghentikan timeout 7\n```\n\n## sets_ordered\n\n`sets_ordered`\n\nHanya mengambil nilai unik dari suatu list\n\n```python\narray = [2, 3, 12, 3, 3, 42, 42, 1, 43, 2, 42, 41, 4, 24, 32, 42, 3, 12, 32, 42, 42]\nprint(generator.sets_ordered(array))\nprint(sets_ordered(array))\n```\n\nOutput:\n```py\n<generator object generator.sets_ordered at 0x0000021E30555890>\n[2, 3, 12, 42, 1, 43, 41, 4, 24, 32]\n```\n\n## strtr\n\n`strtr`\n\nSTRing TRanslate, mengubah string menggunakan kamus dari dict.\n\n```python\ntext = \'aku disini mau kemana saja\'\nreplacements = {\n    "disini": "disitu",\n    "kemana": "kesini",\n}\nprint(strtr(text, replacements))\n```\n\nOutput:\n```py\naku disitu mau kesini saja\n```\n\n## strtr_regex\n\n`strtr_regex`\n\nSTRing TRanslate metode Regex, mengubah string menggunakan kamus dari dict.\n\n```python\ntext = \'aku {{ ini }} mau ke {{ sini }} mau kemana saja\'\nreplacements = {\n    r"\\{\\{\\s*(ini)\\s*\\}\\}": r"itu dan \\1",\n    r"\\{\\{\\s*sini\\s*\\}\\}": r"situ",\n}\nprint(strtr_regex(text, replacements))\n```\n\nOutput:\n```py\naku itu dan ini mau ke situ mau kemana saja\n```\n\n## to_str\n\n`to_str`\n\nMengubah value menjadi string literal\n\n```python\nprint(to_str(5))\nprint(to_str([]))\nprint(to_str(False))\nprint(to_str(True))\nprint(to_str(None))\n```\n\nOutput:\n```py\n5\n\nFalse\nTrue\n\n```\n\n## unserialize\n\n`unserialize`\n\nMengubah string data hasil dari serialize menjadi variabel.\nString data adalah berupa syntax YAML.\n\n```python\ndata = {\n    \'a\': 123,\n    \'t\': [\'disini\', \'senang\', \'disana\', \'senang\'],\n    \'l\': (12, 23, [12, 42])\n}\ns = serialize(data)\nprint(unserialize(s))\n```\n\nOutput:\n```py\n{\'a\': 123, \'l\': [12, 23, [12, 42]], \'t\': [\'disini\', \'senang\', \'disana\', \'senang\']}\n```\n\n# CLASS\n\n## ComparePerformance\n\n`ComparePerformance`\n\nMenjalankan seluruh method dalam class,\nKemudian membandingkan waktu yg diperlukan.\nNilai 100 berarti yang tercepat.\n\n```python\nclass ExampleComparePerformance(ComparePerformance):\n    # number = 1\n    z = 10\n\n    def a(self):\n        return (x for x in range(self.z))\n\n    def b(self):\n        return tuple(x for x in range(self.z))\n\n    def c(self):\n        return [x for x in range(self.z)]\n\n    def d(self):\n        return list(x for x in range(self.z))\n\nprint(ExampleComparePerformance().compare_result())\nprint(ExampleComparePerformance().compare_performance())\nprint(ExampleComparePerformance().compare_performance())\nprint(ExampleComparePerformance().compare_performance())\nprint(ExampleComparePerformance().compare_performance())\nprint(ExampleComparePerformance().compare_performance())\n```\n\nOutput:\n```py\n{\'a\': <generator object ExampleComparePerformance.a.<locals>.<genexpr> at 0x0000021E304B86D0>, \'b\': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), \'c\': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \'d\': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}\n{\'a\': 116, \'b\': 140, \'c\': 100, \'d\': 367}\n{\'a\': 101, \'b\': 133, \'c\': 100, \'d\': 158}\n{\'a\': 100, \'b\': 147, \'c\': 101, \'d\': 171}\n{\'a\': 100, \'b\': 131, \'c\': 103, \'d\': 163}\n{\'a\': 100, \'b\': 150, \'c\': 103, \'d\': 166}\n```\n\n## RunParallel\n\n`RunParallel`\n\nMenjalankan program secara bersamaan.\n\nStructure:\n- Semua methods akan dijalankan secara paralel kecuali method dengan nama yg diawali underscore `_`\n- Method untuk multithreading/multiprocessing harus memiliki 2 parameter, yaitu: `result: dict` dan `q: queue.Queue`. Parameter `result` digunaan untuk memberikan return value dari method, dan Parameter `q` digunakan untuk mengirim data antar proses.\n- Method untuk asyncio harus menggunakan keyword `async def`, dan untuk perpindahan antar kode menggunakan `await asyncio.sleep(0)`, dan keyword `return` untuk memberikan return value.\n- Return Value berupa dictionary dengan key adalah nama function, dan value adalah return value dari setiap fungsi\n- Harus berada dalam `if __name__ == "__main__":` karena pembatasan dari python\n\nNote:\n- `class RunParallel` didesain hanya untuk pemrosesan data saja.\n- Penggunaannya `class RunParallel` dengan cara membuat instance sub class beserta data yg akan diproses, kemudian panggil fungsi yg dipilih `run_asyncio / run_multi_threading / run_multi_processing`, kemudian dapatkan hasilnya.\n- `class RunParallel` tidak didesain untuk menyimpan data, karena setiap module terutama module `multiprocessing` tidak dapat mengakses data kelas dari proses yg berbeda.\n\n```python\nclass ExampleRunParallel(RunParallel):\n    z = "ini"\n\n    def __init__(self) -> None:\n        self.pop = random.randint(0, 100)\n\n    def _set_property_here(self, v):\n        self.prop = v\n\n    def a(self, result: dict, q: queue.Queue):\n        result["z"] = self.z\n        result["pop"] = self.pop\n        result["a"] = "a"\n        q.put("from a 1")\n        q.put("from a 2")\n\n    def b(self, result: dict, q: queue.Queue):\n        result["z"] = self.z\n        result["pop"] = self.pop\n        result["b"] = "b"\n        result["q_get"] = q.get()\n\n    def c(self, result: dict, q: queue.Queue):\n        result["z"] = self.z\n        result["pop"] = self.pop\n        result["c"] = "c"\n        result["q_get"] = q.get()\n\n    async def d(self):\n        print("hello")\n        await asyncio.sleep(0)\n        print("hello")\n\n        result = {}\n        result["z"] = self.z\n        result["pop"] = self.pop\n        result["d"] = "d"\n        return result\n\n    async def e(self):\n        print("world")\n        await asyncio.sleep(0)\n        print("world")\n\n        result = {}\n        result["z"] = self.z\n        result["pop"] = self.pop\n        result["e"] = "e"\n        return result\n\nif __name__ == "__main__":\n    print(ExampleRunParallel().run_asyncio())\n    print(ExampleRunParallel().run_multi_threading())\n    print(ExampleRunParallel().run_multi_processing())\n```\n\nOutput:\n```py\n```\n\n## __calculate__quantity__\n\n`__calculate__quantity__`\n\n## generator\n\n`generator`\n\nClass ini menyediakan beberapa fungsi yang bisa mengembalikan generator.\nDigunakan untuk mengoptimalkan program.\n\nClass ini dibuat karena python generator yang disimpan dalam variabel\nhanya dapat diakses satu kali.\n',
    'author': 'ufiapjj',
    'author_email': 'ufiapjj@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.9',
}


setup(**setup_kwargs)
