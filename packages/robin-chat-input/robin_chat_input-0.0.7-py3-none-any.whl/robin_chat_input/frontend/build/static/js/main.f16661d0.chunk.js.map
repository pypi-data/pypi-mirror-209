{"version":3,"sources":["RobinChatInput.tsx","index.tsx"],"names":["RobinChatInput","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","inputValue","render","_jsx","style","padding","children","_jsxs","border","borderBlockColor","borderWidth","borderRadius","display","alignItems","type","value","onChange","handleInputChange","placeholder","outline","flex","position","src","height","marginLeft","transition","onMouseOver","e","target","transform","onMouseOut","onClick","handleInputSubmit","Streamlit","setComponentValue","setState","event","userInput","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"oOAgBMA,EAAc,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAwDjB,OAxDiBP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACXM,MAAQ,CAAEC,WAAY,IAAIZ,EAE1Ba,OAAS,WACd,OACEC,cAAA,OAAKC,MAAO,CAAEC,QAAS,IAAKC,SAC1BC,eAAA,OACEH,MAAO,CACLI,OAAQ,QACRC,iBAAkB,UAClBC,YAAa,EACbL,QAAS,GACTM,aAAc,EACdC,QAAS,OACTC,WAAY,UACZP,SAAA,CAEFH,cAAA,SACEW,KAAK,OACLC,MAAO1B,EAAKW,MAAMC,WAClBe,SAAU3B,EAAK4B,kBACfC,YAAY,2BACZd,MAAO,CAAEI,OAAQ,OAAQW,QAAS,OAAQC,KAAM,KAElDjB,cAAA,OAAKC,MAAO,CAAEiB,SAAU,YAAaf,SACnCH,cAAA,OACEmB,IAAI,2CACJlB,MAAO,CACLmB,OAAQ,GACRC,WAAY,GACZC,WAAY,kBAEdC,YAAa,SAACC,GAAC,OACXA,EAAEC,OAA4BxB,MAAMyB,UACpC,gBAAgB,EAEpBC,WAAY,SAACH,GAAC,OACVA,EAAEC,OAA4BxB,MAAMyB,UACpC,cAAc,EAElBE,QAAS1C,EAAK2C,0BAM1B,EAAC3C,EAEO2C,kBAAoB,WAC1BC,IAAUC,kBAAkB7C,EAAKW,MAAMC,YACvCZ,EAAK8C,SAAS,CAAElC,WAAY,IAC9B,EAACZ,EAEO4B,kBAAoB,SAACmB,GAC3B,IAAMC,EAAYD,EAAMR,OAAOb,MAC/B1B,EAAK8C,SAAS,CAAElC,WAAYoC,GAC9B,EAAChD,CAAA,QAAAiD,YAAAtD,EAAA,CAxDiB,CAASuD,KAgEdC,cAAwBxD,GC5EvCyD,IAASvC,OACPC,cAACuC,IAAMC,WAAU,CAAArC,SACfH,cAACnB,EAAc,MAEjB4D,SAASC,eAAe,Q","file":"static/js/main.f16661d0.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\n\ninterface State {\n  inputValue: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass RobinChatInput extends StreamlitComponentBase<State> {\n  public state = { inputValue: \"\" }\n\n  public render = (): ReactNode => {\n    return (\n      <div style={{ padding: 20 }}>\n        <div\n          style={{\n            border: \"solid\",\n            borderBlockColor: \"#2A344F\",\n            borderWidth: 1,\n            padding: 15,\n            borderRadius: 5,\n            display: \"flex\",\n            alignItems: \"center\",\n          }}\n        >\n          <input\n            type=\"text\"\n            value={this.state.inputValue}\n            onChange={this.handleInputChange}\n            placeholder=\"Enter your question here\"\n            style={{ border: \"none\", outline: \"none\", flex: 1 }}\n          />\n          <div style={{ position: \"relative\" }}>\n            <img\n              src=\"https://i.ibb.co/TT47TC6/Blue-Button.png\"\n              style={{\n                height: 40,\n                marginLeft: 10,\n                transition: \"transform 0.5s\",\n              }}\n              onMouseOver={(e) =>\n                ((e.target as HTMLImageElement).style.transform =\n                  \"rotate(180deg)\")\n              }\n              onMouseOut={(e) =>\n                ((e.target as HTMLImageElement).style.transform =\n                  \"rotate(0deg)\")\n              }\n              onClick={this.handleInputSubmit}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  private handleInputSubmit = (): void => {\n    Streamlit.setComponentValue(this.state.inputValue)\n    this.setState({ inputValue: \"\" })\n  }\n\n  private handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const userInput = event.target.value\n    this.setState({ inputValue: userInput })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RobinChatInput)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RobinChatInput from \"./RobinChatInput\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <RobinChatInput />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}