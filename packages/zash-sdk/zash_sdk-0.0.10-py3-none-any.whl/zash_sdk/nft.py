# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_nft.ipynb.

# %% auto 0
__all__ = ['NFT']

# %% ../nbs/02_nft.ipynb 3
import pandas as pd
from fastcore.utils import patch
from fastcore.meta import delegates
from .connectors import Connector
from .collection import NFTCollection, _fetch_trades, _fetch_loans

# %% ../nbs/02_nft.ipynb 4
class NFT:
    """Access NFT intelligence, such as trades and collections"""
    def __init__(self, 
                 conn: Connector,
                 chain: str = "eth" # chain_id - currently only "eth" and "bnb" is allowed
                ) -> None: 
        self._conn, self.chain = conn, chain       
    def mints(self,
           start_time: str, # start time in UTC. You can use shortcuts like today, yesterday or even clauses such as "1 day/week ago".
           end_time: str = '' # default now. Same type as start_time 
          )-> pd.DataFrame: # pandas dataframe with each row as a trade
        return _fetch_trades(self._conn, start_time, end_time=end_time, chain=self.chain, mints_only=True)
    def trades(self,
               start_time: str, # start time in UTC. You can use shortcuts like today, yesterday or even clauses such as "1 day/week ago".
               end_time: str = '', # default now. Same type as start_time
               filter_collections=[], # collections to filter for when fetching trades
               expand_collection: bool = False # expand collection column with collection details (i.e. slug, name)
              )-> pd.DataFrame: # pandas dataframe with each row as a trade
        return _fetch_trades(self._conn, start_time, end_time=end_time, chain=self.chain, expand_collection=expand_collection,collection_address=filter_collections)
    def loans(self,
           start_time: str, # start time in UTC. You can use shortcuts like today, yesterday or even clauses such as "1 day/week ago".
           end_time: str = '', # default now. Same type as start_time
          )-> pd.DataFrame: # pandas dataframe with each row as a loan
        return _fetch_loans(self._conn, start_time, end_time=end_time, chain=self.chain)
    def collection(self, 
               collection_id: str # collection_address with checksum (e.g. 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D)
              ) -> NFTCollection: 
        return NFTCollection(self._conn, collection_id, chain=self.chain)

# %% ../nbs/02_nft.ipynb 10
@patch
def search(self: NFT, 
           query:dict # Query object for example {"id": "boredape"}
          ):
    """Search collections by a query"""
    query.update({'chain': self.chain})
    return self._conn.get(f'/collection/search', params=query).json()['collections']
