# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_zash.ipynb.

# %% auto 0
__all__ = ['Zash', 'ddl_to_type_dict']

# %% ../nbs/03_zash.ipynb 3
import pandas as pd
import re
from .connectors import Connector
from .nft import NFT
from itertools import takewhile
from fastcore.utils import patch


# %% ../nbs/03_zash.ipynb 4
class Zash:
    """Client that handles, auth and connectivity"""
    def __init__(self,
                 username: str, # username (generally sign up email)
                 api_key: str # api key generated, you can get one [here](https://zash.sh)
                ) -> None:
        self._conn = Connector(username, api_key)
        if not self._conn:
            raise Exception(f'Could not authenticate. Check credentials: username={username}, api_key={api_key}')
        else:
            print('Authenticated!')
    def __repr__(self) -> str: return f"Zash(api_key=*****{self.api_key[-4:]})"
    def nft(self,
        chain: str # chain_id, currently only supports "eth" or "bnb"
       ): return NFT(self._conn, chain=chain)
    def tables(self):
        """Return enabled tables"""
        return {'trades', 'nft_loans'}
    def query(self, 
              q: str # Raw query
             ) -> pd.DataFrame:
        """Send raw queries to our data lakehouse"""
        return self._conn.query(q)
        

# %% ../nbs/03_zash.ipynb 11
def ddl_to_type_dict(ddl: str):
    type_mapping = {
        'character varying': 'str',
        'integer': 'int',
        'bigint': 'int',
        'double precision': 'float',
        'timestamp': 'int',
        'numeric': 'float',
        'timestamp without time zone': 'int'
    }

    lines = list(takewhile(lambda x: x != ')',[line for line in ddl.splitlines() if line and 'CREATE' not in line]))
    pattern = r'^\s*(\w+)\s+([a-z\s]+)'
    result = {}
    for line in lines:
        match = re.match(pattern, line)
        if match:
            name, type = match.groups()
            result[name] = type_mapping[type.strip()]
    return result

# %% ../nbs/03_zash.ipynb 13
@patch
def describe(self: Zash, 
           table:str # Enabled table (for instance nft_loans)
          ) -> dict: # A dict of columns and types
    """Get table column descriptions for enabled tables"""
    return ddl_to_type_dict(self.query(f"show table onchain.{table}").squeeze())
