{"version":3,"sources":["../node_modules/reveal.js/dist/theme lazy /^/.//.*/.css$/ groupOptions: {} namespace object","RevealSlides.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","includedPlugins","RevealMarkdown","RevealHighlight","RevealMath","KaTeX","MathJax2","MathJax3","RevealSearch","RevealNotes","RevealZoom","withStreamlitConnection","_ref","args","disabled","configStr","JSON","stringify","setupConfig","configString","config","parse","arr","forEach","moduleName","index","filter","x","includes","push","useMemo","theme","setTimeout","Reveal","layout","console","warn","useEffect","destroy","initialize","highlighter","getPlugin","init","currState","getState","Streamlit","setComponentValue","on","event","tempState","indexh","indexv","indexf","paused","overview","configure","isReady","togglePause","viewport","getViewportElement","style","pointerEvents","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","_jsx","ref","className","dangerouslySetInnerHTML","__html","children","_objectSpread","type","ReactDOM","render","React","StrictMode","RevealSlides","document","getElementById"],"mappings":"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","file":"static/js/main.6641c370.chunk.js","sourcesContent":["var map = {\n\t\"./beige.css\": [\n\t\t67,\n\t\t3\n\t],\n\t\"./black-contrast.css\": [\n\t\t68,\n\t\t10\n\t],\n\t\"./black.css\": [\n\t\t69,\n\t\t11\n\t],\n\t\"./blood.css\": [\n\t\t70,\n\t\t12\n\t],\n\t\"./dracula.css\": [\n\t\t71,\n\t\t16\n\t],\n\t\"./fonts/league-gothic/league-gothic.css\": [\n\t\t72,\n\t\t17\n\t],\n\t\"./fonts/source-sans-pro/source-sans-pro.css\": [\n\t\t73,\n\t\t18\n\t],\n\t\"./league.css\": [\n\t\t74,\n\t\t4\n\t],\n\t\"./moon.css\": [\n\t\t75,\n\t\t5\n\t],\n\t\"./night.css\": [\n\t\t76,\n\t\t6\n\t],\n\t\"./serif.css\": [\n\t\t77,\n\t\t19\n\t],\n\t\"./simple.css\": [\n\t\t78,\n\t\t7\n\t],\n\t\"./sky.css\": [\n\t\t79,\n\t\t8\n\t],\n\t\"./solarized.css\": [\n\t\t80,\n\t\t9\n\t],\n\t\"./white-contrast.css\": [\n\t\t81,\n\t\t13\n\t],\n\t\"./white.css\": [\n\t\t82,\n\t\t14\n\t],\n\t\"./white_contrast_compact_verbatim_headers.css\": [\n\t\t83,\n\t\t15\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 65;\nmodule.exports = webpackAsyncContext;","import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport { useEffect, useMemo } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\n\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst includedPlugins = {\"RevealMarkdown\": RevealMarkdown, \"RevealHighlight\": RevealHighlight, \"RevealMath.KaTeX\": RevealMath.KaTeX, \"RevealMath.MathJax2\": RevealMath.MathJax2, \"RevealMath.MathJax3\": RevealMath.MathJax3, \"RevealSearch\": RevealSearch, \"RevealNotes\": RevealNotes, \"RevealZoom\": RevealZoom}\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, disabled }: RevealSlidesProps) => {   \n\n  let configStr = JSON.stringify(args[\"config\"])\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = (configString: string) : object => {\n    const config = JSON.parse(configStr)\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    }\n    else {\n      if ('plugins' in config){\n        var arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  }\n\n  useMemo(()=>{\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css')\n\n    // To do: figure out a way to get a callback after new css is applied\n    // The following code is a hack to get around the fact that the new css\n    // is not applied immediately\n    setTimeout(() => {\n      try{\n        Reveal.layout();\n      }\n      catch (e){\n        console.warn(\"Reveal.layout() call failed.\")\n      }\n    }, 100);\n\n  }, [args.theme]);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    \n    try {\n      Reveal.destroy();\n    }\n    catch (e) {\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready \n\n    // For some yet to be determined reason, the highlight plugin is not initialized.\n    // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n    // does not work\n    // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n    // Possible solution is to make a change to the plugin init function.\n    let highlighter = Reveal.getPlugin('highlight') as any;\n    if (highlighter){\n      highlighter.init(Reveal);\n    }\n\n      // Send slide position indecies back to Streamlit on initialization and on slide change\n      const currState = Reveal.getState();\n      Streamlit.setComponentValue(currState);\n      Reveal.on( 'slidechanged', event => {\n\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue({indexh: (event as any).indexh, indexv: (event as any).indexv, indexf: tempState.indexf, paused: tempState.paused, overview: tempState.overview});\n      });\n      \n      Reveal.on( 'fragmentshown', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'fragmenthidden', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewshown', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewhidden', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'paused', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'resumed', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n\n    });\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, []);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  useEffect(() => {\n    if (Reveal.isReady()){\n      if (disabled){\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"none\";\n        }\n      }\n      else {  \n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  // useEffect(() => {\n  //   const commands = JSON.parse(commandStr)\n  //   if (Array.isArray(commands) && commands.length > 0 && Reveal.isReady()){\n  //     commands.forEach((command: any) => {\n  //       if (typeof command === \"string\" && command in simpleCommands){\n  //         (simpleCommands as any)[command]();\n  //       }\n  //       else if (Array.isArray(command) && command.length > 0 && typeof command[0] === \"string\" && command[0] in commandsWithArgs){\n  //         if (command[0] === \"slide\"){\n  //           if (command.length === 3){\n  //             Reveal.slide(command[1], command[2]);\n  //           }\n  //           else if (command.length === 4){\n  //             Reveal.slide(command[1], command[2], command[3]);\n  //           }\n  //           else {\n  //             console.warn(\"Invalid slide command: slide command array must have 3 or 4 elements.\");\n  //           }\n  //         }\n  //         else {\n  //           (commandsWithArgs as any)[command[0]](command[1]);\n  //         }\n  //       }\n  //       else {\n  //         console.warn(\"Invalid command: command must be a string or an array containing a string as its first element.\");\n  //       }\n  //     });\n  //   }\n  //   else if (!Array.isArray(args[\"commands\"])) {\n  //     console.warn(\"Invalid commands property value: commands must be an array containing at least one command.\");\n  //   }\n  // }, [commandStr]);\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n          <script type={\"text/template\"}>\n          {args[\"content\"]}\n          </script>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport RevealSlides from \"./RevealSlides\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <RevealSlides />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}