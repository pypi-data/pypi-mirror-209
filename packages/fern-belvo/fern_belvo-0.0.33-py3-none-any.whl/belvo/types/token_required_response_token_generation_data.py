# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TokenRequiredResponseTokenGenerationData(pydantic.BaseModel):
    """
    Details on how to generate the token.
    """

    instructions: typing.Optional[str] = pydantic.Field(description=("Instructions for token generation.\n"))
    type: typing.Optional[str] = pydantic.Field(
        description=("Type of the data to generate the token (QR code, numeric challenge).\n")
    )
    value: typing.Optional[str] = pydantic.Field(description=("Value to use to generate the token.\n"))
    expects_user_input: typing.Optional[bool] = pydantic.Field(
        description=(
            "Indicates whether the user needs to provide input in order to complete the authentication.\n"
            "When set to `false`, your user may need to:\n"
            "- confirm the login on another device - scan a QR code\n"
            "You will still need to make a PATCH call to complete the request.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
