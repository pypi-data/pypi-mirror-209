# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_link_access_mode_response import EnumLinkAccessModeResponse
from .enum_link_refresh_rate import EnumLinkRefreshRate
from .enum_link_status import EnumLinkStatus


class Link(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID for the current Link.\n"))
    institution: typing.Optional[str] = pydantic.Field(description=("Belvo's name for the institution.\n"))
    access_mode: typing.Optional[EnumLinkAccessModeResponse]
    last_accessed_at: typing.Optional[str] = pydantic.Field(
        description=(
            "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.\n"
        )
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    external_id: typing.Optional[str] = pydantic.Field(
        description=(
            "The `external_id` you provided as an additional identifier for the link. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).\n"
        )
    )
    institution_user_id: typing.Optional[str] = pydantic.Field(
        description=(
            '<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info:</strong> Only applicable for links created <b>after 08-02-2022</b>. </div>\n'
            "\n"
            "A unique 44-character string that can be used to identify a user at a given institution.\n"
            "\n"
            "ðŸ“š Check out our [Avoiding duplicated links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links) DevPortal article for more information and tips on how to use it.\n"
        )
    )
    status: typing.Optional[EnumLinkStatus]
    created_by: typing.Optional[str] = pydantic.Field(
        description=("The unique ID for the user that created this link.\n")
    )
    refresh_rate: typing.Optional[EnumLinkRefreshRate]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
