# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_tax_retention_receiver_nationality import EnumTaxRetentionReceiverNationality
from .retention_breakdown import RetentionBreakdown


class TaxRetentions(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description=("Belvo's unique identifier used to reference the current tax retention statement.\n")
    )
    link: typing.Optional[str] = pydantic.Field(description=("The `link.id` the tax retention belongs to.\n"))
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    invoice_identification: typing.Optional[str] = pydantic.Field(
        description=("The fiscal institution's unique ID for the invoice that the tax retention relates to.\n")
    )
    version: typing.Optional[str] = pydantic.Field(description=("The CFDI version of the tax retentions.\n"))
    code: typing.Optional[int] = pydantic.Field(
        description=(
            "The tax retention code. For more information, see our [SAT Catalogs DevPortal article](https://developers.belvo.com/docs/sat-catalogs#retention-code).\n"
        )
    )
    issued_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the tax retention was issued.\n")
    )
    certified_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the tax retention was certified.\n")
    )
    cancelled_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the tax retention was canceled (if applicable).\n")
    )
    sender_id: typing.Optional[str] = pydantic.Field(description=("The fiscal ID of the invoice sender.\n"))
    sender_name: typing.Optional[str] = pydantic.Field(description=("The name of the invoice sender.\n"))
    receiver_nationality: EnumTaxRetentionReceiverNationality
    receiver_id: typing.Optional[str] = pydantic.Field(description=("The fiscal ID of the invoice receiver.\n"))
    receiver_name: typing.Optional[str] = pydantic.Field(description=("The name of the invoice receiver.\n"))
    total_invoice_amount: typing.Optional[float] = pydantic.Field(
        description=("The total amount of the invoice that the tax retention relates to.\n")
    )
    total_exempt_amount: typing.Optional[float] = pydantic.Field(
        description=("Total amount that is exempt from taxation.\n")
    )
    total_retained_amount: typing.Optional[float] = pydantic.Field(description=("Total tax retained.\n"))
    total_taxable_amount: typing.Optional[float] = pydantic.Field(
        description=(
            "The total amount that can be taxed. Calculated as `total_invoice_amount` - `total_exempt_amount`.\n"
        )
    )
    retention_breakdown: typing.Optional[typing.List[RetentionBreakdown]] = pydantic.Field(
        description=("A breakdown of the retained taxes.\n")
    )
    xml: typing.Optional[str] = pydantic.Field(description=("The tax retention document in XML form.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
