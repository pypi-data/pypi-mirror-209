# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_employment_record_status_update_events import EnumEmploymentRecordStatusUpdateEvents


class EmploymentRecordEmploymentStatusUpdates(pydantic.BaseModel):
    """
    Details regarding any employment changes of the individual.
    """

    event: typing.Optional[EnumEmploymentRecordStatusUpdateEvents]
    base_salary: typing.Optional[float] = pydantic.Field(
        description=("The base salary of the individual, current as of the `update_date`.\n")
    )
    update_date: typing.Optional[str] = pydantic.Field(
        description=("The date that the employment event occured, in `YYYY-MM-DD` format.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
