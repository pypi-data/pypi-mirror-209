# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PaymentWebhook(pydantic.BaseModel):
    id: str = pydantic.Field(description=("Belvo's unique ID for the webhook.\n"))
    name: typing.Any
    url: str = pydantic.Field(description=("The URL where webhook events should be sent to.\n"))
    auth_header: typing.Optional[str] = pydantic.Field(
        description=("The authentication header for the request. **Must** be set to `Authorization`.\n")
    )
    auth_token: typing.Optional[str] = pydantic.Field(
        description=("The authentication token you need to send webhook events. This value is obfuscated.\n")
    )
    created_at: str = pydantic.Field(
        description=("The ISO-8601 timestamp of when the webhook was created in our database.\n")
    )
    created_by: str = pydantic.Field(description=("Belvo's unique ID of the user that created the webhook.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
