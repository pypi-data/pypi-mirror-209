# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .tax_status_address_sat import TaxStatusAddressSat
from .tax_status_economic_activity_sat import TaxStatusEconomicActivitySat
from .tax_status_obligations_sat import TaxStatusObligationsSat
from .tax_status_regimens_sat import TaxStatusRegimensSat
from .tax_status_tax_payer_information_sat import TaxStatusTaxPayerInformationSat


class TaxStatusSat(pydantic.BaseModel):
    id: str = pydantic.Field(
        description=("Unique identifier created by Belvo used to reference the current Tax Status.\n")
    )
    link: str = pydantic.Field(description=("The `link.id` that the tax status is associated with.\n"))
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: str = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    place_and_date_of_issuance: typing.Optional[str] = pydantic.Field(
        description=("The place and date of that the tax status was issued.\n")
    )
    official_name: typing.Optional[str] = pydantic.Field(description=("The name of the person or business.\n"))
    id_cif: typing.Optional[str] = pydantic.Field(
        description=("The taxpayer's *Cédula de Identificación Fiscal* (CIF) ID.\n")
    )
    tax_payer_information: TaxStatusTaxPayerInformationSat
    address: TaxStatusAddressSat
    economic_activity: typing.Optional[typing.List[TaxStatusEconomicActivitySat]] = pydantic.Field(
        description=("A list of economic activity objects.\n")
    )
    regimes: typing.Optional[typing.List[TaxStatusRegimensSat]] = pydantic.Field(
        description=("A list of regimen objects.\n")
    )
    obligations: typing.Optional[typing.List[TaxStatusObligationsSat]] = pydantic.Field(
        description=(
            "Details regarding a business's obligations.\n"
            "\n"
            "ℹ️ For non-business accounts, this field will return empty.\n"
        )
    )
    digital_stamp: typing.Optional[str] = pydantic.Field(description=("The validation certificate of the document.\n"))
    digital_stamp_chain: typing.Optional[str] = pydantic.Field(
        description=(
            "A data chain containing the basic structure of a fiscal digital check. For Mexico, this is the *Comprobante Fiscal Digital por Internet* (CFDI).\n"
        )
    )
    pdf: typing.Optional[str] = pydantic.Field(description=("Tax status PDF as a binary string.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
