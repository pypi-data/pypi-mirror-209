# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .owner_document_id import OwnerDocumentId


class Owner(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description=("Belvo's unique identifier used to reference the current owner.\n")
    )
    link: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID for the current Link.\n"))
    internal_identification: typing.Optional[str] = pydantic.Field(
        description=("The institution's internal identifier for the owner.\n")
    )
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    display_name: typing.Optional[str] = pydantic.Field(
        description=("The full name of the owner, as provided by the bank.\n")
    )
    email: typing.Optional[str] = pydantic.Field(description=("The account owner's registered email address.\n"))
    phone_number: typing.Optional[str] = pydantic.Field(description=("The account owner's registered phone number.\n"))
    address: typing.Optional[str] = pydantic.Field(description=("The accounts owners registered address.\n"))
    document_id: typing.Optional[OwnerDocumentId]
    first_name: typing.Optional[str] = pydantic.Field(
        description=("*This field has been deprecated.*\n" "\n" "*The first name of the account owner.*\n")
    )
    last_name: typing.Optional[str] = pydantic.Field(
        description=("*This field has been deprecated.*\n" "\n" "*The last name of the account owner.*\n")
    )
    second_last_name: typing.Optional[str] = pydantic.Field(
        description=("*This field has been deprecated.*\n" "\n" "*The second last name of the account owner.*\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
