# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TaxAssessmentBusiness(pydantic.BaseModel):
    """
    Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.
    """

    net_income_taxable: float = pydantic.Field(description=("The net income on which tax can be applied.\n"))
    fortuitous_profit_tax: float = pydantic.Field(
        description=("The tax applied on your unexpected income (such as lottery wins or house sales).\n")
    )
    total_tax_on_taxable_net_income: float = pydantic.Field(
        description=(
            "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).\n"
        )
    )
    net_income_tax: float = pydantic.Field(
        description=(
            "After additional deductions that you can apply, this will be the net income tax. If no further deduction are identified, this value will be the same as `total_tax_on_taxable_net_income`.\n"
        )
    )
    total_tax_due: float = pydantic.Field(
        description=(
            "After further deductions, this is the final calculated tax that the taxpayer is required to pay.\n"
        )
    )
    total_withholdings_for_the_taxable_year_to_be_declared: float = pydantic.Field(
        description=("How much the tax payer has already paid througout the fiscal year.\n")
    )
    total_balance_payable: float = pydantic.Field(description=("How much the tax payer is required to pay.\n"))
    total_balance_in_favor: float = pydantic.Field(description=("How much the tax payer is expected to receive.\n"))
    total_payment: float = pydantic.Field(
        description=("The total the tax payer is required to pay, taking into account deductions and fiscal credits.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
