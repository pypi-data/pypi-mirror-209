# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TaxReturnPersonalMonthly(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description=("Unique identifier created by Belvo used to reference the current Tax Return.\n")
    )
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    informacion_general: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=(
            "General information regarding the tax return (year, RFC, return type, person/company name, and so on).\n"
        )
    )
    isr: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Information used to calculate the monthly provisional payments of the income tax.\n")
    )
    iva: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Information used to calculate the monthly provisional payments of the VAT tax.\n")
    )
    pdf: typing.Optional[str] = pydantic.Field(description=("Tax return PDF as a binary.\n"))
    receipt_pdf: typing.Optional[str] = pydantic.Field(
        description=(
            "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.\n"
        )
    )
    type: str = pydantic.Field(description=("The type of tax return. Can be either monthly or annual.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
