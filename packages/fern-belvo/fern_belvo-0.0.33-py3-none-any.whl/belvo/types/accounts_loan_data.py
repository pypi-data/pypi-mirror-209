# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .accounts_loan_data_fees import AccountsLoanDataFees
from .accounts_loan_data_interest_rate import AccountsLoanDataInterestRate


class AccountsLoanData(pydantic.BaseModel):
    collected_at: str = pydantic.Field(description=("The ISO-8601 timestamp when the data point was collected.\n"))
    contract_amount: typing.Optional[float] = pydantic.Field(
        description=(
            "The initial total loan amount, calculated by the institution, when the contract was signed. This amount includes the principal + interest + taxes + fees.\n"
        )
    )
    principal: typing.Optional[float] = pydantic.Field(
        description=("Total amount of the loan (the amount the user receives).\n")
    )
    loan_type: typing.Optional[str] = pydantic.Field(
        description=("The type of the loan, according to the institution.\n")
    )
    payment_day: typing.Optional[str] = pydantic.Field(
        description=("The day of the month by which the owner needs to pay the loan (`YYYY-MM-DD`).\n")
    )
    outstanding_principal: typing.Optional[float] = pydantic.Field(
        description=(
            "Outstanding loan amount, that is, how much remains to pay on the principal (not including interest).\n"
        )
    )
    outstanding_balance: typing.Optional[float] = pydantic.Field(
        description=("The amount remaining to pay in total, including interest.\n")
    )
    monthly_payment: typing.Optional[float] = pydantic.Field(
        description=("The recurrent monthly payment, if applicable.\n")
    )
    interest_rates: typing.Optional[typing.List[AccountsLoanDataInterestRate]] = pydantic.Field(
        description=("Breakdown of the interest applied to the loan.\n")
    )
    fees: typing.Optional[typing.List[AccountsLoanDataFees]] = pydantic.Field(
        description=("Breakdown of the fees applied to the loan.\n")
    )
    number_of_installments_total: typing.Optional[int] = pydantic.Field(
        description=("The total number of installments required to pay the loan.\n")
    )
    number_of_installments_outstanding: typing.Optional[int] = pydantic.Field(
        description=("The number of installments left to pay.\n")
    )
    contract_start_date: typing.Optional[str] = pydantic.Field(
        description=("The date when the loan contract was signed (`YYYY-MM-DD`).\n")
    )
    contract_end_date: typing.Optional[str] = pydantic.Field(
        description=("The date when the loan is expected to be completed.\n")
    )
    contract_number: typing.Optional[str] = pydantic.Field(
        description=("The contract number of the loan, as given by the institution.\n")
    )
    credit_limit: typing.Optional[float] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "Please see `principal` instead.\n")
    )
    last_period_balance: typing.Optional[float] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "Please see `outstanding_balance` instead.\n")
    )
    interest_rate: typing.Optional[float] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "Please see the `interest_rates` object instead.\n")
    )
    limit_day: typing.Optional[str] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "Please see `payment_day` instead.\n")
    )
    cutting_day: typing.Optional[str] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "The closing day of the month for the loan.\n")
    )
    cutting_date: typing.Optional[str] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "The closing date of the loan period.\n")
    )
    last_payment_date: typing.Optional[str] = pydantic.Field(
        description=("This field has been deprecated.\n" "\n" "The date when the last loan payment was made.\n")
    )
    no_interest_payment: typing.Optional[float] = pydantic.Field(
        description=(
            "This field has been deprecated.\n"
            "\n"
            "The minimum amount required to pay to avoid generating interest.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
