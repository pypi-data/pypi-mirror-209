# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_customer_identifier_type_pse import EnumCustomerIdentifierTypePse
from .enum_customer_type import EnumCustomerType
from .enum_payments_country import EnumPaymentsCountry


class CustomerPse(pydantic.BaseModel):
    id: str = pydantic.Field(description=("Belvo's unique ID for the current customer.\n"))
    created_at: str = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    created_by: str = pydantic.Field(description=("Belvo's unique ID for the user that created the customer.\n"))
    customer_type: EnumCustomerType
    name: str = pydantic.Field(description=("The full name of the customer.\n"))
    country: EnumPaymentsCountry
    email: str = pydantic.Field(description=("The customer's email address.\n"))
    identifier: str = pydantic.Field(description=("The document number of the customer's ID.\n"))
    identifier_type: EnumCustomerIdentifierTypePse
    address: typing.Optional[str] = pydantic.Field(
        description=(
            "The customers physical address.\n"
            "\n"
            "\n"
            "**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.\n"
        )
    )
    phone: typing.Optional[str] = pydantic.Field(
        description=(
            "The customer's phone number.\n"
            "\n"
            "\n"
            "**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
