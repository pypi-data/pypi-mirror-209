# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class InvoicesPayrollSat(pydantic.BaseModel):
    days: typing.Optional[int] = pydantic.Field(description=("The number of days covered by the payment.\n"))
    type: typing.Optional[str] = pydantic.Field(
        description=(
            "The payroll type, as defined by the legal entity of the country.\n"
            "\n"
            "- ðŸ‡²ðŸ‡½ Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)\n"
        )
    )
    amount: float = pydantic.Field(description=("The total amount of the payroll payment.\n"))
    version: str = pydantic.Field(description=("The version of the payroll object.\n"))
    date_from: typing.Optional[str] = pydantic.Field(description=("The start date of the payment period.\n"))
    date_to: typing.Optional[str] = pydantic.Field(description=("The end date of the payment period.\n"))
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    payment_date: str = pydantic.Field(description=("The payment date.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
