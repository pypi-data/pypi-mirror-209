# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_investment_portfolio_type import EnumInvestmentPortfolioType
from .investments_portfolio_instrument import InvestmentsPortfolioInstrument


class InvestmentsPortfolio(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID for the current portfolio.\n"))
    name: str = pydantic.Field(description=("The name of the portfolio, as given in the institution.\n"))
    type: EnumInvestmentPortfolioType
    balance_type: typing.Optional[str] = pydantic.Field(
        description=(
            "Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.\n"
        )
    )
    balance_gross: typing.Optional[float] = pydantic.Field(
        description=(
            "The current gross total value of the entire portfolio and all its underlying instruments, as given by the institution.\n"
        )
    )
    balance_net: typing.Optional[float] = pydantic.Field(
        description=(
            "The total current value of the entire portfolio and all its underlying instruments, as given by the institution.\n"
            "\n"
            "ℹ️ **Note:** In Brazil, this is usually calculated based on the net value (that is, not including tax).\n"
        )
    )
    currency: str = pydantic.Field(
        description=(
            "The currency of the portfolio. For example:\n"
            "\n"
            "\n"
            "- 🇧🇷 BRL (Brazilian Real)\n"
            "- 🇨🇴 COP (Colombian Peso)\n"
            "- 🇲🇽 MXN (Mexican Peso)\n"
            "\n"
            "\n"
            "Please note that other currencies other than in the list above may be returned.\n"
        )
    )
    instruments: typing.Optional[typing.List[InvestmentsPortfolioInstrument]] = pydantic.Field(
        description=("An array of instruments that fall into the investment portfolio.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
