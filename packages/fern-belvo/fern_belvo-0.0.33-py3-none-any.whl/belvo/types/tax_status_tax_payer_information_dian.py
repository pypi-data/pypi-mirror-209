# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TaxStatusTaxPayerInformationDian(pydantic.BaseModel):
    rfc: typing.Optional[str] = pydantic.Field(description=("The tax payers's identification number (NIT).\n"))
    curp: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n")
    )
    name: typing.Optional[str] = pydantic.Field(description=("The tax payers's first name.\n"))
    first_last_name: typing.Optional[str] = pydantic.Field(description=("The tax payers's first last name.\n"))
    second_last_name: typing.Optional[str] = pydantic.Field(description=("The tax payers's second last name.\n"))
    start_operations_date: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n")
    )
    status_padron: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n")
    )
    last_status_change_date: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n")
    )
    commercial_name: typing.Optional[str] = pydantic.Field(
        description=(
            "The name of the business designated for consumers and the general public.\n"
            "\n"
            "**Note**: Only applicable for businesses.\n"
        )
    )
    social_name: typing.Optional[str] = pydantic.Field(
        description=(
            "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.\n"
            "**Note**: Only applicable for businesses.\n"
        )
    )
    email: typing.Optional[str] = pydantic.Field(description=("Contact email address for the tax payer.\n"))
    phone: typing.Optional[str] = pydantic.Field(description=("Contact phone number for the tax payer.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
