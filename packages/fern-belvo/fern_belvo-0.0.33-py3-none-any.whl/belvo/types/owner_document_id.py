# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class OwnerDocumentId(pydantic.BaseModel):
    document_type: typing.Optional[str] = pydantic.Field(
        description=(
            "The type of document the owner provided to the institution to open the account. Common document types are:\n"
            "\n"
            "ðŸ‡§ðŸ‡· Brazil\n"
            "- `CPF` (*Cadastro de Pessoas FÃ­sicas*)\n"
            "- `CNPJ`(*Cadastro Nacional de Pessoas JurÃ­dicas*)\n"
            "\n"
            "ðŸ‡¨ðŸ‡´ Colombia\n"
            "- `CC`(*CÃ©dula de CiudadanÃ­a*)\n"
            "- `NIT` (*NÃºmero de IdentificaciÃ³n Tributaria*)\n"
            "\n"
            "ðŸ‡²ðŸ‡½ Mexico\n"
            "- `CURP` (*Clave Ãšnica de Registro de PoblaciÃ³n*)\n"
            "- `NISS` (*NÃºmero de Seguridad Social*)\n"
        )
    )
    document_number: typing.Optional[str] = pydantic.Field(description=("The document's identification number.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
