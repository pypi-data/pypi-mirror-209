# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .tax_status_address_dian import TaxStatusAddressDian
from .tax_status_economic_activity_dian import TaxStatusEconomicActivityDian
from .tax_status_obligations_dian import TaxStatusObligationsDian
from .tax_status_regimens_dian import TaxStatusRegimensDian
from .tax_status_tax_payer_information_dian import TaxStatusTaxPayerInformationDian


class TaxStatusDian(pydantic.BaseModel):
    id: str = pydantic.Field(
        description=("Unique identifier created by Belvo used to reference the current Tax Status.\n")
    )
    link: str = pydantic.Field(description=("The `link.id` that the tax status is associated with.\n"))
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: str = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    place_and_date_of_issuance: typing.Optional[str] = pydantic.Field(
        description=("The date when the tax status was issued. For example, `2020-08-05/18:55:16`.\n")
    )
    official_name: typing.Optional[str] = pydantic.Field(
        description=(
            "The name of the business.\n" "\n" "Note: For individuals in Colombia, this field will return `null`.\n"
        )
    )
    id_cif: typing.Optional[str] = pydantic.Field(
        description=("The taxpayer's *Cédula de ciudadanía* (CC) ID. Only applicable for individuals.\n")
    )
    tax_payer_information: TaxStatusTaxPayerInformationDian
    address: TaxStatusAddressDian
    economic_activity: typing.Optional[typing.List[TaxStatusEconomicActivityDian]] = pydantic.Field(
        description=("A list of economic activity objects.\n")
    )
    regimes: typing.Optional[typing.List[TaxStatusRegimensDian]] = pydantic.Field(
        description=("A list of regimen objects.\n")
    )
    obligations: typing.Optional[typing.List[TaxStatusObligationsDian]] = pydantic.Field(
        description=(
            "Details regarding a business's obligations.\n"
            "\n"
            "ℹ️ For non-business accounts, this field will return empty.\n"
        )
    )
    digital_stamp: typing.Optional[str] = pydantic.Field(description=("The validation certificate of the document.\n"))
    digital_stamp_chain: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n")
    )
    pdf: typing.Optional[str] = pydantic.Field(description=("Tax status PDF as a binary string.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
