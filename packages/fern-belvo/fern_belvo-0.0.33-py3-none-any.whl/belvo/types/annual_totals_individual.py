# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class AnnualTotalsIndividual(pydantic.BaseModel):
    """
    Object containing the tax payers total exempt, deducted, and ordinary net incomes.
    """

    total_exempt_income: float = pydantic.Field(
        description=("Total income that is not taxable, according to the institution.\n")
    )
    total_applicable_deductions: float = pydantic.Field(
        description=("Total deductions that the taxpayer can apply to their income, according to the institution.\n")
    )
    total_exemptions_and_deductions: float = pydantic.Field(
        description=("Sum total of all exempt and deductions that can be applied to the taxpayer's income.\n")
    )
    total_ordinary_net_income: float = pydantic.Field(
        description=("Sum total of the taxpayer's income (gross income - exemptions - deductions).\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
