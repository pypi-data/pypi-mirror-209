# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class RiskInsightsTransactionMetrics(pydantic.BaseModel):
    num_transactions_1_w: int = pydantic.Field(
        alias="num_transactions_1w",
        description=(
            "The total number of transactions analyzed to determine the risk insights for the last week (incoming and outgoing).\n"
        ),
    )
    num_transactions_1_m: int = pydantic.Field(
        alias="num_transactions_1m",
        description=(
            "The total number of transactions analyzed to determine the risk insights for the last month (incoming and outgoing).\n"
        ),
    )
    num_transactions_3_m: int = pydantic.Field(
        alias="num_transactions_3m",
        description=(
            "The total number of transactions analyzed to determine the risk insights for the last three months (incoming and outgoing).\n"
        ),
    )
    num_incoming_transactions_1_w: int = pydantic.Field(
        alias="num_incoming_transactions_1w",
        description=(
            "The total number of inflow transactions for the last week.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    num_incoming_transactions_1_m: int = pydantic.Field(
        alias="num_incoming_transactions_1m",
        description=(
            "The total number of inflow transactions for the last month.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    num_incoming_transactions_3_m: int = pydantic.Field(
        alias="num_incoming_transactions_3m",
        description=(
            "The total number of inflow transactions for the last three months.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    num_outgoing_transactions_1_w: int = pydantic.Field(
        alias="num_outgoing_transactions_1w",
        description=(
            "To total number of outflow transactions in the last week.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    num_outgoing_transactions_1_m: int = pydantic.Field(
        alias="num_outgoing_transactions_1m",
        description=(
            "To total number of outflow transactions in the last month.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    num_outgoing_transactions_3_m: int = pydantic.Field(
        alias="num_outgoing_transactions_3m",
        description=(
            "To total number of outflow transactions in the last three months.\n"
            "\n"
            "ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n"
            "\n"
            "If the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n"
        ),
    )
    sum_incoming_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="sum_incoming_amount_1w", description=("The total sum of all inflow transactions for the last week.\n")
    )
    sum_incoming_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="sum_incoming_amount_1m", description=("The total sum of all inflow transactions for the last month.\n")
    )
    sum_incoming_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="sum_incoming_amount_3m",
        description=("The total sum of all inflow transactions for the last three months.\n"),
    )
    sum_outgoing_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="sum_outgoing_amount_1w", description=("The total sum of all outflow transactions for the last week.\n")
    )
    sum_outgoing_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="sum_outgoing_amount_1m", description=("The total sum of all outflow transactions for the last month.\n")
    )
    sum_outgoing_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="sum_outgoing_amount_3m",
        description=("The total sum of all outflow transactions for the last three months.\n"),
    )
    max_incoming_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="max_incoming_amount_1w", description=("The highest value inflow transaction in the last week.\n")
    )
    max_incoming_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="max_incoming_amount_1m", description=("The highest value inflow transaction in the last month.\n")
    )
    max_incoming_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="max_incoming_amount_3m", description=("The highest value inflow transaction in the last three months.\n")
    )
    max_outgoing_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="max_outgoing_amount_1w", description=("The highest value outflow transaction in the last week.\n")
    )
    max_outgoing_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="max_outgoing_amount_1m", description=("The highest value outflow transaction in the last month.\n")
    )
    max_outgoing_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="max_outgoing_amount_3m",
        description=("The highest value outflow transaction in the last three months.\n"),
    )
    mean_incoming_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="mean_incoming_amount_1w", description=("The mean incoming value of all transactions in the last week.\n")
    )
    mean_incoming_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="mean_incoming_amount_1m",
        description=("The mean incoming value of all transactions in the last month.\n"),
    )
    mean_incoming_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="mean_incoming_amount_3m",
        description=("The mean incoming value of all transactions in the last three months.\n"),
    )
    mean_outgoing_amount_1_w: typing.Optional[float] = pydantic.Field(
        alias="mean_outgoing_amount_1w", description=("The mean outgoing value of all transaction in the last week.\n")
    )
    mean_outgoing_amount_1_m: typing.Optional[float] = pydantic.Field(
        alias="mean_outgoing_amount_1m", description=("The mean outgoing value of all transaction in the last month.\n")
    )
    mean_outgoing_amount_3_m: typing.Optional[float] = pydantic.Field(
        alias="mean_outgoing_amount_3m",
        description=("The mean outgoing value of all transaction in the last three months.\n"),
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
