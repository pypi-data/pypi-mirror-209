# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class InvoiceDetailRetainedTaxSat(pydantic.BaseModel):
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    tax_type: typing.Optional[str] = pydantic.Field(
        description=("**Note**: This field is not applicable for SAT Mexico and will return `null`.\n")
    )
    tax: typing.Optional[str] = pydantic.Field(
        description=("The type of retained tax (for example, ISR, IVA or IEPS).\n")
    )
    tax_percentage: typing.Optional[float] = pydantic.Field(description=("The percentage of tax retained.\n"))
    retained_tax_amount: typing.Optional[float] = pydantic.Field(description=("The amount of retained tax.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
