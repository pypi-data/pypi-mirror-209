# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_payments_country import EnumPaymentsCountry
from .institution_form_field import InstitutionFormField


class PaymentInstitution(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID to reference the institution.\n"))
    active: typing.Optional[bool] = pydantic.Field(
        description=("Indicates whether this institution is available for use or not.\n")
    )
    name: typing.Optional[str] = pydantic.Field(description=("The name of the institution, as designated by Belvo.\n"))
    display_name: typing.Optional[str] = pydantic.Field(description=("The customer-facing name of the institution.\n"))
    legal_entity_name: typing.Optional[str] = pydantic.Field(
        description=(
            "The name of the legal entity of the institution, as registered with the relevant regulatory authority. Only applicable for ðŸ‡§ðŸ‡· Brazil OFPI.\n"
        )
    )
    website: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's website.\n"))
    logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's logo.\n"))
    icon_logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's icon logo.\n"))
    text_logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's text logo.\n"))
    primary_color: typing.Optional[str] = pydantic.Field(
        description=("The primary color on the institution's website.\n")
    )
    country: typing.Optional[EnumPaymentsCountry]
    form_fields: typing.Optional[typing.List[InstitutionFormField]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
