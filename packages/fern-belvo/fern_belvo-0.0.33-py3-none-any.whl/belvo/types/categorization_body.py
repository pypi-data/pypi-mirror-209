# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .categorization_merchant_data import CategorizationMerchantData
from .enum_categorization_account_category import EnumCategorizationAccountCategory
from .enum_categorization_account_holder_type import EnumCategorizationAccountHolderType
from .enum_categorization_transaction_category import EnumCategorizationTransactionCategory
from .enum_categorization_transaction_subcategory import EnumCategorizationTransactionSubcategory
from .enum_categorization_transaction_type import EnumCategorizationTransactionType


class CategorizationBody(pydantic.BaseModel):
    transaction_id: str = pydantic.Field(description=("The unique ID for the transaction in your system.\n"))
    account_holder_type: EnumCategorizationAccountHolderType
    account_holder_id: str = pydantic.Field(description=("The unique ID for the account holder in your system.\n"))
    account_id: str = pydantic.Field(
        description=("The unique ID for the account where the transaction occurred in your system.\n")
    )
    account_category: EnumCategorizationAccountCategory
    value_date: str = pydantic.Field(description=("The date when the transaction occurred, in `YYYY-MM-DD` format.\n"))
    description: str = pydantic.Field(description=("The description of the transaction.\n"))
    type: EnumCategorizationTransactionType
    amount: float = pydantic.Field(description=("The transaction amount.\n"))
    currency: str = pydantic.Field(
        description=(
            "The currency of the account, in ISO-4217 format. For example:\n"
            "- ðŸ‡§ðŸ‡· BRL (Brazilian Real)\n"
            "- ðŸ‡¨ðŸ‡´ COP (Colombian Peso)\n"
            "- ðŸ‡²ðŸ‡½ MXN (Mexican Peso)\n"
        )
    )
    institution: str = pydantic.Field(
        description=(
            "The institution where the account is registered.\n"
            "\n"
            ">**Note:** This is the name that you use in your system to identify an institution.\n"
        )
    )
    mcc: typing.Optional[int] = pydantic.Field(
        description=(
            "The four-digit ISO 18245 Merchant Category Code (MCC). We only return this value when `account_type` = `CREDIT_CARD`.\n"
        )
    )
    category: EnumCategorizationTransactionCategory
    subcategory: typing.Optional[EnumCategorizationTransactionSubcategory]
    merchant: CategorizationMerchantData

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
