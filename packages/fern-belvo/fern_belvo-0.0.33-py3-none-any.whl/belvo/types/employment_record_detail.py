# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .employment_record_employment_status_updates import EmploymentRecordEmploymentStatusUpdates


class EmploymentRecordDetail(pydantic.BaseModel):
    """
    Details regarding the individual's employment history.
    """

    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    employer: typing.Optional[str] = pydantic.Field(description=("The official name of the employer.\n"))
    employer_id: typing.Optional[str] = pydantic.Field(
        description=("The official ID of the employer, according to the country.\n")
    )
    start_date: typing.Optional[str] = pydantic.Field(
        description=("Date when employment started, in `YYYY-MM-DD` format.\n")
    )
    end_date: typing.Optional[str] = pydantic.Field(
        description=("Date when employment finished, in `YYYY-MM-DD` format.\n")
    )
    weeks_employed: typing.Optional[int] = pydantic.Field(
        description=("Number of weeks that the individual was employed.\n")
    )
    state: typing.Optional[str] = pydantic.Field(
        description=("In what geographical state the individual was employed, according to the country.\n")
    )
    most_recent_base_salary: typing.Optional[float] = pydantic.Field(
        description=(
            "The most recent base salary the individual earned.\n"
            "\n"
            "For Mexico, this is the *daily* rate that the individual earned, including the perks that the individual is entitled to throughout the year.\n"
        )
    )
    monthly_salary: typing.Optional[float] = pydantic.Field(
        description=("The monthly salary of the individual, including any additional perks.\n")
    )
    currency: typing.Optional[str] = pydantic.Field(
        description=("The three-letter currency code in which the salary is paid.\n")
    )
    employment_status_updates: typing.Optional[typing.List[EmploymentRecordEmploymentStatusUpdates]] = pydantic.Field(
        description=("Details regarding any employment changes of the individual.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
