# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...environment import BelvoEnvironment
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.internal_server_error import InternalServerError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.access_to_resource_denied import AccessToResourceDenied
from ...types.bad_request_error_body_item import BadRequestErrorBodyItem
from ...types.enum_income_minimum_confidence_level_request import EnumIncomeMinimumConfidenceLevelRequest
from ...types.enum_invoice_allowed_income_types_request import EnumInvoiceAllowedIncomeTypesRequest
from ...types.eyod_income_verification_body_request import EyodIncomeVerificationBodyRequest
from ...types.income import Income
from ...types.unauthorized_error_body import UnauthorizedErrorBody
from ...types.unexpected_error import UnexpectedError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IncomeVerificationClient:
    def __init__(
        self, *, environment: BelvoEnvironment = BelvoEnvironment.PRODUCTION, secret_id: str, secret_password: str
    ):
        self._environment = environment
        self._secret_id = secret_id
        self._secret_password = secret_password

    def verify_income(
        self,
        *,
        language: str,
        transactions: typing.List[EyodIncomeVerificationBodyRequest],
        date_from: typing.Optional[str] = OMIT,
        date_to: typing.Optional[str] = OMIT,
        allowed_income_types: typing.Optional[typing.List[EnumInvoiceAllowedIncomeTypesRequest]] = OMIT,
        minimum_confidence_level: typing.Optional[EnumIncomeMinimumConfidenceLevelRequest] = OMIT,
    ) -> typing.List[Income]:
        _request: typing.Dict[str, typing.Any] = {"language": language, "transactions": transactions}
        if date_from is not OMIT:
            _request["date_from"] = date_from
        if date_to is not OMIT:
            _request["date_to"] = date_to
        if allowed_income_types is not OMIT:
            _request["allowed_income_types"] = allowed_income_types
        if minimum_confidence_level is not OMIT:
            _request["minimum_confidence_level"] = minimum_confidence_level
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/enrich/incomes"),
            json=jsonable_encoder(_request),
            auth=(self._secret_id, self._secret_password)
            if self._secret_id is not None and self._secret_password is not None
            else None,
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Income], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(
                pydantic.parse_obj_as(typing.List[BadRequestErrorBodyItem], _response.json())  # type: ignore
            )
        if _response.status_code == 401:
            raise UnauthorizedError(
                pydantic.parse_obj_as(typing.List[UnauthorizedErrorBody], _response.json())  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                pydantic.parse_obj_as(typing.List[AccessToResourceDenied], _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(
                pydantic.parse_obj_as(typing.List[UnexpectedError], _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIncomeVerificationClient:
    def __init__(
        self, *, environment: BelvoEnvironment = BelvoEnvironment.PRODUCTION, secret_id: str, secret_password: str
    ):
        self._environment = environment
        self._secret_id = secret_id
        self._secret_password = secret_password

    async def verify_income(
        self,
        *,
        language: str,
        transactions: typing.List[EyodIncomeVerificationBodyRequest],
        date_from: typing.Optional[str] = OMIT,
        date_to: typing.Optional[str] = OMIT,
        allowed_income_types: typing.Optional[typing.List[EnumInvoiceAllowedIncomeTypesRequest]] = OMIT,
        minimum_confidence_level: typing.Optional[EnumIncomeMinimumConfidenceLevelRequest] = OMIT,
    ) -> typing.List[Income]:
        _request: typing.Dict[str, typing.Any] = {"language": language, "transactions": transactions}
        if date_from is not OMIT:
            _request["date_from"] = date_from
        if date_to is not OMIT:
            _request["date_to"] = date_to
        if allowed_income_types is not OMIT:
            _request["allowed_income_types"] = allowed_income_types
        if minimum_confidence_level is not OMIT:
            _request["minimum_confidence_level"] = minimum_confidence_level
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "api/enrich/incomes"),
                json=jsonable_encoder(_request),
                auth=(self._secret_id, self._secret_password)
                if self._secret_id is not None and self._secret_password is not None
                else None,
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Income], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(
                pydantic.parse_obj_as(typing.List[BadRequestErrorBodyItem], _response.json())  # type: ignore
            )
        if _response.status_code == 401:
            raise UnauthorizedError(
                pydantic.parse_obj_as(typing.List[UnauthorizedErrorBody], _response.json())  # type: ignore
            )
        if _response.status_code == 403:
            raise ForbiddenError(
                pydantic.parse_obj_as(typing.List[AccessToResourceDenied], _response.json())  # type: ignore
            )
        if _response.status_code == 500:
            raise InternalServerError(
                pydantic.parse_obj_as(typing.List[UnexpectedError], _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
