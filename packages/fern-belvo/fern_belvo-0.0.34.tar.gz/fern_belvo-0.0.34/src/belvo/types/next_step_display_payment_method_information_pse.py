# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .display_payment_method_information_content_pse import DisplayPaymentMethodInformationContentPse
from .next_step_display_payment_method_information_pse_type import NextStepDisplayPaymentMethodInformationPseType


class NextStepDisplayPaymentMethodInformationPse(pydantic.BaseModel):
    """
    Object detailing the next steps you should follow for a specific `next_step` type. You'll need to send a PATCH request with the institution selected by the customer or their bank accounts (if there are accounts already saved in the Belvo database).
    """

    type: typing.Optional[NextStepDisplayPaymentMethodInformationPseType] = pydantic.Field(
        description=("The type of `next_step` you need to follow.\n")
    )
    pse_display_payment_method_information: typing.Optional[DisplayPaymentMethodInformationContentPse]
    ready_to_confirm: typing.Optional[bool] = pydantic.Field(
        description=(
            "Boolean that indicates whether the payment intent is ready to be confirmed.\n"
            "\n"
            "  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
