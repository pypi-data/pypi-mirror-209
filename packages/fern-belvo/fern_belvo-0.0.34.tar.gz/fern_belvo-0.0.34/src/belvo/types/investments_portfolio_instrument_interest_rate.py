# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class InvestmentsPortfolioInstrumentInterestRate(pydantic.BaseModel):
    type: str = pydantic.Field(description=("How often the interest rate is calculated on the instrument.\n"))
    value: float = pydantic.Field(
        description=(
            "The interest rate for the instrument, in percent.\n"
            "\n"
            "\n"
            "ℹ️  **Note:** If the `interest_rate.index` is present, this value is a percentage of the index. For example, if `interest_rate.index` = `CDI` and `interest_rate.value` = `90`, then the total interest rate applied is 90% of the CDI.\n"
        )
    )
    index: typing.Optional[str] = pydantic.Field(
        description=("If applicable, the index type that the `interest_rates.value` is calculated against.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
