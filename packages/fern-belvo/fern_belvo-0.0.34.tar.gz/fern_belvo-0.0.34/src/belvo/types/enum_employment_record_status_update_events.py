# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EnumEmploymentRecordStatusUpdateEvents(str, enum.Enum):
    """
    The event that caused the change in employment status or salary. We return one of the following values:

      - `DISMISSED_RESIGNED`
      - `SALARY_MODIFICATION`
      - `HIRED`
      - `VOLUNTARY_CONTRIBUTION`
      - `ABSENCE`
      - `SICK_LEAVE`
    """

    DISMISSED_RESIGNED = "DISMISSED_RESIGNED"
    SALARY_MODIFICATION = "SALARY_MODIFICATION"
    HIRED = "HIRED"
    VOLUNTARY_CONTRIBUTION = "VOLUNTARY_CONTRIBUTION"
    ABSENCE = "ABSENCE"
    SICK_LEAVE = "SICK_LEAVE"

    def visit(
        self,
        dismissed_resigned: typing.Callable[[], T_Result],
        salary_modification: typing.Callable[[], T_Result],
        hired: typing.Callable[[], T_Result],
        voluntary_contribution: typing.Callable[[], T_Result],
        absence: typing.Callable[[], T_Result],
        sick_leave: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EnumEmploymentRecordStatusUpdateEvents.DISMISSED_RESIGNED:
            return dismissed_resigned()
        if self is EnumEmploymentRecordStatusUpdateEvents.SALARY_MODIFICATION:
            return salary_modification()
        if self is EnumEmploymentRecordStatusUpdateEvents.HIRED:
            return hired()
        if self is EnumEmploymentRecordStatusUpdateEvents.VOLUNTARY_CONTRIBUTION:
            return voluntary_contribution()
        if self is EnumEmploymentRecordStatusUpdateEvents.ABSENCE:
            return absence()
        if self is EnumEmploymentRecordStatusUpdateEvents.SICK_LEAVE:
            return sick_leave()
