# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PatchBodyWithoutSaveData(pydantic.BaseModel):
    """
    A JSON object containing a session UUID and a MFA token
    """

    session: str = pydantic.Field(
        description=(
            "The session you want to resume. You need to use the `session` value that is provided in the 428 Token Required response that you receive after you make your POST request.\n"
        )
    )
    token: typing.Optional[str] = pydantic.Field(
        description=("The MFA token generated by the institution and required to continue a session.\n")
    )
    link: str = pydantic.Field(
        description=(
            "The `link.id` you want to resume. Must be the same `link.id` as the one you receive in the 428 Token Required response that contains the `session` ID.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
