# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .accounts_funds_data_public_identifications import AccountsFundsDataPublicIdentifications


class AccountsFundsData(pydantic.BaseModel):
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    name: typing.Optional[str] = pydantic.Field(description=("The pension fund name.\n"))
    type: typing.Optional[str] = pydantic.Field(description=("Type of pension fund.\n"))
    public_identifications: typing.Optional[typing.List[AccountsFundsDataPublicIdentifications]] = pydantic.Field(
        description=("The fund's public IDs.\n")
    )
    balance: typing.Optional[float] = pydantic.Field(description=("The amount in the fund.\n"))
    percentage: typing.Optional[float] = pydantic.Field(
        description=("How much this fund, as a percentage, contributes to the pension account's total.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
