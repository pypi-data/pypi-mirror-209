# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PatchPaymentMethodDetailsPse(pydantic.BaseModel):
    """
    Object with required fields to fill information in the payment intent object. The information you need to send through depends on the next step Belvo returns in the response.
    """

    payer_institution: typing.Optional[str] = pydantic.Field(
        description=(
            "Belvo's unique identifier for the payer’s institution.\n"
            "\n"
            "**Note**: You need to send through this information after you received the `pse_display_payment_method_information` next step in the payment intent.\n"
        )
    )
    username: typing.Optional[str] = pydantic.Field(
        description=(
            "The username used to log in to the institution.\n"
            "\n"
            "**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.\n"
        )
    )
    password: typing.Optional[str] = pydantic.Field(
        description=(
            "The password used to log in to the institution.\n"
            "\n"
            "**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.\n"
        )
    )
    payer_token: typing.Optional[str] = pydantic.Field(
        description=(
            "The MFA token generated by the institution and required to continue the payment flow.\n"
            "\n"
            "**Note**: You need to send through this information if you received the `pse_display_token_required` next step in the payment intent.\n"
        )
    )
    payer_bank_account: typing.Optional[str] = pydantic.Field(
        description=(
            "Belvo's unique identifier for the payer’s bank account.\n"
            "\n"
            "**Note**: You need to send through this information after you received the `pse_display_customer_bank_accounts` next step in the payment intent.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
