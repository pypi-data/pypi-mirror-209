# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class InvoicesPaymentsRelatedDocumentsSat(pydantic.BaseModel):
    """
    List of all the related deferred invoices affected by the payment.
    """

    invoice_identification: typing.Optional[str] = pydantic.Field(
        description=("The fiscal institution's unique ID for the related deferred invoice.\n")
    )
    currency: typing.Optional[str] = pydantic.Field(
        description=(
            "The currency of the related invoice. For example:\n"
            "\n"
            "- ðŸ‡§ðŸ‡· BRL (Brazilian Real)\n"
            "- ðŸ‡¨ðŸ‡´ COP (Colombian Peso)\n"
            "- ðŸ‡²ðŸ‡½ MXN (Mexican Peso)\n"
            "\n"
            "  Please note that other currencies other than in the list above may be returned.\n"
        )
    )
    payment_method: typing.Optional[str] = pydantic.Field(description=("The payment method of the related invoice.\n"))
    partiality_number: typing.Optional[int] = pydantic.Field(description=("The payment installment number.\n"))
    previous_balance: typing.Optional[float] = pydantic.Field(description=("The invoice amount before the payment.\n"))
    amount_paid: typing.Optional[float] = pydantic.Field(description=("The amount paid in this installment.\n"))
    outstanding_balance: typing.Optional[float] = pydantic.Field(description=("The amount remaining to be paid.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
