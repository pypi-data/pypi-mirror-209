# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .create_payment_link_ofpi_amount import CreatePaymentLinkOfpiAmount
from .enum_payment_link_allowed_payment_method import EnumPaymentLinkAllowedPaymentMethod
from .enum_payment_link_provider import EnumPaymentLinkProvider
from .payment_link_callback_urls import PaymentLinkCallbackUrls
from .payment_method_details_ofpi import PaymentMethodDetailsOfpi


class CreatePaymentLinkOfpi(pydantic.BaseModel):
    amount: CreatePaymentLinkOfpiAmount = pydantic.Field(
        description=(
            "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a `.` period. For example: `1234.12`\n"
            "\n"
            "**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `1234.12`.\n"
        )
    )
    customer: str = pydantic.Field(description=("Belvo's unique ID to reference the customer.\n"))
    description: str = pydantic.Field(description=("The description of the payment.\n"))
    allowed_payment_method_types: typing.List[EnumPaymentLinkAllowedPaymentMethod] = pydantic.Field(
        description=(
            "A list of payment method types allowed in this payment intent. For OFPI, this value must be set to `open_finance`.\n"
        )
    )
    provider: EnumPaymentLinkProvider
    payment_method_details: PaymentMethodDetailsOfpi
    callback_urls: typing.Optional[PaymentLinkCallbackUrls]
    expires_in: typing.Optional[str] = pydantic.Field(
        description=(
            "The payment link expiration time. It allows the following formats to be sent through:\n"
            "\n"
            "  - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.\n"
            "  - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.\n"
            "  - whole number + `d` for x amount of days. For example: `30d` for 30 days.\n"
            "\n"
            "  ℹ️ The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
