# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class EquityStatementBusiness(pydantic.BaseModel):
    """
    Object containing the general fiscal situation of the taxpayer.
    """

    cash_and_cash_equivalents: float = pydantic.Field(
        description=(
            "Total cash (or cash equivalents) that the business currently holds at the end of the fiscal year.\n"
        )
    )
    investments_and_derivative_financial_instruments: float = pydantic.Field(
        description=("Total value of all investments, stocks, or similar, that the company has.\n")
    )
    accounts_documents_and_finance_leases_receivable: float = pydantic.Field(
        description=(
            "Total of all payments the company expects to receive (for example, from partial invoices that have not been paid yet).\n"
        )
    )
    inventory: float = pydantic.Field(description=("Total financial value of the company's sellable inventory.\n"))
    property_plant_and_equipment_investment_properties: float = pydantic.Field(
        description=("Total value of real estate, plant infrastructure, or equipment that has been purchased.\n")
    )
    total_gross_equity: float = pydantic.Field(description=("Total gross equity.\n"))
    debts: float = pydantic.Field(description=("Total debts that the company currently has.\n"))
    total_net_equity: float = pydantic.Field(
        description=("The total net equity of the company (`total_gross_equity` - `debts`).\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
