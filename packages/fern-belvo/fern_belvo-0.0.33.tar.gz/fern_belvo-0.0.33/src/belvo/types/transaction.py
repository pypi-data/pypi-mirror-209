# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .account import Account
from .enum_transaction_category import EnumTransactionCategory
from .enum_transaction_status import EnumTransactionStatus
from .enum_transaction_subcategory import EnumTransactionSubcategory
from .enum_transaction_type import EnumTransactionType
from .transaction_credit_card_data import TransactionCreditCardData
from .transaction_merchant_data import TransactionMerchantData


class Transaction(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID for the transaction.\n"))
    internal_identification: typing.Optional[str] = pydantic.Field(
        description=("The institution's internal identification for the transaction.\n")
    )
    account: Account
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    value_date: typing.Optional[str] = pydantic.Field(
        description=("The date when the transaction occurred, in `YYYY-MM-DD` format.\n")
    )
    accounting_date: typing.Optional[str] = pydantic.Field(
        description=("The ISO timestamp when the transaction was processed and accounted for by the institution.\n")
    )
    amount: typing.Optional[float] = pydantic.Field(
        description=(
            "The transaction amount.\n"
            "ℹ️ The amount displayed is always positive as we indicate the direction of the transaction in the `type` parameter.\n"
        )
    )
    balance: typing.Optional[float] = pydantic.Field(description=("The balance at the end of the transaction.\n"))
    currency: typing.Optional[str] = pydantic.Field(description=("The three-letter currency code (ISO-4217).\n"))
    description: typing.Optional[str] = pydantic.Field(
        description=(
            "The description of transaction provided by the institution. Usually this is the text that the end user sees in the online platform.\n"
        )
    )
    observations: typing.Optional[str] = pydantic.Field(
        description=("Additional observations provided by the institution on the transaction.\n")
    )
    merchant: TransactionMerchantData
    category: EnumTransactionCategory
    subcategory: typing.Optional[EnumTransactionSubcategory]
    reference: typing.Optional[str] = pydantic.Field(
        description=("The reference number of the transaction, provided by the bank.\n")
    )
    type: EnumTransactionType
    status: EnumTransactionStatus
    credit_card_data: typing.Optional[TransactionCreditCardData]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
