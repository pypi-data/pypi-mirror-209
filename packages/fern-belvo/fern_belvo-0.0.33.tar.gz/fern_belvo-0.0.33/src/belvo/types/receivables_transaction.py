# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_receivable_transaction_status import EnumReceivableTransactionStatus
from .enum_receivable_transaction_type import EnumReceivableTransactionType
from .receivables_transaction_account import ReceivablesTransactionAccount
from .receivables_transaction_number_of_installments import ReceivablesTransactionNumberOfInstallments
from .recevables_transaction_fees import RecevablesTransactionFees


class ReceivablesTransaction(pydantic.BaseModel):
    id: str = pydantic.Field(description=("Belvo's unique ID for the current receivable transaction.\n"))
    account: ReceivablesTransactionAccount
    created_at: str = pydantic.Field(
        description=("The ISO timestamp of when the data point was last updated in Belvo's database.\n")
    )
    collected_at: str = pydantic.Field(description=("The ISO timestamp when the data point was collected.\n"))
    value_hour: str = pydantic.Field(
        description=("The time that the transaction occurred, according to the institution, in `HH:MM` format.\n")
    )
    value_date: str = pydantic.Field(
        description=("The date that the transactions occurred, according to the institution, in `YYYY-MM-DD` format.\n")
    )
    institution_transaction_id: str = pydantic.Field(
        description=(
            "Internal identification number that the acquirer uses to identify the transaction.\n"
            "ℹ️ **Note**: For Brazil, this number is the NSU.\n"
        )
    )
    currency: str = pydantic.Field(
        description=(
            "The currency of the transaction. For example:\n"
            "- 🇧🇷 BRL (Brazilian Real)\n"
            "- 🇨🇴 COP (Colombian Peso)\n"
            "- 🇲🇽 MXN (Mexican Peso)\n"
            "\n"
            " Please note that currencies other than those listed above may be returned.\n"
        )
    )
    type: EnumReceivableTransactionType
    gross_amount: typing.Optional[float] = pydantic.Field(description=("The total gross amount of the transaction.\n"))
    net_amount: typing.Optional[float] = pydantic.Field(description=("The net amount of the transaction.\n"))
    fees: typing.List[RecevablesTransactionFees]
    status: EnumReceivableTransactionStatus
    number_of_installments: ReceivablesTransactionNumberOfInstallments

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
