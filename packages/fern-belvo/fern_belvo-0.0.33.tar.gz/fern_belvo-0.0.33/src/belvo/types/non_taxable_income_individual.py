# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class NonTaxableIncomeIndividual(pydantic.BaseModel):
    """
    Object containing the declared non-taxable income of the tax payer.
    """

    earned_income: float = pydantic.Field(description=("Income received from employment.\n"))
    fee_based_income: float = pydantic.Field(
        description=(
            "Income received from emitted invoices (for example, income independent contractors or freelancers receive).\n"
        )
    )
    capital_income: float = pydantic.Field(
        description=("Income received from an investment (such as dividends or from renting a property).\n")
    )
    non_labor_income: float = pydantic.Field(
        description=(
            "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
