# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class PaymentIntentPaymentMethodDetailsBodyPse(pydantic.BaseModel):
    """
    Details about the payment method type selected.
    """

    payer_institution: typing.Optional[str] = pydantic.Field(
        description=("Belvo's unique identifier for the payer’s institution.\n")
    )
    payer_bank_account: typing.Optional[str] = pydantic.Field(
        description=("Belvo's unique ID used to identify the customer’s bank account.\n")
    )
    beneficiary_bank_account: str = pydantic.Field(
        description=("Belvo's unique ID used to identify the beneficiary’s bank account.\n")
    )
    username: typing.Optional[str] = pydantic.Field(
        description=("The username used to log in to the institution. This value is obfuscated.\n")
    )
    password: typing.Optional[str] = pydantic.Field(
        description=("The password used to log in to the institution. This value is obfuscated.\n")
    )
    callback_url: str = pydantic.Field(
        description=(
            "The callback URL that your user will be redirected to after confirming the payment in their banking application.\n"
        )
    )
    belvo_flow: bool = pydantic.Field(
        description=(
            "This parameter determines the payment flow of the payment intent. By default, this is set to `true` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to `false`, the payment intent process uses institutions not integrated into Belvo's flow.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
