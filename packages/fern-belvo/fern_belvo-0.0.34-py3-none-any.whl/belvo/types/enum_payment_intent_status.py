# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EnumPaymentIntentStatus(str, enum.Enum):
    """
    The current status of the payment intent.
    """

    REQUIRES_PAYMENT_METHOD = "REQUIRES_PAYMENT_METHOD"
    REQUIRES_ACTION = "REQUIRES_ACTION"
    SUCCEEDED = "SUCCEEDED"
    PROCESSING = "PROCESSING"
    FAILED = "FAILED"

    def visit(
        self,
        requires_payment_method: typing.Callable[[], T_Result],
        requires_action: typing.Callable[[], T_Result],
        succeeded: typing.Callable[[], T_Result],
        processing: typing.Callable[[], T_Result],
        failed: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EnumPaymentIntentStatus.REQUIRES_PAYMENT_METHOD:
            return requires_payment_method()
        if self is EnumPaymentIntentStatus.REQUIRES_ACTION:
            return requires_action()
        if self is EnumPaymentIntentStatus.SUCCEEDED:
            return succeeded()
        if self is EnumPaymentIntentStatus.PROCESSING:
            return processing()
        if self is EnumPaymentIntentStatus.FAILED:
            return failed()
