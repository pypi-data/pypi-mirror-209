# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EnumRecurringExpenseCategory(str, enum.Enum):
    """
    The transaction category for the recurring expense. For more information on the available categories, please see our [Transaction categorization documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).

    - `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)
    - `Bills & Utilities` (electricity, telephone, internet)
    - `Credits & Loans` (credit card cash advances, student loan, watercraft lease)
    - `Insurance` (home, car, and health & life insurance)
    - `Transport & Travel` (Uber trip, airbnb, parking)
    - `Taxes` (service fee, donation, court taxes)
    """

    BILLS_UTILITIES = "Bills & Utilities"
    CREDITS_LOANS = "Credits & Loans"
    INSURANCE = "Insurance"
    ONLINE_PLATFORMS_LEISURE = "Online Platforms & Leisure"
    TRANSPORT_TRAVEL = "Transport & Travel"
    TAXES = "Taxes"

    def visit(
        self,
        bills_utilities: typing.Callable[[], T_Result],
        credits_loans: typing.Callable[[], T_Result],
        insurance: typing.Callable[[], T_Result],
        online_platforms_leisure: typing.Callable[[], T_Result],
        transport_travel: typing.Callable[[], T_Result],
        taxes: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EnumRecurringExpenseCategory.BILLS_UTILITIES:
            return bills_utilities()
        if self is EnumRecurringExpenseCategory.CREDITS_LOANS:
            return credits_loans()
        if self is EnumRecurringExpenseCategory.INSURANCE:
            return insurance()
        if self is EnumRecurringExpenseCategory.ONLINE_PLATFORMS_LEISURE:
            return online_platforms_leisure()
        if self is EnumRecurringExpenseCategory.TRANSPORT_TRAVEL:
            return transport_travel()
        if self is EnumRecurringExpenseCategory.TAXES:
            return taxes()
