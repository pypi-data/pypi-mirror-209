# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_tax_compliance_status_outcome import EnumTaxComplianceStatusOutcome


class TaxComplianceStatus(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description=("Unique identifier created by Belvo used to reference the current Tax Compliance Status.\n")
    )
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    internal_identification: typing.Optional[str] = pydantic.Field(
        description=("The institutionâ€™s internal identification number for the document.\n")
    )
    pdf: typing.Optional[str] = pydantic.Field(description=("Tax compliance status PDF as a binary.\n"))
    rfc: typing.Optional[str] = pydantic.Field(
        description=("The account holder's RFC (Registro Federal de Contribuyentes) number.\n")
    )
    outcome: typing.Optional[EnumTaxComplianceStatusOutcome]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
