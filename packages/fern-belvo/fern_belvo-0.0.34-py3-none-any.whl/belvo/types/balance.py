# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .account import Account


class Balance(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(description=("Belvo's unique ID for the balance request.\n"))
    account: typing.Optional[Account]
    value_date: typing.Optional[str] = pydantic.Field(
        description=("The date when the `balance` was available, in `YYYY-MM-DD` format.\n")
    )
    balance: typing.Optional[float] = pydantic.Field(
        description=("The funds available in the account by the end of the `value_date`.\n")
    )
    current_balance: typing.Optional[float] = pydantic.Field(
        description=("*This field has been deprecated. Please use the `balance` field instead.*\n")
    )
    statement: typing.Optional[str] = pydantic.Field(
        description=(
            "*This field has been deprecated.*\n"
            "\n"
            "*The ID of the banking statement used to extract the `balance`.*\n"
        )
    )
    collected_at: typing.Optional[str] = pydantic.Field(
        description=(
            "This field has been deprecated.\n" "\n" "The ISO-8601 timestamp when the data point was collected.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
