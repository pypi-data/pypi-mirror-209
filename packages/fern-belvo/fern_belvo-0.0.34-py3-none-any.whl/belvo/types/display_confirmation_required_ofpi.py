# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .beneficiary_bank_account_ofpi import BeneficiaryBankAccountOfpi
from .payment_institution import PaymentInstitution


class DisplayConfirmationRequiredOfpi(pydantic.BaseModel):
    """
    Object detailing the next steps you should follow for a specific `next_step` type.
    """

    beneficiary_bank_account: typing.Optional[BeneficiaryBankAccountOfpi]
    payer_name: typing.Optional[str] = pydantic.Field(description=("The name of the payer.\n"))
    payer_identifier: typing.Optional[str] = pydantic.Field(description=("The payer's ID.\n"))
    payer_institution: typing.Optional[PaymentInstitution]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
