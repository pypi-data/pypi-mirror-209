# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class AnnualCostsAndDeductionsStatementBusiness(pydantic.BaseModel):
    """
    Object containing the reported annual costs and applicable deductions.
    """

    costs: float = pydantic.Field(description=("Total costs for the company to operate.\n"))
    administration_expenses: float = pydantic.Field(
        description=("Total costs of the company related to training, company offsites, or similar.\n")
    )
    distribution_and_sales_expenses: float = pydantic.Field(
        description=("Total costs the company incurred in order to distribute or sell their product.\n")
    )
    financial_expenses: float = pydantic.Field(
        description=("Total value of any fees incurred by the company to operate (such as bank fees).\n")
    )
    total_costs_and_deductible_expenses: float = pydantic.Field(
        description=("Total value of all costs and dedictible expenses.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
