# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_employment_record_status import EnumEmploymentRecordStatus


class EmploymentRecordEntitlement(pydantic.BaseModel):
    """
    Details regarding the benefits the individual is entitled to.
    """

    entitled_to_health_insurance: typing.Optional[bool] = pydantic.Field(
        description=("Indicated whether or not the individual is entitled to health insurance.\n")
    )
    entitled_to_company_benefits: typing.Optional[bool] = pydantic.Field(
        description=("Indicates whether or not the individual is entitled to company benefits.\n")
    )
    valid_until: typing.Optional[str] = pydantic.Field(
        description=(
            "Date until when the individual is covered by health insurance and/or company benefits. If `null` the employee is currently working and no end date is required.\n"
        )
    )
    status: typing.Optional[EnumEmploymentRecordStatus]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
