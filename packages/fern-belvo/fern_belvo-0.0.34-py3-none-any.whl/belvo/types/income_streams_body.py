# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_income_stream_confidence import EnumIncomeStreamConfidence
from .enum_income_stream_frequency import EnumIncomeStreamFrequency
from .enum_income_stream_type import EnumIncomeStreamType


class IncomeStreamsBody(pydantic.BaseModel):
    """
    A list of income streams for the account.

    For each income stream, we provide additional insights such as:
    - Frequency, stability, and confidence level of the income transactions.
    - Key metrics about the transaction amounts.
    ℹ️ If no income sources are found, we return an empty array.
    """

    account_id: str = pydantic.Field(
        description=("Unique ID for the bank account to be verified for income streams.\n")
    )
    income_type: EnumIncomeStreamType
    frequency: EnumIncomeStreamFrequency
    monthly_average: float = pydantic.Field(
        description=("The average amount of income received from the source over `lookback_periods`.\n")
    )
    average_income_amount: float = pydantic.Field(
        description=("The average income transaction amount from the source.\n")
    )
    last_income_amount: float = pydantic.Field(
        description=("The amount of the most recent income received from the source.\n")
    )
    currency: str = pydantic.Field(
        description=(
            "The three-letter currency code of the income. For example:\n"
            "\n"
            "  • 🇧🇷 BRL (Brazilian Real)\n"
            "  • 🇨🇴 COP (Colombian Peso)\n"
            "  • 🇲🇽 MXN (Mexican Peso)\n"
        )
    )
    last_income_description: typing.Any
    last_income_date: str = pydantic.Field(
        description=("The date when the most recent income from the stream was received, in `YYYY-MM-DD` format.\n")
    )
    stability: typing.Optional[float] = pydantic.Field(
        description=(
            "The stability of the income based on its amount, with a range from 0 to 1, where 1 represents perfect stability.\n"
            "\n"
            "**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n"
        )
    )
    regularity: typing.Optional[float] = pydantic.Field(
        description=(
            "The regularity of the income basde in its frequency, with a range from 0 to 1, where 1 represents perfect regularity.\n"
            "\n"
            "**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n"
        )
    )
    trend: typing.Optional[float] = pydantic.Field(
        description=(
            "The income trend during a period of time calculated between last income and first income received, where:\n"
            "  - a negative float means that the income trend is decreasing during the time period.\n"
            "  - a positive float means that the income trend is increasing during the time period.\n"
            "\n"
            "**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n"
        )
    )
    lookback_periods: int = pydantic.Field(
        description=(
            "Number of period units (based on *rolling months*) used to generate insights and calculations.\n"
            "\n"
            "**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n"
        )
    )
    full_periods: int = pydantic.Field(
        description=(
            "Number of period units (based on *rolling months*) with data to perform calculations.\n"
            "\n"
            "**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n"
        )
    )
    periods_with_income: int = pydantic.Field(
        description=(
            "Number of period units (based on *rolling months*) with at least one income available.\n"
            "\n"
            "**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n"
        )
    )
    number_of_incomes: int = pydantic.Field(
        description=("Number of income transactions over the `lookback_periods`.\n")
    )
    confidence: EnumIncomeStreamConfidence

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
