# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TaxReturnBusiness(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(
        description=("Unique identifier created by Belvo used to reference the current Tax Return.\n")
    )
    collected_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp when the data point was collected.\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(
        description=("The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n")
    )
    informacion_general: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=(
            "General information regarding the tax return (year, RFC, return type, person/company name, and so on).\n"
        )
    )
    datos_adicionales: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Additional data regarding the tax return.\n")
    )
    estado_resultados: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Detailed information about the legal entity's yearly profit and loss.\n")
    )
    estado_posicion_financiera_balance: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding balance sheet of the legal entity.\n")
    )
    conciliacion_entre_resultado_contable_fiscal: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding the accounting reconciliation.\n")
    )
    deducciones_autorizadas: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding the legal entity's deductions.\n")
    )
    cifras_cierre_ejercicio: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding key numbers at the end of the fiscal exercise.\n")
    )
    determinacion_del_impuesto_sobre_la_renta: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding the final tax return.\n")
    )
    dividendos_o_utilidades_distribuidos: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=("Details regarding distributed dividends.\n")
    )
    detalle_pago_r_1_isr_personas_morales: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="detalle_pago_r1_isr_personas_morales", description=("Details of the tax payment.\n")
    )
    pdf: typing.Optional[str] = pydantic.Field(description=("Tax return PDF as a binary.\n"))
    receipt_pdf: typing.Optional[str] = pydantic.Field(
        description=(
            "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
