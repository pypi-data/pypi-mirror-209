# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .enum_institution_integration_type import EnumInstitutionIntegrationType
from .enum_institution_status import EnumInstitutionStatus
from .enum_institution_type import EnumInstitutionType
from .institutions_feature import InstitutionsFeature
from .institutions_form_field import InstitutionsFormField


class Institution(pydantic.BaseModel):
    id: typing.Optional[int] = pydantic.Field(description=("The ID of the institution as designated by Belvo.\n"))
    name: typing.Optional[str] = pydantic.Field(
        description=(
            "The name of the institution, as designated by Belvo.\n"
            "Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.\n"
        )
    )
    type: typing.Optional[EnumInstitutionType]
    website: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's website.\n"))
    display_name: typing.Optional[str] = pydantic.Field(description=("The customer-facing name of the institution.\n"))
    country_codes: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "The country codes where the institution is available, for example:\n"
            "- ðŸ‡§ðŸ‡· BR (Brazil)\n"
            "- ðŸ‡¨ðŸ‡´ CO (Colombia)\n"
            "- ðŸ‡²ðŸ‡½ MX (Mexico)\n"
        )
    )
    primary_color: typing.Optional[str] = pydantic.Field(
        description=("The primary color on the institution's website.\n")
    )
    logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's logo.\n"))
    icon_logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's icon logo.\n"))
    text_logo: typing.Optional[str] = pydantic.Field(description=("The URL of the institution's text logo.\n"))
    form_fields: typing.Optional[typing.List[InstitutionsFormField]]
    features: typing.Optional[typing.List[InstitutionsFeature]] = pydantic.Field(
        description=(
            "The features that the institution supports. If the institution has no special features, then Belvo returns an empty array.\n"
            "\n"
            "Here is a list of the available features:\n"
            "- `token_required` indicates that the institution may require a token during link creation or when making any other requests.\n"
        )
    )
    resources: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "A list of Belvo resources that you can use with the institution. This list includes one or more of the following resources:\n"
            "\n"
            "  - `ACCOUNTS`\n"
            "  - `BALANCES`\n"
            "  - `INCOMES`\n"
            "  - `INVESTMENTS_PORTFOLIOS`\n"
            "  - `INVESTMENTS_TRANSACTIONS` *This field has been deprecated.*\n"
            "  - `INVOICES`\n"
            "  - `OWNERS`\n"
            "  - `RECURRING_EXPENSES`\n"
            "  - `RISK_INSIGHTS`\n"
            "  - `TRANSACTIONS`\n"
            "  - `TAX_COMPLIANCE_STATUS`\n"
            "  - `TAX_STATUS`\n"
            "  - `TAX_RETURNS`\n"
        )
    )
    integration_type: typing.Optional[EnumInstitutionIntegrationType]
    status: typing.Optional[EnumInstitutionStatus]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
