=====
Usage
=====

Resources
---------
You can create a resource for import/export with celery just like in
the original package. Just use ``CeleryResource`` or ``CeleryModelResource``::

    from import_export_extensions.resources import CeleryModelResource


    class BandResource(CeleryModelResource):
        """Resource for model `Band`."""

        class Meta:
            model = Band
            fields = [
                "id",
                "name",
            ]

You can also explicitly set fields and widgets to configure resource as
you need::

    from import_export_extensions.fields import IntermediateManyToManyField
    from import_export_extensions.resources import CeleryModelResource
    from import_export_extensions.widgets import IntermediateManyToManyWidget


    class BandResource(CeleryModelResource):
        """Resource for model `Band`."""

        users = IntermediateManyToManyField(
            attribute="users",
            column_name="Related users",
            widget=IntermediateManyToManyWidget(
                rem_model=User,
                rem_field="name",
                instance_separator=";",
            ),
        )

        class Meta:
            model = Band
            fields = [
                "id",
                "name",
                "users",
            ]


Admin models
------------
To import/export using celery via Django Admin, use ``CeleryImportExportMixin``
for your admin model and set ``resource_class`` class attribute::

    from import_export_extensions.admin import CeleryImportExportMixin


    @admin.register(Band)
    class BandAdmin(CeleryImportExportMixin, admin.ModelAdmin):
        """Admin for `Band` model with import export functionality."""
        list_display = (
            "name",
            "users",
        )
        resource_class = BandResource


Import/Export API
-----------------

Import ``api.views.ExportJobViewSet`` and ``api.views.ImportJobViewSet``
to create appropriate viewsets for the resource::

    from import_export_extensions.api import views


    class BandExportViewSet(views.ExportJobViewSet):
        """Simple ViewSet for exporting `Band` model."""
        resource_class = BandResource


    class BandImportViewSet(views.ImportJobViewSet):
        """Simple ViewSet for importing `Band` model."""
        resource_class = BandResource

These viewsets provide endpoints to manage ImportJob/ExportJob objects.
You can create import/export job via ``start`` action, then check progress via
``details``. Set ``filter_class`` to resource to filter queryset and export
required objects.

If you have configured ``drf_spectacular``, you'll see that autogenerated
schemes provided correctly.


Fields
------

If you need to import/export objects that contain ``ManyToManyField`` with
an intermediate model (with ``through``), use ``IntermediateManyToManyField``::

    class ArtistResourceWithM2M(CeleryModelResource):
        """Artist resource with Many2Many field."""
        bands = IntermediateManyToManyField(
            attribute="bands",
            column_name="Bands he played in",
            widget=IntermediateManyToManyWidget(
                rem_model=Band,
                rem_field="title",
                extra_fields=["date_joined"],
                instance_separator=";",
            ),
        )

        class Meta:
            model = Artist
            fields = ["id", "name", "bands", "instrument"]
