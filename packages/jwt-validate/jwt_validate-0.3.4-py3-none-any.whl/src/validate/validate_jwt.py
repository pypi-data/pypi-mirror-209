from functools import wraps
from http import HTTPStatus

import jwt
from fastapi import (
    Depends,
    HTTPException,
)
from fastapi.security import (
    HTTPAuthorizationCredentials,
    HTTPBearer,
)
from jwt.exceptions import (
    DecodeError,
    ExpiredSignatureError,
)

from src.config import settings

security = HTTPBearer()
jwks = jwt.PyJWKClient(settings.IDPA_URL)


def validate_jwt(token: str, required_scopes: list) -> dict:
    """The method that receives a JWT token generated by IDMAGALU and its scope

    Parameters:
        token (str): A JWT token generated from the RS256 algorithm is expected as a parameter.
        required_scopes (list): As a parameter, the scope of the action for which the JWT token was authorized is expected.
    Returns:
        dict: Checked the signature on the JWT token and return its claims.
    Raises:
        ExpiredSignatureError: Signature has expired
        DecodeError: Invalid token
        HTTPException: Insufficient permissions, missing scope "{scope}"


    Examples:
        >>> from src.generate.generate_jwt import generate_jwt
        >>> token = generate_jwt()['token']
        >>> validate_jwt(token=token,required_scopes=['block-storage.read']) # doctest: +ELLIPSIS
        {'iss': '...', 'iat': ..., 'jti': '...', 'aud': '...', 'scope': '...', 'pid': '...', 'tenant': '...', 'email': '...', 'sub': '...', 'exp': ...}
    """
    try:
        signing_key = jwks.get_signing_key_from_jwt(token)
        decoded_token = jwt.decode(
            token,
            signing_key.key,
            algorithms=['RS256'],
            audience='public',
        )
        if 'scope' not in decoded_token:
            raise HTTPException(
                status_code=HTTPStatus.BAD_REQUEST,
                detail='Invalid token, missing "scope" field',
            )
        token_scopes = decoded_token['scope'].split()
        for scope in required_scopes:
            if scope not in token_scopes:
                raise HTTPException(
                    status_code=HTTPStatus.UNAUTHORIZED,
                    detail=f'Insufficient permissions, missing scope "{scope}"',
                )
        return decoded_token
    except ExpiredSignatureError:
        raise HTTPException(
            status_code=HTTPStatus.UNAUTHORIZED,
            detail='Invalid token signature',
        )
    except DecodeError:
        raise HTTPException(
            status_code=HTTPStatus.BAD_REQUEST, detail='Invalid token'
        )


def validate_jwt_scopes(required_scopes: list = []):
    def decorator(func):
        @wraps(func)
        async def wrapper(
            credentials: HTTPAuthorizationCredentials = Depends(security),
            *args,
            **kwargs,
        ):
            validate_jwt(
                token=credentials.credentials, required_scopes=required_scopes
            )
            return await func(*args, **kwargs)

        return wrapper

    return decorator
