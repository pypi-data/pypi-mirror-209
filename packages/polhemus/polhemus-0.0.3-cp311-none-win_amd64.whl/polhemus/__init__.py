# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import sys
if not(hasattr(sys,"frozen")):
    if sys.platform == 'win32':
        import site, os
        trk_path = site.getsitepackages()[1]+"\\polhemus"
        os.environ["PATH"] += os.pathsep + trk_path 
        sys.path.append(trk_path)
        os.environ["PATH"] += os.pathsep + os.path.dirname(__file__)
        
from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _polhemus
else:
    import _polhemus

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class polhemus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PositionTooltipX1 = property(_polhemus.polhemus_PositionTooltipX1_get, _polhemus.polhemus_PositionTooltipX1_set)
    PositionTooltipY1 = property(_polhemus.polhemus_PositionTooltipY1_get, _polhemus.polhemus_PositionTooltipY1_set)
    PositionTooltipZ1 = property(_polhemus.polhemus_PositionTooltipZ1_get, _polhemus.polhemus_PositionTooltipZ1_set)
    AngleX1 = property(_polhemus.polhemus_AngleX1_get, _polhemus.polhemus_AngleX1_set)
    AngleY1 = property(_polhemus.polhemus_AngleY1_get, _polhemus.polhemus_AngleY1_set)
    AngleZ1 = property(_polhemus.polhemus_AngleZ1_get, _polhemus.polhemus_AngleZ1_set)
    PositionTooltipX2 = property(_polhemus.polhemus_PositionTooltipX2_get, _polhemus.polhemus_PositionTooltipX2_set)
    PositionTooltipY2 = property(_polhemus.polhemus_PositionTooltipY2_get, _polhemus.polhemus_PositionTooltipY2_set)
    PositionTooltipZ2 = property(_polhemus.polhemus_PositionTooltipZ2_get, _polhemus.polhemus_PositionTooltipZ2_set)
    AngleX2 = property(_polhemus.polhemus_AngleX2_get, _polhemus.polhemus_AngleX2_set)
    AngleY2 = property(_polhemus.polhemus_AngleY2_get, _polhemus.polhemus_AngleY2_set)
    AngleZ2 = property(_polhemus.polhemus_AngleZ2_get, _polhemus.polhemus_AngleZ2_set)
    StylusButton = property(_polhemus.polhemus_StylusButton_get, _polhemus.polhemus_StylusButton_set)
    Sensor1 = property(_polhemus.polhemus_Sensor1_get, _polhemus.polhemus_Sensor1_set)
    Sensor2 = property(_polhemus.polhemus_Sensor2_get, _polhemus.polhemus_Sensor2_set)

    def Initialize(self):
        return _polhemus.polhemus_Initialize(self)

    def Close(self):
        return _polhemus.polhemus_Close(self)

    def Run(self):
        return _polhemus.polhemus_Run(self)

    def __init__(self):
        _polhemus.polhemus_swiginit(self, _polhemus.new_polhemus())
    __swig_destroy__ = _polhemus.delete_polhemus

# Register polhemus in _polhemus:
_polhemus.polhemus_swigregister(polhemus)


def new_intp():
    return _polhemus.new_intp()

def copy_intp(value):
    return _polhemus.copy_intp(value)

def delete_intp(obj):
    return _polhemus.delete_intp(obj)

def intp_assign(obj, value):
    return _polhemus.intp_assign(obj, value)

def intp_value(obj):
    return _polhemus.intp_value(obj)

def new_floatp():
    return _polhemus.new_floatp()

def copy_floatp(value):
    return _polhemus.copy_floatp(value)

def delete_floatp(obj):
    return _polhemus.delete_floatp(obj)

def floatp_assign(obj, value):
    return _polhemus.floatp_assign(obj, value)

def floatp_value(obj):
    return _polhemus.floatp_value(obj)

def new_doublep():
    return _polhemus.new_doublep()

def copy_doublep(value):
    return _polhemus.copy_doublep(value)

def delete_doublep(obj):
    return _polhemus.delete_doublep(obj)

def doublep_assign(obj, value):
    return _polhemus.doublep_assign(obj, value)

def doublep_value(obj):
    return _polhemus.doublep_value(obj)

def new_boolp():
    return _polhemus.new_boolp()

def copy_boolp(value):
    return _polhemus.copy_boolp(value)

def delete_boolp(obj):
    return _polhemus.delete_boolp(obj)

def boolp_assign(obj, value):
    return _polhemus.boolp_assign(obj, value)

def boolp_value(obj):
    return _polhemus.boolp_value(obj)


