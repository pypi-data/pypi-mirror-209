"""
    dev2 api schema

    'dev2.baidu.com' api schema  # noqa: E501

Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from baiduads.api_client import ApiClient, Endpoint as _Endpoint
from baiduads.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from baiduads.ocpc.model.add_target_package_request_wrapper import AddTargetPackageRequestWrapper
from baiduads.ocpc.model.add_target_package_response_wrapper import AddTargetPackageResponseWrapper
from baiduads.ocpc.model.delete_target_package_request_wrapper import DeleteTargetPackageRequestWrapper
from baiduads.ocpc.model.delete_target_package_response_wrapper import DeleteTargetPackageResponseWrapper
from baiduads.ocpc.model.get_hint_audit_time_request_wrapper import GetHintAuditTimeRequestWrapper
from baiduads.ocpc.model.get_hint_audit_time_response_wrapper import GetHintAuditTimeResponseWrapper
from baiduads.ocpc.model.get_target_package_list_request_wrapper import GetTargetPackageListRequestWrapper
from baiduads.ocpc.model.get_target_package_list_response_wrapper import GetTargetPackageListResponseWrapper
from baiduads.ocpc.model.update_target_package_request_wrapper import UpdateTargetPackageRequestWrapper
from baiduads.ocpc.model.update_target_package_response_wrapper import UpdateTargetPackageResponseWrapper


class OcpcService(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_target_package_endpoint = _Endpoint(
            settings={
                'response_type': (AddTargetPackageResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/OcpcService/addTargetPackage',
                'operation_id': 'add_target_package',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_target_package_request_wrapper',
                ],
                'required': [
                    'add_target_package_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_target_package_request_wrapper':
                        (AddTargetPackageRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_target_package_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_target_package_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteTargetPackageResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/OcpcService/deleteTargetPackage',
                'operation_id': 'delete_target_package',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_target_package_request_wrapper',
                ],
                'required': [
                    'delete_target_package_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_target_package_request_wrapper':
                        (DeleteTargetPackageRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_target_package_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_hint_audit_time_endpoint = _Endpoint(
            settings={
                'response_type': (GetHintAuditTimeResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/OcpcService/getHintAuditTime',
                'operation_id': 'get_hint_audit_time',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_hint_audit_time_request_wrapper',
                ],
                'required': [
                    'get_hint_audit_time_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_hint_audit_time_request_wrapper':
                        (GetHintAuditTimeRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_hint_audit_time_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_target_package_list_endpoint = _Endpoint(
            settings={
                'response_type': (GetTargetPackageListResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/OcpcService/getTargetPackageList',
                'operation_id': 'get_target_package_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_target_package_list_request_wrapper',
                ],
                'required': [
                    'get_target_package_list_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_target_package_list_request_wrapper':
                        (GetTargetPackageListRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_target_package_list_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_target_package_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateTargetPackageResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/OcpcService/updateTargetPackage',
                'operation_id': 'update_target_package',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_target_package_request_wrapper',
                ],
                'required': [
                    'update_target_package_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_target_package_request_wrapper':
                        (UpdateTargetPackageRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_target_package_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_target_package(
        self,
        add_target_package_request_wrapper,
        **kwargs
    ):
        """add_target_package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_target_package(add_target_package_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            add_target_package_request_wrapper (AddTargetPackageRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddTargetPackageResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['add_target_package_request_wrapper'] = \
            add_target_package_request_wrapper
        return self.add_target_package_endpoint.call_with_http_info(**kwargs)

    def delete_target_package(
        self,
        delete_target_package_request_wrapper,
        **kwargs
    ):
        """delete_target_package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_target_package(delete_target_package_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            delete_target_package_request_wrapper (DeleteTargetPackageRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteTargetPackageResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['delete_target_package_request_wrapper'] = \
            delete_target_package_request_wrapper
        return self.delete_target_package_endpoint.call_with_http_info(**kwargs)

    def get_hint_audit_time(
        self,
        get_hint_audit_time_request_wrapper,
        **kwargs
    ):
        """get_hint_audit_time  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hint_audit_time(get_hint_audit_time_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_hint_audit_time_request_wrapper (GetHintAuditTimeRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetHintAuditTimeResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_hint_audit_time_request_wrapper'] = \
            get_hint_audit_time_request_wrapper
        return self.get_hint_audit_time_endpoint.call_with_http_info(**kwargs)

    def get_target_package_list(
        self,
        get_target_package_list_request_wrapper,
        **kwargs
    ):
        """get_target_package_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_target_package_list(get_target_package_list_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_target_package_list_request_wrapper (GetTargetPackageListRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetTargetPackageListResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_target_package_list_request_wrapper'] = \
            get_target_package_list_request_wrapper
        return self.get_target_package_list_endpoint.call_with_http_info(**kwargs)

    def update_target_package(
        self,
        update_target_package_request_wrapper,
        **kwargs
    ):
        """update_target_package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_target_package(update_target_package_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_target_package_request_wrapper (UpdateTargetPackageRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateTargetPackageResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_target_package_request_wrapper'] = \
            update_target_package_request_wrapper
        return self.update_target_package_endpoint.call_with_http_info(**kwargs)

