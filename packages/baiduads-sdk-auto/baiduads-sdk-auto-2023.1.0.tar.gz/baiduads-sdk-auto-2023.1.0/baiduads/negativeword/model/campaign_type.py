"""
    dev2 api schema

    'dev2.baidu.com' api schema  # noqa: E501

Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from baiduads.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from baiduads.exceptions import ApiAttributeError


def lazy_import():
    from baiduads.negativeword.model.adgroup_type import AdgroupType
    from baiduads.negativeword.model.area_price_factor import AreaPriceFactor
    from baiduads.negativeword.model.business_label_type import BusinessLabelType
    from baiduads.negativeword.model.campaign_cost_manager import CampaignCostManager
    from baiduads.negativeword.model.campaign_distance_range_factor import CampaignDistanceRangeFactor
    from baiduads.negativeword.model.campaign_external_flow import CampaignExternalFlow
    from baiduads.negativeword.model.campaign_hct import CampaignHct
    from baiduads.negativeword.model.campaign_region_area import CampaignRegionArea
    from baiduads.negativeword.model.campaign_region_store import CampaignRegionStore
    from baiduads.negativeword.model.distance_price_factor_type import DistancePriceFactorType
    from baiduads.negativeword.model.dynamic_creative_grab_url import DynamicCreativeGrabUrl
    from baiduads.negativeword.model.novel_promotion_page_type import NovelPromotionPageType
    from baiduads.negativeword.model.offline_reason import OfflineReason
    from baiduads.negativeword.model.offline_time_type import OfflineTimeType
    from baiduads.negativeword.model.price_strategy_info import PriceStrategyInfo
    from baiduads.negativeword.model.region_poi_type import RegionPOIType
    from baiduads.negativeword.model.region_price_factor import RegionPriceFactor
    from baiduads.negativeword.model.region_target_district_type import RegionTargetDistrictType
    from baiduads.negativeword.model.schedule_price_factor import SchedulePriceFactor
    from baiduads.negativeword.model.schedule_type import ScheduleType
    from baiduads.negativeword.model.share_repertory_type import ShareRepertoryType
    from baiduads.negativeword.model.store_page_info_type import StorePageInfoType
    globals()['AdgroupType'] = AdgroupType
    globals()['AreaPriceFactor'] = AreaPriceFactor
    globals()['BusinessLabelType'] = BusinessLabelType
    globals()['CampaignCostManager'] = CampaignCostManager
    globals()['CampaignDistanceRangeFactor'] = CampaignDistanceRangeFactor
    globals()['CampaignExternalFlow'] = CampaignExternalFlow
    globals()['CampaignHct'] = CampaignHct
    globals()['CampaignRegionArea'] = CampaignRegionArea
    globals()['CampaignRegionStore'] = CampaignRegionStore
    globals()['DistancePriceFactorType'] = DistancePriceFactorType
    globals()['DynamicCreativeGrabUrl'] = DynamicCreativeGrabUrl
    globals()['NovelPromotionPageType'] = NovelPromotionPageType
    globals()['OfflineReason'] = OfflineReason
    globals()['OfflineTimeType'] = OfflineTimeType
    globals()['PriceStrategyInfo'] = PriceStrategyInfo
    globals()['RegionPOIType'] = RegionPOIType
    globals()['RegionPriceFactor'] = RegionPriceFactor
    globals()['RegionTargetDistrictType'] = RegionTargetDistrictType
    globals()['SchedulePriceFactor'] = SchedulePriceFactor
    globals()['ScheduleType'] = ScheduleType
    globals()['ShareRepertoryType'] = ShareRepertoryType
    globals()['StorePageInfoType'] = StorePageInfoType


class CampaignType(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'user_id': (int,),  # noqa: E501
            'campaign_id': (int,),  # noqa: E501
            'campaign_name': (str,),  # noqa: E501
            'business_point_id': (int,),  # noqa: E501
            'business_point_name': (str,),  # noqa: E501
            'marketing_target_id': (int,),  # noqa: E501
            'target_url': (str,),  # noqa: E501
            'bid_prefer': (int,),  # noqa: E501
            'pause': (bool,),  # noqa: E501
            'budget': (float,),  # noqa: E501
            'region_target': ([int],),  # noqa: E501
            'show_prob': (int,),  # noqa: E501
            'negative_words': ([str],),  # noqa: E501
            'exact_negative_words': ([str],),  # noqa: E501
            'device': (int,),  # noqa: E501
            'price_ratio': (float,),  # noqa: E501
            'ad_type': (int,),  # noqa: E501
            'wregion_ztc': ([int],),  # noqa: E501
            'cpa_price': (float,),  # noqa: E501
            'cpa_type': (str,),  # noqa: E501
            'pc_price_ratio': (float,),  # noqa: E501
            'campaign_auto_bid_status': (int,),  # noqa: E501
            'exclude_ip': ([str],),  # noqa: E501
            'budget_offline_time': ([OfflineTimeType],),  # noqa: E501
            'schedule': ([ScheduleType],),  # noqa: E501
            'internal_type': (int,),  # noqa: E501
            'offline_reasons': ([OfflineReason],),  # noqa: E501
            'status': (int,),  # noqa: E501
            'dyn_creative_exclusion': (str,),  # noqa: E501
            'operator': (str,),  # noqa: E501
            'is_dynamic_creative': (bool,),  # noqa: E501
            'is_dynamic_tag_sublink': (bool,),  # noqa: E501
            'is_dynamic_title': (bool,),  # noqa: E501
            'is_dynamic_hot_redirect': (bool,),  # noqa: E501
            'wregion_poi': ([RegionPOIType],),  # noqa: E501
            'campaign_type': (int,),  # noqa: E501
            'is_delete': (bool,),  # noqa: E501
            'query_region_status': (bool,),  # noqa: E501
            'acct_dynamic_create_status': (bool,),  # noqa: E501
            'dynamic_creative_tool_id': (int,),  # noqa: E501
            'marker': (int,),  # noqa: E501
            'campaign_status1': (int,),  # noqa: E501
            'add_from': (int,),  # noqa: E501
            'schedule_raw': ([[int]],),  # noqa: E501
            'distance_price_status': (bool,),  # noqa: E501
            'dynamic_creative_grab_url': ([DynamicCreativeGrabUrl],),  # noqa: E501
            'schedule_price_factors': ([SchedulePriceFactor],),  # noqa: E501
            're_online_reasons': ([OfflineTimeType],),  # noqa: E501
            'region_price_factor': ([RegionPriceFactor],),  # noqa: E501
            'distance_price_factor': ([DistancePriceFactorType],),  # noqa: E501
            'area_price_factor': ([AreaPriceFactor],),  # noqa: E501
            'distance_range_factor': ([CampaignDistanceRangeFactor],),  # noqa: E501
            'acct_dynamic_tag_sublink_status': (bool,),  # noqa: E501
            'acct_dynamic_title_status': (bool,),  # noqa: E501
            'acct_dynamic_hot_redirect_status': (bool,),  # noqa: E501
            'campaign_advance_match': (bool,),  # noqa: E501
            'acct_advance_match': (bool,),  # noqa: E501
            'campaign_hct': (CampaignHct,),  # noqa: E501
            'external_flow': ([CampaignExternalFlow],),  # noqa: E501
            'acct_dynamic_title_list': (int,),  # noqa: E501
            'acct_dynamic_title_abstract': (int,),  # noqa: E501
            'same_stage_status': (bool,),  # noqa: E501
            'acct_same_stage_status': (bool,),  # noqa: E501
            'acct_scenarized_status': (bool,),  # noqa: E501
            'campaign_scenarized_phrase_status': (bool,),  # noqa: E501
            'pr_realtime_browse_status': (bool,),  # noqa: E501
            'pr_peoples_attribute_status': (bool,),  # noqa: E501
            'pr_statistics_param_status': (bool,),  # noqa: E501
            'region_target_district': ([RegionTargetDistrictType],),  # noqa: E501
            'url_param_status': (int,),  # noqa: E501
            'budget_cumulate_status': (bool,),  # noqa: E501
            'acct_budget_cumulate_status': (bool,),  # noqa: E501
            'customer_budget_mod_time': (str,),  # noqa: E501
            'auto_targeting_status': (bool,),  # noqa: E501
            'auto_targeting_price': (float,),  # noqa: E501
            'auto_targeting_budget': (int,),  # noqa: E501
            'pr_search_intention_status': (bool,),  # noqa: E501
            'dsa_param_status': (bool,),  # noqa: E501
            'campaign_cost_manager': (CampaignCostManager,),  # noqa: E501
            'campaign_dynamic_creative_link_status': (bool,),  # noqa: E501
            'campaign_dynamic_creative_title_status': (bool,),  # noqa: E501
            'campaign_dynamic_creative_hot_redirect_status': (bool,),  # noqa: E501
            'campaign_content_redirect_status': (bool,),  # noqa: E501
            'campaign_pic_text_status': (bool,),  # noqa: E501
            'campaign_knowledge_status': (bool,),  # noqa: E501
            'campaign_single_pic_status': (bool,),  # noqa: E501
            'campaign_extend_title_status': (bool,),  # noqa: E501
            'acct_dynamic_creative_link_status': (bool,),  # noqa: E501
            'acct_dynamic_creative_title_status': (bool,),  # noqa: E501
            'acct_dynamic_creative_hot_redirect_status': (bool,),  # noqa: E501
            'acct_content_redirect_status': (bool,),  # noqa: E501
            'acct_pic_text_status': (bool,),  # noqa: E501
            'acct_knowledge_status': (bool,),  # noqa: E501
            'acct_single_pic_status': (bool,),  # noqa: E501
            'acct_extend_title_status': (bool,),  # noqa: E501
            'feed_param_status': (bool,),  # noqa: E501
            'feed_flow_strategy': (int,),  # noqa: E501
            'feed_flow_price_ratio': (float,),  # noqa: E501
            'acct_feed_flow_price_ratio': (float,),  # noqa: E501
            'acct_feed_flow_price_strategy': (int,),  # noqa: E501
            'jingxiu_two_sublink_factor': (float,),  # noqa: E501
            'night_time_switch_status': (bool,),  # noqa: E501
            'crowd_auto_chosen': ([int],),  # noqa: E501
            'creative_title_replace_status': (bool,),  # noqa: E501
            'auto_tatget_flow_status': (int,),  # noqa: E501
            'campaign_status2': (int,),  # noqa: E501
            'system_word_status': (bool,),  # noqa: E501
            'schedule_template_name': (str,),  # noqa: E501
            'schedule_template_id': (int,),  # noqa: E501
            'negative_word_packets': ([ShareRepertoryType],),  # noqa: E501
            'negative_word_packet_ids': ([int],),  # noqa: E501
            'indepdent_negative_words': ([str],),  # noqa: E501
            'indepdent_exact_negative_words': ([str],),  # noqa: E501
            'medical_url_status': (bool,),  # noqa: E501
            'indent_negative_packet_words': ([str],),  # noqa: E501
            'indent_negative_packet_exact_words': ([str],),  # noqa: E501
            'region_restrict_status': (bool,),  # noqa: E501
            'business_point_final_level': (bool,),  # noqa: E501
            'region_type': (int,),  # noqa: E501
            'region_area': ([CampaignRegionArea],),  # noqa: E501
            'region_store': ([CampaignRegionStore],),  # noqa: E501
            'store_plan_wregion': ([int],),  # noqa: E501
            'content_label_status': (bool,),  # noqa: E501
            'store_page_infos': ([StorePageInfoType],),  # noqa: E501
            'business_label_status': (bool,),  # noqa: E501
            'business_label_final_status': (int,),  # noqa: E501
            'business_label_adgroup_ids': ([int],),  # noqa: E501
            'adgroups': ([AdgroupType],),  # noqa: E501
            'adgroups_not_in_use': ([int],),  # noqa: E501
            'shop_type': (int,),  # noqa: E501
            'advice_id': (int,),  # noqa: E501
            'advice_opt_type': (int,),  # noqa: E501
            'smart_main_adgroup_id': (int,),  # noqa: E501
            'business_labels': ([BusinessLabelType],),  # noqa: E501
            'exclude_query_region_status': (bool,),  # noqa: E501
            'campaign_exclude_query_region_status': (bool,),  # noqa: E501
            'price_strategy_id': (int,),  # noqa: E501
            'price_strategy_name': (str,),  # noqa: E501
            'price_strategy_type': (int,),  # noqa: E501
            'campaign_auto_expansion_status': (bool,),  # noqa: E501
            'o_cpc_status': (int,),  # noqa: E501
            'campaign_expansion_status': (int,),  # noqa: E501
            'promotion_page': (NovelPromotionPageType,),  # noqa: E501
            'target_url_suffix': (str,),  # noqa: E501
            'price_strategy_pause': (bool,),  # noqa: E501
            'advice_source': (int,),  # noqa: E501
            'campaign_cascade_status': (int,),  # noqa: E501
            'create_time': (str,),  # noqa: E501
            'equipment_type': (int,),  # noqa: E501
            'campaign_bid_type': (int,),  # noqa: E501
            'campaign_bid': (float,),  # noqa: E501
            'campaign_ocpc_bid_type': (int,),  # noqa: E501
            'campaign_ocpc_bid': (float,),  # noqa: E501
            'campaign_trans_types': ([int],),  # noqa: E501
            'campaign_deep_trans_types': ([int],),  # noqa: E501
            'campaign_cv_sources': ([int],),  # noqa: E501
            'campaign_auto_optimization_status': (bool,),  # noqa: E501
            'price_strategy': (PriceStrategyInfo,),  # noqa: E501
            'campaign_ocpc_strategy_id': (int,),  # noqa: E501
            'os': ([str],),  # noqa: E501
            'smart_region': (bool,),  # noqa: E501
            'dpa_device': (int,),  # noqa: E501
            'ad_source': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'user_id': 'userId',  # noqa: E501
        'campaign_id': 'campaignId',  # noqa: E501
        'campaign_name': 'campaignName',  # noqa: E501
        'business_point_id': 'businessPointId',  # noqa: E501
        'business_point_name': 'businessPointName',  # noqa: E501
        'marketing_target_id': 'marketingTargetId',  # noqa: E501
        'target_url': 'targetUrl',  # noqa: E501
        'bid_prefer': 'bidPrefer',  # noqa: E501
        'pause': 'pause',  # noqa: E501
        'budget': 'budget',  # noqa: E501
        'region_target': 'regionTarget',  # noqa: E501
        'show_prob': 'showProb',  # noqa: E501
        'negative_words': 'negativeWords',  # noqa: E501
        'exact_negative_words': 'exactNegativeWords',  # noqa: E501
        'device': 'device',  # noqa: E501
        'price_ratio': 'priceRatio',  # noqa: E501
        'ad_type': 'adType',  # noqa: E501
        'wregion_ztc': 'wregionZtc',  # noqa: E501
        'cpa_price': 'cpaPrice',  # noqa: E501
        'cpa_type': 'cpaType',  # noqa: E501
        'pc_price_ratio': 'pcPriceRatio',  # noqa: E501
        'campaign_auto_bid_status': 'campaignAutoBidStatus',  # noqa: E501
        'exclude_ip': 'excludeIp',  # noqa: E501
        'budget_offline_time': 'budgetOfflineTime',  # noqa: E501
        'schedule': 'schedule',  # noqa: E501
        'internal_type': 'internalType',  # noqa: E501
        'offline_reasons': 'offlineReasons',  # noqa: E501
        'status': 'status',  # noqa: E501
        'dyn_creative_exclusion': 'dynCreativeExclusion',  # noqa: E501
        'operator': 'operator',  # noqa: E501
        'is_dynamic_creative': 'isDynamicCreative',  # noqa: E501
        'is_dynamic_tag_sublink': 'isDynamicTagSublink',  # noqa: E501
        'is_dynamic_title': 'isDynamicTitle',  # noqa: E501
        'is_dynamic_hot_redirect': 'isDynamicHotRedirect',  # noqa: E501
        'wregion_poi': 'wregionPOI',  # noqa: E501
        'campaign_type': 'campaignType',  # noqa: E501
        'is_delete': 'isDelete',  # noqa: E501
        'query_region_status': 'queryRegionStatus',  # noqa: E501
        'acct_dynamic_create_status': 'acctDynamicCreateStatus',  # noqa: E501
        'dynamic_creative_tool_id': 'dynamicCreativeToolId',  # noqa: E501
        'marker': 'marker',  # noqa: E501
        'campaign_status1': 'campaignStatus1',  # noqa: E501
        'add_from': 'addFrom',  # noqa: E501
        'schedule_raw': 'scheduleRaw',  # noqa: E501
        'distance_price_status': 'distancePriceStatus',  # noqa: E501
        'dynamic_creative_grab_url': 'dynamicCreativeGrabUrl',  # noqa: E501
        'schedule_price_factors': 'schedulePriceFactors',  # noqa: E501
        're_online_reasons': 'reOnlineReasons',  # noqa: E501
        'region_price_factor': 'regionPriceFactor',  # noqa: E501
        'distance_price_factor': 'distancePriceFactor',  # noqa: E501
        'area_price_factor': 'areaPriceFactor',  # noqa: E501
        'distance_range_factor': 'distanceRangeFactor',  # noqa: E501
        'acct_dynamic_tag_sublink_status': 'acctDynamicTagSublinkStatus',  # noqa: E501
        'acct_dynamic_title_status': 'acctDynamicTitleStatus',  # noqa: E501
        'acct_dynamic_hot_redirect_status': 'acctDynamicHotRedirectStatus',  # noqa: E501
        'campaign_advance_match': 'campaignAdvanceMatch',  # noqa: E501
        'acct_advance_match': 'acctAdvanceMatch',  # noqa: E501
        'campaign_hct': 'campaignHct',  # noqa: E501
        'external_flow': 'externalFlow',  # noqa: E501
        'acct_dynamic_title_list': 'acctDynamicTitleList',  # noqa: E501
        'acct_dynamic_title_abstract': 'acctDynamicTitleAbstract',  # noqa: E501
        'same_stage_status': 'sameStageStatus',  # noqa: E501
        'acct_same_stage_status': 'acctSameStageStatus',  # noqa: E501
        'acct_scenarized_status': 'acctScenarizedStatus',  # noqa: E501
        'campaign_scenarized_phrase_status': 'campaignScenarizedPhraseStatus',  # noqa: E501
        'pr_realtime_browse_status': 'prRealtimeBrowseStatus',  # noqa: E501
        'pr_peoples_attribute_status': 'prPeoplesAttributeStatus',  # noqa: E501
        'pr_statistics_param_status': 'prStatisticsParamStatus',  # noqa: E501
        'region_target_district': 'regionTargetDistrict',  # noqa: E501
        'url_param_status': 'urlParamStatus',  # noqa: E501
        'budget_cumulate_status': 'budgetCumulateStatus',  # noqa: E501
        'acct_budget_cumulate_status': 'acctBudgetCumulateStatus',  # noqa: E501
        'customer_budget_mod_time': 'customerBudgetModTime',  # noqa: E501
        'auto_targeting_status': 'autoTargetingStatus',  # noqa: E501
        'auto_targeting_price': 'autoTargetingPrice',  # noqa: E501
        'auto_targeting_budget': 'autoTargetingBudget',  # noqa: E501
        'pr_search_intention_status': 'prSearchIntentionStatus',  # noqa: E501
        'dsa_param_status': 'dsaParamStatus',  # noqa: E501
        'campaign_cost_manager': 'campaignCostManager',  # noqa: E501
        'campaign_dynamic_creative_link_status': 'campaignDynamicCreativeLinkStatus',  # noqa: E501
        'campaign_dynamic_creative_title_status': 'campaignDynamicCreativeTitleStatus',  # noqa: E501
        'campaign_dynamic_creative_hot_redirect_status': 'campaignDynamicCreativeHotRedirectStatus',  # noqa: E501
        'campaign_content_redirect_status': 'campaignContentRedirectStatus',  # noqa: E501
        'campaign_pic_text_status': 'campaignPicTextStatus',  # noqa: E501
        'campaign_knowledge_status': 'campaignKnowledgeStatus',  # noqa: E501
        'campaign_single_pic_status': 'campaignSinglePicStatus',  # noqa: E501
        'campaign_extend_title_status': 'campaignExtendTitleStatus',  # noqa: E501
        'acct_dynamic_creative_link_status': 'acctDynamicCreativeLinkStatus',  # noqa: E501
        'acct_dynamic_creative_title_status': 'acctDynamicCreativeTitleStatus',  # noqa: E501
        'acct_dynamic_creative_hot_redirect_status': 'acctDynamicCreativeHotRedirectStatus',  # noqa: E501
        'acct_content_redirect_status': 'acctContentRedirectStatus',  # noqa: E501
        'acct_pic_text_status': 'acctPicTextStatus',  # noqa: E501
        'acct_knowledge_status': 'acctKnowledgeStatus',  # noqa: E501
        'acct_single_pic_status': 'acctSinglePicStatus',  # noqa: E501
        'acct_extend_title_status': 'acctExtendTitleStatus',  # noqa: E501
        'feed_param_status': 'feedParamStatus',  # noqa: E501
        'feed_flow_strategy': 'feedFlowStrategy',  # noqa: E501
        'feed_flow_price_ratio': 'feedFlowPriceRatio',  # noqa: E501
        'acct_feed_flow_price_ratio': 'acctFeedFlowPriceRatio',  # noqa: E501
        'acct_feed_flow_price_strategy': 'acctFeedFlowPriceStrategy',  # noqa: E501
        'jingxiu_two_sublink_factor': 'jingxiuTwoSublinkFactor',  # noqa: E501
        'night_time_switch_status': 'nightTimeSwitchStatus',  # noqa: E501
        'crowd_auto_chosen': 'crowdAutoChosen',  # noqa: E501
        'creative_title_replace_status': 'creativeTitleReplaceStatus',  # noqa: E501
        'auto_tatget_flow_status': 'autoTatgetFlowStatus',  # noqa: E501
        'campaign_status2': 'campaignStatus2',  # noqa: E501
        'system_word_status': 'systemWordStatus',  # noqa: E501
        'schedule_template_name': 'scheduleTemplateName',  # noqa: E501
        'schedule_template_id': 'scheduleTemplateId',  # noqa: E501
        'negative_word_packets': 'negativeWordPackets',  # noqa: E501
        'negative_word_packet_ids': 'negativeWordPacketIds',  # noqa: E501
        'indepdent_negative_words': 'indepdentNegativeWords',  # noqa: E501
        'indepdent_exact_negative_words': 'indepdentExactNegativeWords',  # noqa: E501
        'medical_url_status': 'medicalUrlStatus',  # noqa: E501
        'indent_negative_packet_words': 'indentNegativePacketWords',  # noqa: E501
        'indent_negative_packet_exact_words': 'indentNegativePacketExactWords',  # noqa: E501
        'region_restrict_status': 'regionRestrictStatus',  # noqa: E501
        'business_point_final_level': 'businessPointFinalLevel',  # noqa: E501
        'region_type': 'regionType',  # noqa: E501
        'region_area': 'regionArea',  # noqa: E501
        'region_store': 'regionStore',  # noqa: E501
        'store_plan_wregion': 'storePlanWregion',  # noqa: E501
        'content_label_status': 'contentLabelStatus',  # noqa: E501
        'store_page_infos': 'storePageInfos',  # noqa: E501
        'business_label_status': 'businessLabelStatus',  # noqa: E501
        'business_label_final_status': 'businessLabelFinalStatus',  # noqa: E501
        'business_label_adgroup_ids': 'businessLabelAdgroupIds',  # noqa: E501
        'adgroups': 'adgroups',  # noqa: E501
        'adgroups_not_in_use': 'adgroupsNotInUse',  # noqa: E501
        'shop_type': 'shopType',  # noqa: E501
        'advice_id': 'adviceId',  # noqa: E501
        'advice_opt_type': 'adviceOptType',  # noqa: E501
        'smart_main_adgroup_id': 'smartMainAdgroupId',  # noqa: E501
        'business_labels': 'businessLabels',  # noqa: E501
        'exclude_query_region_status': 'excludeQueryRegionStatus',  # noqa: E501
        'campaign_exclude_query_region_status': 'campaignExcludeQueryRegionStatus',  # noqa: E501
        'price_strategy_id': 'priceStrategyId',  # noqa: E501
        'price_strategy_name': 'priceStrategyName',  # noqa: E501
        'price_strategy_type': 'priceStrategyType',  # noqa: E501
        'campaign_auto_expansion_status': 'campaignAutoExpansionStatus',  # noqa: E501
        'o_cpc_status': 'oCPCStatus',  # noqa: E501
        'campaign_expansion_status': 'campaignExpansionStatus',  # noqa: E501
        'promotion_page': 'promotionPage',  # noqa: E501
        'target_url_suffix': 'targetUrlSuffix',  # noqa: E501
        'price_strategy_pause': 'priceStrategyPause',  # noqa: E501
        'advice_source': 'adviceSource',  # noqa: E501
        'campaign_cascade_status': 'campaignCascadeStatus',  # noqa: E501
        'create_time': 'createTime',  # noqa: E501
        'equipment_type': 'equipmentType',  # noqa: E501
        'campaign_bid_type': 'campaignBidType',  # noqa: E501
        'campaign_bid': 'campaignBid',  # noqa: E501
        'campaign_ocpc_bid_type': 'campaignOcpcBidType',  # noqa: E501
        'campaign_ocpc_bid': 'campaignOcpcBid',  # noqa: E501
        'campaign_trans_types': 'campaignTransTypes',  # noqa: E501
        'campaign_deep_trans_types': 'campaignDeepTransTypes',  # noqa: E501
        'campaign_cv_sources': 'campaignCvSources',  # noqa: E501
        'campaign_auto_optimization_status': 'campaignAutoOptimizationStatus',  # noqa: E501
        'price_strategy': 'priceStrategy',  # noqa: E501
        'campaign_ocpc_strategy_id': 'campaignOcpcStrategyId',  # noqa: E501
        'os': 'os',  # noqa: E501
        'smart_region': 'smartRegion',  # noqa: E501
        'dpa_device': 'dpaDevice',  # noqa: E501
        'ad_source': 'adSource',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """CampaignType - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            user_id (int): [optional]  # noqa: E501
            campaign_id (int): [optional]  # noqa: E501
            campaign_name (str): [optional]  # noqa: E501
            business_point_id (int): [optional]  # noqa: E501
            business_point_name (str): [optional]  # noqa: E501
            marketing_target_id (int): [optional]  # noqa: E501
            target_url (str): [optional]  # noqa: E501
            bid_prefer (int): [optional]  # noqa: E501
            pause (bool): [optional]  # noqa: E501
            budget (float): [optional]  # noqa: E501
            region_target ([int]): [optional]  # noqa: E501
            show_prob (int): [optional]  # noqa: E501
            negative_words ([str]): [optional]  # noqa: E501
            exact_negative_words ([str]): [optional]  # noqa: E501
            device (int): [optional]  # noqa: E501
            price_ratio (float): [optional]  # noqa: E501
            ad_type (int): [optional]  # noqa: E501
            wregion_ztc ([int]): [optional]  # noqa: E501
            cpa_price (float): [optional]  # noqa: E501
            cpa_type (str): [optional]  # noqa: E501
            pc_price_ratio (float): [optional]  # noqa: E501
            campaign_auto_bid_status (int): [optional]  # noqa: E501
            exclude_ip ([str]): [optional]  # noqa: E501
            budget_offline_time ([OfflineTimeType]): [optional]  # noqa: E501
            schedule ([ScheduleType]): [optional]  # noqa: E501
            internal_type (int): [optional]  # noqa: E501
            offline_reasons ([OfflineReason]): [optional]  # noqa: E501
            status (int): [optional]  # noqa: E501
            dyn_creative_exclusion (str): [optional]  # noqa: E501
            operator (str): [optional]  # noqa: E501
            is_dynamic_creative (bool): [optional]  # noqa: E501
            is_dynamic_tag_sublink (bool): [optional]  # noqa: E501
            is_dynamic_title (bool): [optional]  # noqa: E501
            is_dynamic_hot_redirect (bool): [optional]  # noqa: E501
            wregion_poi ([RegionPOIType]): [optional]  # noqa: E501
            campaign_type (int): [optional]  # noqa: E501
            is_delete (bool): [optional]  # noqa: E501
            query_region_status (bool): [optional]  # noqa: E501
            acct_dynamic_create_status (bool): [optional]  # noqa: E501
            dynamic_creative_tool_id (int): [optional]  # noqa: E501
            marker (int): [optional]  # noqa: E501
            campaign_status1 (int): [optional]  # noqa: E501
            add_from (int): [optional]  # noqa: E501
            schedule_raw ([[int]]): [optional]  # noqa: E501
            distance_price_status (bool): [optional]  # noqa: E501
            dynamic_creative_grab_url ([DynamicCreativeGrabUrl]): [optional]  # noqa: E501
            schedule_price_factors ([SchedulePriceFactor]): [optional]  # noqa: E501
            re_online_reasons ([OfflineTimeType]): [optional]  # noqa: E501
            region_price_factor ([RegionPriceFactor]): [optional]  # noqa: E501
            distance_price_factor ([DistancePriceFactorType]): [optional]  # noqa: E501
            area_price_factor ([AreaPriceFactor]): [optional]  # noqa: E501
            distance_range_factor ([CampaignDistanceRangeFactor]): [optional]  # noqa: E501
            acct_dynamic_tag_sublink_status (bool): [optional]  # noqa: E501
            acct_dynamic_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_hot_redirect_status (bool): [optional]  # noqa: E501
            campaign_advance_match (bool): [optional]  # noqa: E501
            acct_advance_match (bool): [optional]  # noqa: E501
            campaign_hct (CampaignHct): [optional]  # noqa: E501
            external_flow ([CampaignExternalFlow]): [optional]  # noqa: E501
            acct_dynamic_title_list (int): [optional]  # noqa: E501
            acct_dynamic_title_abstract (int): [optional]  # noqa: E501
            same_stage_status (bool): [optional]  # noqa: E501
            acct_same_stage_status (bool): [optional]  # noqa: E501
            acct_scenarized_status (bool): [optional]  # noqa: E501
            campaign_scenarized_phrase_status (bool): [optional]  # noqa: E501
            pr_realtime_browse_status (bool): [optional]  # noqa: E501
            pr_peoples_attribute_status (bool): [optional]  # noqa: E501
            pr_statistics_param_status (bool): [optional]  # noqa: E501
            region_target_district ([RegionTargetDistrictType]): [optional]  # noqa: E501
            url_param_status (int): [optional]  # noqa: E501
            budget_cumulate_status (bool): [optional]  # noqa: E501
            acct_budget_cumulate_status (bool): [optional]  # noqa: E501
            customer_budget_mod_time (str): [optional]  # noqa: E501
            auto_targeting_status (bool): [optional]  # noqa: E501
            auto_targeting_price (float): [optional]  # noqa: E501
            auto_targeting_budget (int): [optional]  # noqa: E501
            pr_search_intention_status (bool): [optional]  # noqa: E501
            dsa_param_status (bool): [optional]  # noqa: E501
            campaign_cost_manager (CampaignCostManager): [optional]  # noqa: E501
            campaign_dynamic_creative_link_status (bool): [optional]  # noqa: E501
            campaign_dynamic_creative_title_status (bool): [optional]  # noqa: E501
            campaign_dynamic_creative_hot_redirect_status (bool): [optional]  # noqa: E501
            campaign_content_redirect_status (bool): [optional]  # noqa: E501
            campaign_pic_text_status (bool): [optional]  # noqa: E501
            campaign_knowledge_status (bool): [optional]  # noqa: E501
            campaign_single_pic_status (bool): [optional]  # noqa: E501
            campaign_extend_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_link_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_hot_redirect_status (bool): [optional]  # noqa: E501
            acct_content_redirect_status (bool): [optional]  # noqa: E501
            acct_pic_text_status (bool): [optional]  # noqa: E501
            acct_knowledge_status (bool): [optional]  # noqa: E501
            acct_single_pic_status (bool): [optional]  # noqa: E501
            acct_extend_title_status (bool): [optional]  # noqa: E501
            feed_param_status (bool): [optional]  # noqa: E501
            feed_flow_strategy (int): [optional]  # noqa: E501
            feed_flow_price_ratio (float): [optional]  # noqa: E501
            acct_feed_flow_price_ratio (float): [optional]  # noqa: E501
            acct_feed_flow_price_strategy (int): [optional]  # noqa: E501
            jingxiu_two_sublink_factor (float): [optional]  # noqa: E501
            night_time_switch_status (bool): [optional]  # noqa: E501
            crowd_auto_chosen ([int]): [optional]  # noqa: E501
            creative_title_replace_status (bool): [optional]  # noqa: E501
            auto_tatget_flow_status (int): [optional]  # noqa: E501
            campaign_status2 (int): [optional]  # noqa: E501
            system_word_status (bool): [optional]  # noqa: E501
            schedule_template_name (str): [optional]  # noqa: E501
            schedule_template_id (int): [optional]  # noqa: E501
            negative_word_packets ([ShareRepertoryType]): [optional]  # noqa: E501
            negative_word_packet_ids ([int]): [optional]  # noqa: E501
            indepdent_negative_words ([str]): [optional]  # noqa: E501
            indepdent_exact_negative_words ([str]): [optional]  # noqa: E501
            medical_url_status (bool): [optional]  # noqa: E501
            indent_negative_packet_words ([str]): [optional]  # noqa: E501
            indent_negative_packet_exact_words ([str]): [optional]  # noqa: E501
            region_restrict_status (bool): [optional]  # noqa: E501
            business_point_final_level (bool): [optional]  # noqa: E501
            region_type (int): [optional]  # noqa: E501
            region_area ([CampaignRegionArea]): [optional]  # noqa: E501
            region_store ([CampaignRegionStore]): [optional]  # noqa: E501
            store_plan_wregion ([int]): [optional]  # noqa: E501
            content_label_status (bool): [optional]  # noqa: E501
            store_page_infos ([StorePageInfoType]): [optional]  # noqa: E501
            business_label_status (bool): [optional]  # noqa: E501
            business_label_final_status (int): [optional]  # noqa: E501
            business_label_adgroup_ids ([int]): [optional]  # noqa: E501
            adgroups ([AdgroupType]): [optional]  # noqa: E501
            adgroups_not_in_use ([int]): [optional]  # noqa: E501
            shop_type (int): [optional]  # noqa: E501
            advice_id (int): [optional]  # noqa: E501
            advice_opt_type (int): [optional]  # noqa: E501
            smart_main_adgroup_id (int): [optional]  # noqa: E501
            business_labels ([BusinessLabelType]): [optional]  # noqa: E501
            exclude_query_region_status (bool): [optional]  # noqa: E501
            campaign_exclude_query_region_status (bool): [optional]  # noqa: E501
            price_strategy_id (int): [optional]  # noqa: E501
            price_strategy_name (str): [optional]  # noqa: E501
            price_strategy_type (int): [optional]  # noqa: E501
            campaign_auto_expansion_status (bool): [optional]  # noqa: E501
            o_cpc_status (int): [optional]  # noqa: E501
            campaign_expansion_status (int): [optional]  # noqa: E501
            promotion_page (NovelPromotionPageType): [optional]  # noqa: E501
            target_url_suffix (str): [optional]  # noqa: E501
            price_strategy_pause (bool): [optional]  # noqa: E501
            advice_source (int): [optional]  # noqa: E501
            campaign_cascade_status (int): [optional]  # noqa: E501
            create_time (str): [optional]  # noqa: E501
            equipment_type (int): [optional]  # noqa: E501
            campaign_bid_type (int): [optional]  # noqa: E501
            campaign_bid (float): [optional]  # noqa: E501
            campaign_ocpc_bid_type (int): [optional]  # noqa: E501
            campaign_ocpc_bid (float): [optional]  # noqa: E501
            campaign_trans_types ([int]): [optional]  # noqa: E501
            campaign_deep_trans_types ([int]): [optional]  # noqa: E501
            campaign_cv_sources ([int]): [optional]  # noqa: E501
            campaign_auto_optimization_status (bool): [optional]  # noqa: E501
            price_strategy (PriceStrategyInfo): [optional]  # noqa: E501
            campaign_ocpc_strategy_id (int): [optional]  # noqa: E501
            os ([str]): [optional]  # noqa: E501
            smart_region (bool): [optional]  # noqa: E501
            dpa_device (int): [optional]  # noqa: E501
            ad_source (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """CampaignType - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            user_id (int): [optional]  # noqa: E501
            campaign_id (int): [optional]  # noqa: E501
            campaign_name (str): [optional]  # noqa: E501
            business_point_id (int): [optional]  # noqa: E501
            business_point_name (str): [optional]  # noqa: E501
            marketing_target_id (int): [optional]  # noqa: E501
            target_url (str): [optional]  # noqa: E501
            bid_prefer (int): [optional]  # noqa: E501
            pause (bool): [optional]  # noqa: E501
            budget (float): [optional]  # noqa: E501
            region_target ([int]): [optional]  # noqa: E501
            show_prob (int): [optional]  # noqa: E501
            negative_words ([str]): [optional]  # noqa: E501
            exact_negative_words ([str]): [optional]  # noqa: E501
            device (int): [optional]  # noqa: E501
            price_ratio (float): [optional]  # noqa: E501
            ad_type (int): [optional]  # noqa: E501
            wregion_ztc ([int]): [optional]  # noqa: E501
            cpa_price (float): [optional]  # noqa: E501
            cpa_type (str): [optional]  # noqa: E501
            pc_price_ratio (float): [optional]  # noqa: E501
            campaign_auto_bid_status (int): [optional]  # noqa: E501
            exclude_ip ([str]): [optional]  # noqa: E501
            budget_offline_time ([OfflineTimeType]): [optional]  # noqa: E501
            schedule ([ScheduleType]): [optional]  # noqa: E501
            internal_type (int): [optional]  # noqa: E501
            offline_reasons ([OfflineReason]): [optional]  # noqa: E501
            status (int): [optional]  # noqa: E501
            dyn_creative_exclusion (str): [optional]  # noqa: E501
            operator (str): [optional]  # noqa: E501
            is_dynamic_creative (bool): [optional]  # noqa: E501
            is_dynamic_tag_sublink (bool): [optional]  # noqa: E501
            is_dynamic_title (bool): [optional]  # noqa: E501
            is_dynamic_hot_redirect (bool): [optional]  # noqa: E501
            wregion_poi ([RegionPOIType]): [optional]  # noqa: E501
            campaign_type (int): [optional]  # noqa: E501
            is_delete (bool): [optional]  # noqa: E501
            query_region_status (bool): [optional]  # noqa: E501
            acct_dynamic_create_status (bool): [optional]  # noqa: E501
            dynamic_creative_tool_id (int): [optional]  # noqa: E501
            marker (int): [optional]  # noqa: E501
            campaign_status1 (int): [optional]  # noqa: E501
            add_from (int): [optional]  # noqa: E501
            schedule_raw ([[int]]): [optional]  # noqa: E501
            distance_price_status (bool): [optional]  # noqa: E501
            dynamic_creative_grab_url ([DynamicCreativeGrabUrl]): [optional]  # noqa: E501
            schedule_price_factors ([SchedulePriceFactor]): [optional]  # noqa: E501
            re_online_reasons ([OfflineTimeType]): [optional]  # noqa: E501
            region_price_factor ([RegionPriceFactor]): [optional]  # noqa: E501
            distance_price_factor ([DistancePriceFactorType]): [optional]  # noqa: E501
            area_price_factor ([AreaPriceFactor]): [optional]  # noqa: E501
            distance_range_factor ([CampaignDistanceRangeFactor]): [optional]  # noqa: E501
            acct_dynamic_tag_sublink_status (bool): [optional]  # noqa: E501
            acct_dynamic_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_hot_redirect_status (bool): [optional]  # noqa: E501
            campaign_advance_match (bool): [optional]  # noqa: E501
            acct_advance_match (bool): [optional]  # noqa: E501
            campaign_hct (CampaignHct): [optional]  # noqa: E501
            external_flow ([CampaignExternalFlow]): [optional]  # noqa: E501
            acct_dynamic_title_list (int): [optional]  # noqa: E501
            acct_dynamic_title_abstract (int): [optional]  # noqa: E501
            same_stage_status (bool): [optional]  # noqa: E501
            acct_same_stage_status (bool): [optional]  # noqa: E501
            acct_scenarized_status (bool): [optional]  # noqa: E501
            campaign_scenarized_phrase_status (bool): [optional]  # noqa: E501
            pr_realtime_browse_status (bool): [optional]  # noqa: E501
            pr_peoples_attribute_status (bool): [optional]  # noqa: E501
            pr_statistics_param_status (bool): [optional]  # noqa: E501
            region_target_district ([RegionTargetDistrictType]): [optional]  # noqa: E501
            url_param_status (int): [optional]  # noqa: E501
            budget_cumulate_status (bool): [optional]  # noqa: E501
            acct_budget_cumulate_status (bool): [optional]  # noqa: E501
            customer_budget_mod_time (str): [optional]  # noqa: E501
            auto_targeting_status (bool): [optional]  # noqa: E501
            auto_targeting_price (float): [optional]  # noqa: E501
            auto_targeting_budget (int): [optional]  # noqa: E501
            pr_search_intention_status (bool): [optional]  # noqa: E501
            dsa_param_status (bool): [optional]  # noqa: E501
            campaign_cost_manager (CampaignCostManager): [optional]  # noqa: E501
            campaign_dynamic_creative_link_status (bool): [optional]  # noqa: E501
            campaign_dynamic_creative_title_status (bool): [optional]  # noqa: E501
            campaign_dynamic_creative_hot_redirect_status (bool): [optional]  # noqa: E501
            campaign_content_redirect_status (bool): [optional]  # noqa: E501
            campaign_pic_text_status (bool): [optional]  # noqa: E501
            campaign_knowledge_status (bool): [optional]  # noqa: E501
            campaign_single_pic_status (bool): [optional]  # noqa: E501
            campaign_extend_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_link_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_title_status (bool): [optional]  # noqa: E501
            acct_dynamic_creative_hot_redirect_status (bool): [optional]  # noqa: E501
            acct_content_redirect_status (bool): [optional]  # noqa: E501
            acct_pic_text_status (bool): [optional]  # noqa: E501
            acct_knowledge_status (bool): [optional]  # noqa: E501
            acct_single_pic_status (bool): [optional]  # noqa: E501
            acct_extend_title_status (bool): [optional]  # noqa: E501
            feed_param_status (bool): [optional]  # noqa: E501
            feed_flow_strategy (int): [optional]  # noqa: E501
            feed_flow_price_ratio (float): [optional]  # noqa: E501
            acct_feed_flow_price_ratio (float): [optional]  # noqa: E501
            acct_feed_flow_price_strategy (int): [optional]  # noqa: E501
            jingxiu_two_sublink_factor (float): [optional]  # noqa: E501
            night_time_switch_status (bool): [optional]  # noqa: E501
            crowd_auto_chosen ([int]): [optional]  # noqa: E501
            creative_title_replace_status (bool): [optional]  # noqa: E501
            auto_tatget_flow_status (int): [optional]  # noqa: E501
            campaign_status2 (int): [optional]  # noqa: E501
            system_word_status (bool): [optional]  # noqa: E501
            schedule_template_name (str): [optional]  # noqa: E501
            schedule_template_id (int): [optional]  # noqa: E501
            negative_word_packets ([ShareRepertoryType]): [optional]  # noqa: E501
            negative_word_packet_ids ([int]): [optional]  # noqa: E501
            indepdent_negative_words ([str]): [optional]  # noqa: E501
            indepdent_exact_negative_words ([str]): [optional]  # noqa: E501
            medical_url_status (bool): [optional]  # noqa: E501
            indent_negative_packet_words ([str]): [optional]  # noqa: E501
            indent_negative_packet_exact_words ([str]): [optional]  # noqa: E501
            region_restrict_status (bool): [optional]  # noqa: E501
            business_point_final_level (bool): [optional]  # noqa: E501
            region_type (int): [optional]  # noqa: E501
            region_area ([CampaignRegionArea]): [optional]  # noqa: E501
            region_store ([CampaignRegionStore]): [optional]  # noqa: E501
            store_plan_wregion ([int]): [optional]  # noqa: E501
            content_label_status (bool): [optional]  # noqa: E501
            store_page_infos ([StorePageInfoType]): [optional]  # noqa: E501
            business_label_status (bool): [optional]  # noqa: E501
            business_label_final_status (int): [optional]  # noqa: E501
            business_label_adgroup_ids ([int]): [optional]  # noqa: E501
            adgroups ([AdgroupType]): [optional]  # noqa: E501
            adgroups_not_in_use ([int]): [optional]  # noqa: E501
            shop_type (int): [optional]  # noqa: E501
            advice_id (int): [optional]  # noqa: E501
            advice_opt_type (int): [optional]  # noqa: E501
            smart_main_adgroup_id (int): [optional]  # noqa: E501
            business_labels ([BusinessLabelType]): [optional]  # noqa: E501
            exclude_query_region_status (bool): [optional]  # noqa: E501
            campaign_exclude_query_region_status (bool): [optional]  # noqa: E501
            price_strategy_id (int): [optional]  # noqa: E501
            price_strategy_name (str): [optional]  # noqa: E501
            price_strategy_type (int): [optional]  # noqa: E501
            campaign_auto_expansion_status (bool): [optional]  # noqa: E501
            o_cpc_status (int): [optional]  # noqa: E501
            campaign_expansion_status (int): [optional]  # noqa: E501
            promotion_page (NovelPromotionPageType): [optional]  # noqa: E501
            target_url_suffix (str): [optional]  # noqa: E501
            price_strategy_pause (bool): [optional]  # noqa: E501
            advice_source (int): [optional]  # noqa: E501
            campaign_cascade_status (int): [optional]  # noqa: E501
            create_time (str): [optional]  # noqa: E501
            equipment_type (int): [optional]  # noqa: E501
            campaign_bid_type (int): [optional]  # noqa: E501
            campaign_bid (float): [optional]  # noqa: E501
            campaign_ocpc_bid_type (int): [optional]  # noqa: E501
            campaign_ocpc_bid (float): [optional]  # noqa: E501
            campaign_trans_types ([int]): [optional]  # noqa: E501
            campaign_deep_trans_types ([int]): [optional]  # noqa: E501
            campaign_cv_sources ([int]): [optional]  # noqa: E501
            campaign_auto_optimization_status (bool): [optional]  # noqa: E501
            price_strategy (PriceStrategyInfo): [optional]  # noqa: E501
            campaign_ocpc_strategy_id (int): [optional]  # noqa: E501
            os ([str]): [optional]  # noqa: E501
            smart_region (bool): [optional]  # noqa: E501
            dpa_device (int): [optional]  # noqa: E501
            ad_source (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
