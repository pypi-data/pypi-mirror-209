"""
    dev2 api schema

    'dev2.baidu.com' api schema  # noqa: E501

Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from baiduads.api_client import ApiClient, Endpoint as _Endpoint
from baiduads.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from baiduads.shieldfunction.model.add_ip_black_manual_request_wrapper import AddIPBlackManualRequestWrapper
from baiduads.shieldfunction.model.add_ip_black_manual_response_wrapper import AddIPBlackManualResponseWrapper
from baiduads.shieldfunction.model.delete_ip_black_manual_request_wrapper import DeleteIPBlackManualRequestWrapper
from baiduads.shieldfunction.model.delete_ip_black_manual_response_wrapper import DeleteIPBlackManualResponseWrapper
from baiduads.shieldfunction.model.get_hit_black_ip_policy_request_wrapper import GetHitBlackIPPolicyRequestWrapper
from baiduads.shieldfunction.model.get_hit_black_ip_policy_response_wrapper import GetHitBlackIPPolicyResponseWrapper
from baiduads.shieldfunction.model.get_hit_customer_policy_request_wrapper import GetHitCustomerPolicyRequestWrapper
from baiduads.shieldfunction.model.get_hit_customer_policy_response_wrapper import GetHitCustomerPolicyResponseWrapper
from baiduads.shieldfunction.model.get_ip_black_manual_request_wrapper import GetIPBlackManualRequestWrapper
from baiduads.shieldfunction.model.get_ip_black_manual_response_wrapper import GetIPBlackManualResponseWrapper
from baiduads.shieldfunction.model.get_shield_black_ip_request_wrapper import GetShieldBlackIPRequestWrapper
from baiduads.shieldfunction.model.get_shield_black_ip_response_wrapper import GetShieldBlackIPResponseWrapper
from baiduads.shieldfunction.model.get_shield_customer_request_wrapper import GetShieldCustomerRequestWrapper
from baiduads.shieldfunction.model.get_shield_customer_response_wrapper import GetShieldCustomerResponseWrapper
from baiduads.shieldfunction.model.get_shield_policy_request_wrapper import GetShieldPolicyRequestWrapper
from baiduads.shieldfunction.model.get_shield_policy_response_wrapper import GetShieldPolicyResponseWrapper
from baiduads.shieldfunction.model.get_user_diagnose_detail_request_wrapper import GetUserDiagnoseDetailRequestWrapper
from baiduads.shieldfunction.model.get_user_diagnose_detail_response_wrapper import GetUserDiagnoseDetailResponseWrapper
from baiduads.shieldfunction.model.get_user_diagnose_info_request_wrapper import GetUserDiagnoseInfoRequestWrapper
from baiduads.shieldfunction.model.get_user_diagnose_info_response_wrapper import GetUserDiagnoseInfoResponseWrapper
from baiduads.shieldfunction.model.update_adv_ip_black_manual_request_wrapper import UpdateAdvIPBlackManualRequestWrapper
from baiduads.shieldfunction.model.update_adv_ip_black_manual_response_wrapper import UpdateAdvIPBlackManualResponseWrapper
from baiduads.shieldfunction.model.update_ip_black_manual_request_wrapper import UpdateIPBlackManualRequestWrapper
from baiduads.shieldfunction.model.update_ip_black_manual_response_wrapper import UpdateIPBlackManualResponseWrapper


class ShieldFunction(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_ip_black_manual_endpoint = _Endpoint(
            settings={
                'response_type': (AddIPBlackManualResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/addIPBlackManual',
                'operation_id': 'add_ip_black_manual',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_ip_black_manual_request_wrapper',
                ],
                'required': [
                    'add_ip_black_manual_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_ip_black_manual_request_wrapper':
                        (AddIPBlackManualRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_ip_black_manual_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_ip_black_manual_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteIPBlackManualResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/deleteIPBlackManual',
                'operation_id': 'delete_ip_black_manual',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_ip_black_manual_request_wrapper',
                ],
                'required': [
                    'delete_ip_black_manual_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_ip_black_manual_request_wrapper':
                        (DeleteIPBlackManualRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_ip_black_manual_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_hit_black_ip_policy_endpoint = _Endpoint(
            settings={
                'response_type': (GetHitBlackIPPolicyResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getHitBlackIPPolicy',
                'operation_id': 'get_hit_black_ip_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_hit_black_ip_policy_request_wrapper',
                ],
                'required': [
                    'get_hit_black_ip_policy_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_hit_black_ip_policy_request_wrapper':
                        (GetHitBlackIPPolicyRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_hit_black_ip_policy_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_hit_customer_policy_endpoint = _Endpoint(
            settings={
                'response_type': (GetHitCustomerPolicyResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getHitCustomerPolicy',
                'operation_id': 'get_hit_customer_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_hit_customer_policy_request_wrapper',
                ],
                'required': [
                    'get_hit_customer_policy_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_hit_customer_policy_request_wrapper':
                        (GetHitCustomerPolicyRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_hit_customer_policy_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_ip_black_manual_endpoint = _Endpoint(
            settings={
                'response_type': (GetIPBlackManualResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getIPBlackManual',
                'operation_id': 'get_ip_black_manual',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_ip_black_manual_request_wrapper',
                ],
                'required': [
                    'get_ip_black_manual_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_ip_black_manual_request_wrapper':
                        (GetIPBlackManualRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_ip_black_manual_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_shield_black_ip_endpoint = _Endpoint(
            settings={
                'response_type': (GetShieldBlackIPResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getShieldBlackIP',
                'operation_id': 'get_shield_black_ip',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_shield_black_ip_request_wrapper',
                ],
                'required': [
                    'get_shield_black_ip_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_shield_black_ip_request_wrapper':
                        (GetShieldBlackIPRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_shield_black_ip_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_shield_customer_endpoint = _Endpoint(
            settings={
                'response_type': (GetShieldCustomerResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getShieldCustomer',
                'operation_id': 'get_shield_customer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_shield_customer_request_wrapper',
                ],
                'required': [
                    'get_shield_customer_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_shield_customer_request_wrapper':
                        (GetShieldCustomerRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_shield_customer_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_shield_policy_endpoint = _Endpoint(
            settings={
                'response_type': (GetShieldPolicyResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getShieldPolicy',
                'operation_id': 'get_shield_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_shield_policy_request_wrapper',
                ],
                'required': [
                    'get_shield_policy_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_shield_policy_request_wrapper':
                        (GetShieldPolicyRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_shield_policy_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_user_diagnose_detail_endpoint = _Endpoint(
            settings={
                'response_type': (GetUserDiagnoseDetailResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getUserDiagnoseDetail',
                'operation_id': 'get_user_diagnose_detail',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_user_diagnose_detail_request_wrapper',
                ],
                'required': [
                    'get_user_diagnose_detail_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_user_diagnose_detail_request_wrapper':
                        (GetUserDiagnoseDetailRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_user_diagnose_detail_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_user_diagnose_info_endpoint = _Endpoint(
            settings={
                'response_type': (GetUserDiagnoseInfoResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/getUserDiagnoseInfo',
                'operation_id': 'get_user_diagnose_info',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_user_diagnose_info_request_wrapper',
                ],
                'required': [
                    'get_user_diagnose_info_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_user_diagnose_info_request_wrapper':
                        (GetUserDiagnoseInfoRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_user_diagnose_info_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_adv_ip_black_manual_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateAdvIPBlackManualResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/updateAdvIPBlackManual',
                'operation_id': 'update_adv_ip_black_manual',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_adv_ip_black_manual_request_wrapper',
                ],
                'required': [
                    'update_adv_ip_black_manual_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_adv_ip_black_manual_request_wrapper':
                        (UpdateAdvIPBlackManualRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_adv_ip_black_manual_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_ip_black_manual_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateIPBlackManualResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ShieldFunction/updateIPBlackManual',
                'operation_id': 'update_ip_black_manual',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_ip_black_manual_request_wrapper',
                ],
                'required': [
                    'update_ip_black_manual_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_ip_black_manual_request_wrapper':
                        (UpdateIPBlackManualRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_ip_black_manual_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_ip_black_manual(
        self,
        add_ip_black_manual_request_wrapper,
        **kwargs
    ):
        """add_ip_black_manual  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_ip_black_manual(add_ip_black_manual_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            add_ip_black_manual_request_wrapper (AddIPBlackManualRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddIPBlackManualResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['add_ip_black_manual_request_wrapper'] = \
            add_ip_black_manual_request_wrapper
        return self.add_ip_black_manual_endpoint.call_with_http_info(**kwargs)

    def delete_ip_black_manual(
        self,
        delete_ip_black_manual_request_wrapper,
        **kwargs
    ):
        """delete_ip_black_manual  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ip_black_manual(delete_ip_black_manual_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            delete_ip_black_manual_request_wrapper (DeleteIPBlackManualRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteIPBlackManualResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['delete_ip_black_manual_request_wrapper'] = \
            delete_ip_black_manual_request_wrapper
        return self.delete_ip_black_manual_endpoint.call_with_http_info(**kwargs)

    def get_hit_black_ip_policy(
        self,
        get_hit_black_ip_policy_request_wrapper,
        **kwargs
    ):
        """get_hit_black_ip_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hit_black_ip_policy(get_hit_black_ip_policy_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_hit_black_ip_policy_request_wrapper (GetHitBlackIPPolicyRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetHitBlackIPPolicyResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_hit_black_ip_policy_request_wrapper'] = \
            get_hit_black_ip_policy_request_wrapper
        return self.get_hit_black_ip_policy_endpoint.call_with_http_info(**kwargs)

    def get_hit_customer_policy(
        self,
        get_hit_customer_policy_request_wrapper,
        **kwargs
    ):
        """get_hit_customer_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hit_customer_policy(get_hit_customer_policy_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_hit_customer_policy_request_wrapper (GetHitCustomerPolicyRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetHitCustomerPolicyResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_hit_customer_policy_request_wrapper'] = \
            get_hit_customer_policy_request_wrapper
        return self.get_hit_customer_policy_endpoint.call_with_http_info(**kwargs)

    def get_ip_black_manual(
        self,
        get_ip_black_manual_request_wrapper,
        **kwargs
    ):
        """get_ip_black_manual  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ip_black_manual(get_ip_black_manual_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_ip_black_manual_request_wrapper (GetIPBlackManualRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetIPBlackManualResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_ip_black_manual_request_wrapper'] = \
            get_ip_black_manual_request_wrapper
        return self.get_ip_black_manual_endpoint.call_with_http_info(**kwargs)

    def get_shield_black_ip(
        self,
        get_shield_black_ip_request_wrapper,
        **kwargs
    ):
        """get_shield_black_ip  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shield_black_ip(get_shield_black_ip_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_shield_black_ip_request_wrapper (GetShieldBlackIPRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetShieldBlackIPResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_shield_black_ip_request_wrapper'] = \
            get_shield_black_ip_request_wrapper
        return self.get_shield_black_ip_endpoint.call_with_http_info(**kwargs)

    def get_shield_customer(
        self,
        get_shield_customer_request_wrapper,
        **kwargs
    ):
        """get_shield_customer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shield_customer(get_shield_customer_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_shield_customer_request_wrapper (GetShieldCustomerRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetShieldCustomerResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_shield_customer_request_wrapper'] = \
            get_shield_customer_request_wrapper
        return self.get_shield_customer_endpoint.call_with_http_info(**kwargs)

    def get_shield_policy(
        self,
        get_shield_policy_request_wrapper,
        **kwargs
    ):
        """get_shield_policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shield_policy(get_shield_policy_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_shield_policy_request_wrapper (GetShieldPolicyRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetShieldPolicyResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_shield_policy_request_wrapper'] = \
            get_shield_policy_request_wrapper
        return self.get_shield_policy_endpoint.call_with_http_info(**kwargs)

    def get_user_diagnose_detail(
        self,
        get_user_diagnose_detail_request_wrapper,
        **kwargs
    ):
        """get_user_diagnose_detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_diagnose_detail(get_user_diagnose_detail_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_user_diagnose_detail_request_wrapper (GetUserDiagnoseDetailRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetUserDiagnoseDetailResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_user_diagnose_detail_request_wrapper'] = \
            get_user_diagnose_detail_request_wrapper
        return self.get_user_diagnose_detail_endpoint.call_with_http_info(**kwargs)

    def get_user_diagnose_info(
        self,
        get_user_diagnose_info_request_wrapper,
        **kwargs
    ):
        """get_user_diagnose_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_diagnose_info(get_user_diagnose_info_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_user_diagnose_info_request_wrapper (GetUserDiagnoseInfoRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetUserDiagnoseInfoResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_user_diagnose_info_request_wrapper'] = \
            get_user_diagnose_info_request_wrapper
        return self.get_user_diagnose_info_endpoint.call_with_http_info(**kwargs)

    def update_adv_ip_black_manual(
        self,
        update_adv_ip_black_manual_request_wrapper,
        **kwargs
    ):
        """update_adv_ip_black_manual  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_adv_ip_black_manual(update_adv_ip_black_manual_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_adv_ip_black_manual_request_wrapper (UpdateAdvIPBlackManualRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateAdvIPBlackManualResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_adv_ip_black_manual_request_wrapper'] = \
            update_adv_ip_black_manual_request_wrapper
        return self.update_adv_ip_black_manual_endpoint.call_with_http_info(**kwargs)

    def update_ip_black_manual(
        self,
        update_ip_black_manual_request_wrapper,
        **kwargs
    ):
        """update_ip_black_manual  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ip_black_manual(update_ip_black_manual_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_ip_black_manual_request_wrapper (UpdateIPBlackManualRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateIPBlackManualResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_ip_black_manual_request_wrapper'] = \
            update_ip_black_manual_request_wrapper
        return self.update_ip_black_manual_endpoint.call_with_http_info(**kwargs)

