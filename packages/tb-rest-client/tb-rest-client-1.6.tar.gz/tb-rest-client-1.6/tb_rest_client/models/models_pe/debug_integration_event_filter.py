# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.4.0PE-SNAPSHOT
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from .event_filter import EventFilter  # noqa: F401,E501

class DebugIntegrationEventFilter(EventFilter):
    """

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'bool',
        'message': 'str',
        'status': 'str',
        'type': 'str',
        'event_type': 'str',
        'server': 'str',
        'error_str': 'str'
    }
    if hasattr(EventFilter, "swagger_types"):
        swagger_types.update(EventFilter.swagger_types)

    attribute_map = {
        'error': 'error',
        'message': 'message',
        'status': 'status',
        'type': 'type',
        'event_type': 'eventType',
        'server': 'server',
        'error_str': 'errorStr'
    }
    if hasattr(EventFilter, "attribute_map"):
        attribute_map.update(EventFilter.attribute_map)

    def __init__(self, error=None, message=None, status=None, type=None, event_type=None, server=None, error_str=None, *args, **kwargs):  # noqa: E501
        """DebugIntegrationEventFilter - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._message = None
        self._status = None
        self._type = None
        self._event_type = None
        self._server = None
        self._error_str = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        self.event_type = event_type
        if server is not None:
            self.server = server
        if error_str is not None:
            self.error_str = error_str
        EventFilter.__init__(self, *args, **kwargs)

    @property
    def error(self):
        """Gets the error of this DebugIntegrationEventFilter.  # noqa: E501


        :return: The error of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DebugIntegrationEventFilter.


        :param error: The error of this DebugIntegrationEventFilter.  # noqa: E501
        :type: bool
        """

        self._error = error

    @property
    def message(self):
        """Gets the message of this DebugIntegrationEventFilter.  # noqa: E501


        :return: The message of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DebugIntegrationEventFilter.


        :param message: The message of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this DebugIntegrationEventFilter.  # noqa: E501


        :return: The status of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DebugIntegrationEventFilter.


        :param status: The status of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this DebugIntegrationEventFilter.  # noqa: E501


        :return: The type of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DebugIntegrationEventFilter.


        :param type: The type of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def event_type(self):
        """Gets the event_type of this DebugIntegrationEventFilter.  # noqa: E501

        String value representing the event type  # noqa: E501

        :return: The event_type of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DebugIntegrationEventFilter.

        String value representing the event type  # noqa: E501

        :param event_type: The event_type of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DEBUG_CONVERTER", "DEBUG_INTEGRATION", "DEBUG_RULE_CHAIN", "DEBUG_RULE_NODE", "ERROR", "LC_EVENT", "STATS"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def server(self):
        """Gets the server of this DebugIntegrationEventFilter.  # noqa: E501

        String value representing the server name, identifier or ip address where the platform is running  # noqa: E501

        :return: The server of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this DebugIntegrationEventFilter.

        String value representing the server name, identifier or ip address where the platform is running  # noqa: E501

        :param server: The server of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def error_str(self):
        """Gets the error_str of this DebugIntegrationEventFilter.  # noqa: E501

        The case insensitive 'contains' filter based on error message  # noqa: E501

        :return: The error_str of this DebugIntegrationEventFilter.  # noqa: E501
        :rtype: str
        """
        return self._error_str

    @error_str.setter
    def error_str(self, error_str):
        """Sets the error_str of this DebugIntegrationEventFilter.

        The case insensitive 'contains' filter based on error message  # noqa: E501

        :param error_str: The error_str of this DebugIntegrationEventFilter.  # noqa: E501
        :type: str
        """

        self._error_str = error_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebugIntegrationEventFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebugIntegrationEventFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
