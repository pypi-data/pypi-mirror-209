[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "cuid2"
dynamic = []
authors = [
    { name = "Will Gordon", email = "wgordon@redhat.com" },
]
description = "Next generation GUIDs. Collision-resistant ids optimized for horizontal scaling and performance."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Topic :: Security :: Cryptography",
    "Typing :: Typed",
]
keywords = [
    "crypt",
    "security",
    "uuid",
    "guid",
    "cuid",
    "cryptography",
]
version = "1.3.0"

[project.license]
file = "LICENSE"

[project.urls]
repository = "https://github.com/gordon-code/cuid2/"

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts]
black = "black {args:src/ local/tests/}"
ruff = "ruff check --fix --exit-zero {args:src/ local/tests/}"
spelling = "codespell {args:src/ local/tests/}"
pylint = "pylint {args:src/ local/tests/}"
safety = "safety check --bare"
typing = "mypy {args:src/ local/tests/}"
testing = "pytest local/tests"
testing-slow = "pytest local/tests --runslow"
tox = "tox --parallel auto"

[tool.pdm.scripts.lint-fast]
composite = [
    "black",
    "ruff",
]

[tool.pdm.scripts.lint-full]
composite = [
    "lint-fast",
    "spelling",
    "pylint",
    "typing",
    "safety",
]

[tool.pdm.dev-dependencies]
lint = [
    "black~=23.3.0",
    "codespell~=2.2.4",
    "pylint~=2.17.4",
    "ruff~=0.0.267",
    "safety==2.4.0b1",
]
test = [
    "pytest~=7.3.1",
    "pytest-mock~=3.10.0",
    "pytest-sugar~=0.9.7",
]
typing = [
    "mypy~=1.3.0",
]
tox = [
    "tox~=4.4.12",
    "tox-pdm~=0.6.1",
]

[tool.tox]
legacy_tox_ini = "    [tox]\n    min_version = 4\n    env_list = py3{8,9,10,11}, check\n    work_dir = local/.tox\n    isolated_build = True\n\n    [testenv]\n    description = run unit tests\n    groups = test\n    commands = testing\n\n    [testenv:check]\n    description = run linters and typing\n    skip_install = true\n    groups = lint, typing, test\n    commands = lint-full\n"

[tool.black]
line-length = 120
target_version = [
    "py38",
]

[tool.ruff]
line-length = 120
src = [
    "src",
]
target-version = "py38"
cache-dir = "local/.ruff_cache"
extend-select = [
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "S",
    "BLE",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "INT",
    "ARG",
    "PTH",
    "PGH",
    "PL",
    "TRY",
    "RUF",
    "D",
    "ANN",
    "PYI",
    "TCH",
    "ERA",
]
extend-ignore = [
    "D100",
    "D101",
    "D102",
    "D104",
    "D205",
    "D401",
]
unfixable = [
    "T201",
    "F401",
    "F841",
]
force-exclude = true

[tool.ruff.per-file-ignores]
"test_*.py" = [
    "S101",
    "PLR2004",
    "SLF001",
]

[tool.ruff.isort]
known-first-party = [
    "src",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
minversion = "7.3"
cache_dir = "local/.pytest_cache"
python_files = "test_*.py"

[tool.pylint.master]
ignore-patterns = "test_.*.py"

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
]

[tool.pylint.design]
max-parents = 13
max-args = 10

[tool.pylint.string]
check-quote-consistency = "yes"

[tool.mypy]
cache_dir = "local/.mypy_cache"
