# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['convert', 'create_advanced', 'create_json', 'create_item_from_row', 'add_metadata', 'create_rows',
           'create_ids_from_manifest', 'format_excel', 'copy_files']

# %% ../nbs/00_core.ipynb 3
import pandas as pd
from pandas import json_normalize
import os
import json
import copy
import datetime
import glob
import shutil

# %% ../nbs/00_core.ipynb 4
def convert(path, manifest_path, o_dir):
    os.makedirs(o_dir, exist_ok=True)

    df = pd.read_excel(path, 0, header=0)

    df = format_excel(df)

    ids = create_ids_from_manifest(manifest_path)

    rows = create_rows(df, ids)

    df2 = pd.DataFrame(rows)
    df2.to_csv(o_dir + "/index.csv", index=False)

    create_json(df2, o_dir)

    create_advanced(o_dir)

def create_advanced(o_dir):
    index_path = o_dir + "/index.json"
    with open(index_path) as f:
        data = json.load(f)

    aggs = {}

    etc = {
        "区域2" : {}
    }

    keys = ["ne_class", "区域1", "区域2", "区域色", "図符等"]

    for item in data:
        for key in keys:

            if key not in item:
                continue
            value = item[key]

            if key not in aggs:
                aggs[key] = {}
            
            if value not in aggs[key]:
                aggs[key][value] = 0
            
            aggs[key][value] += 1

        value1 = item["区域1"]

        if "区域2" not in item:
            continue
        value2 = item["区域2"]

        if value1 not in etc["区域2"]:
            etc["区域2"][value1] = {}

        if value2 not in etc["区域2"][value1]:
            etc["区域2"][value1][value2] = 0
        
        etc["区域2"][value1][value2] += 1

    aggs_sorted = {}

    for key in aggs:
        value = aggs[key]

        l = sorted(value.items(), key=lambda x:x[1], reverse=True)

        l2 = []

        for e in l:
            l2.append({
                "label": e[0],
                "value": e[1]
            })

        aggs_sorted[key] = l2

    etc_sorted = {}

    # for key in etc:

    for key in etc:
        value = etc[key]

        etc_sorted[key] = {}

        for key2 in value:
            value2 = value[key2]

            l = sorted(value2.items(), key=lambda x:x[1], reverse=True)

            l2 = []

            for e in l:
                l2.append({
                    "label": e[0],
                    "value": e[1]
                })

            etc_sorted[key][key2] = l2



    output_path = o_dir + "/aggs.json"

    with open(output_path, "w") as f:
        json.dump(aggs_sorted, f, ensure_ascii=False, indent=2)

    output_path = o_dir + "/etc.json"

    with open(output_path, "w") as f:
        json.dump(etc_sorted, f, ensure_ascii=False, indent=2)

def create_json(df, o_dir):
    items = []

    # Iterate over DataFrame rows and create items
    for index, row in df.iterrows():
        item = create_item_from_row(row)
        items.append(item)

    # Save index.json
    with open(f"{o_dir}/index.json", "w") as f:
        json.dump(items, f, ensure_ascii=False, indent=4)

    # Save ids.json
    with open(f"{o_dir}/ids.json", "w") as f:
        ids = [item["_id"] for item in items]
        json.dump(ids, f, ensure_ascii=False, indent=4)

def create_item_from_row(row):
    """
    Create an item from the given row.
    """
    item = {
        "_id": row["entry_id"],
    }

    item = add_metadata(item, row, "body", "label")
    item = add_metadata(item, row, "ne_class")

    if not pd.isnull(row["latitude"]):
        item["latitude"] = row["latitude"]
        item["longitude"] = row["longitude"]

    item = add_metadata(item, row, "区域番号")
    item = add_metadata(item, row, "関連ID")

    item = add_metadata(item, row, "区域1")
    item = add_metadata(item, row, "区域2")
    item = add_metadata(item, row, "区域色")
    item = add_metadata(item, row, "図符等")
    item = add_metadata(item, row, "地名補足")

    item["image"] = row["thumbnail"]
    item["manifest"] = row["manifest"]
    item["canvas"] = row["canvas"]
    item["xywh"] = row["xywh"]
    item["target"] = row["target"]

    today = datetime.date.today()
    item["updated"] = today.strftime('%Y-%m-%d')

    return item

def add_metadata(item, row, key, replaced_key = None):
    """
    Add metadata to the item if the value in the row is not null.
    """
    if not pd.isnull(row[key]):
        item[replaced_key or key] = row[key]
    return item

def create_rows(df, ids):
    missings = []
    rows2 = []

    for index, row in df.iterrows():
        id = str(row["entry_id"])

        if id in ids:

            conf = ids[id]

            target = conf["target"]
            spl = target.split("#xywh=")

            canvas_id = spl[0]
            xywh = spl[1]

            row["entry_id"] = str(row["entry_id"])

            row["manifest"] = conf["manifest"]
            row["canvas"] = canvas_id
            row["xywh"] = xywh
            row["target"] = target
            row["iiif"] = conf["iiif"]
            row["thumbnail"] = conf["iiif"] + f"/{xywh}/200,/0/default.jpg"

            rows2.append(copy.deepcopy(row))

        else:
            missings.append(id)

    if len(missings) > 0:
        exit(f"Missing {len(missings)} ids: {missings}")

    return rows2

def create_ids_from_manifest(manifest_path):
    ids = {}

    manifest = json.load(open(manifest_path))

    for item in manifest["items"]:
        for anno in item["annotations"][0]["items"]:
            id = anno["body"]["value"]
            # print(id)

            ids[id] = {
                "target": anno["target"],
                "manifest": manifest["id"],
                "iiif": item["items"][0]["items"][0]["body"]["service"][0]["id"]
            }
    
    return ids

def format_excel(df):
    rows2 = []

    for index, row in df.iterrows():
        id = row["ID"]

        if pd.isnull(id):
            continue

        # print(index, id)


        ne_class = row["地名種別"]

        body = row["地名・説明"]


        rows2.append({
            "entry_id": id,
            "body": body,
            "ne_class": ne_class,
            "latitude": row["緯度"],
            "longitude": row["経度"],
            "区域番号": row["区域番号"],
            "関連ID": row["関連ID"],
            "区域1": row["区域1"],
            "区域2": row["区域2"],

            "区域色": row["区域色"],
            "図符等": row["図符等"],
            "地名補足": row["地名補足"]
        })

    df2 = json_normalize(rows2)
    opath = "tmp/output.xlsx"
    os.makedirs(os.path.dirname(opath), exist_ok=True)
    df2.to_excel(opath, index=False)

    return df2

def copy_files(input_dir, output_dir):
    files = glob.glob(f"{input_dir}/**/*", recursive=True)
    for file in files:
        if os.path.isfile(file):
            opath = file.replace(input_dir, output_dir)
            shutil.copy(file, output_dir)
