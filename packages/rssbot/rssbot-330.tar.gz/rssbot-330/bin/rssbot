#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,I,R,E0611,E0401,E0402,W0212


__author__ = "B.H.J. Thate <thatebhj@gmail.com>"
__version__ = 1


import os
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from rssbot.clients import Client
from rssbot.command import command, scan
from rssbot.errored import Errors
from rssbot.loggers import Logging
from rssbot.message import parse
from rssbot.modules import cmd, irc, rss


scan(cmd)
scan(irc)
scan(rss)


DATE = time.ctime(time.time()).replace("  ", " ")
NAME = "rssbot"


def cprint(txt):
    print(txt)
    sys.stdout.flush()


class CLI(Client):

    def announce(self, txt):
        pass

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Console(CLI):

    def handle(self, evt):
        CLI.handle(self, evt)
        evt.wait()

    def poll(self):
        return self.event(input("> "))


def banner():
    print(f"{NAME.upper()} started at {DATE}")
    

def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    sis = open('/dev/null', 'r')
    os.dup2(sis.fileno(), sys.stdin.fileno())
    sos = open('/dev/null', 'a+')
    ses = open('/dev/null', 'a+')
    os.dup2(sos.fileno(), sys.stdout.fileno())
    os.dup2(ses.fileno(), sys.stderr.fileno())


def waiter():
    got = []
    for ex in Errors.errors:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Errors.errors.remove(exc)


def main():
    cfg = parse(' '.join(sys.argv[1:]))
    if "v" in cfg.opts:
        banner()
        Logging.verbose = True
        Logging.raw = cprint
    dowait = False
    if cfg.txt:
        cli = CLI()
        command(cli, cfg.otxt)
    elif 'd' in cfg.opts:
        daemon()
        dowait = True
    elif 'c' in cfg.opts:
        banner()
        csl = Console()
        csl.start()
        dowait = True
    if dowait:
        irc.start()
        rss.start()
        while 1:
            time.sleep(1.0)
            waiter()


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print('')
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        waiter()


if __name__ == "__main__":
    wrap(main)
