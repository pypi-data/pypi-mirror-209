"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class VersionPushOption(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[VersionPushOption._Type.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: VersionPushOption._Type.ValueType  # 0
        PUSH_LATEST: VersionPushOption._Type.ValueType  # 1
        PUSH_VERSION: VersionPushOption._Type.ValueType  # 2

    class Type(_Type, metaclass=_TypeEnumTypeWrapper): ...
    UNKNOWN: VersionPushOption.Type.ValueType  # 0
    PUSH_LATEST: VersionPushOption.Type.ValueType  # 1
    PUSH_VERSION: VersionPushOption.Type.ValueType  # 2

    TYPE_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    type: global___VersionPushOption.Type.ValueType
    version: builtins.str
    """only valid if type = PUSH_VERSION"""
    def __init__(
        self,
        *,
        type: global___VersionPushOption.Type.ValueType = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["type", b"type", "version", b"version"]) -> None: ...

global___VersionPushOption = VersionPushOption
