# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .generate_options_request import GenerateOptionsRequest
from .generate_request import GenerateRequest


class GenerateBodyRequest(pydantic.BaseModel):
    deployment_id: typing.Optional[str] = pydantic.Field(
        description=("The ID of the deployment. Must provide either this or deployment_name.\n")
    )
    deployment_name: typing.Optional[str] = pydantic.Field(
        description=("The name of the deployment. Must provide either this or deployment_id.\n")
    )
    requests: typing.List[GenerateRequest] = pydantic.Field(
        description=(
            "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.\n"
        )
    )
    options: typing.Optional[GenerateOptionsRequest] = pydantic.Field(
        description=("Additional configuration that can be used to control what's included in the response.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
