{"version":3,"file":"primer_rjsf_lib_index_js.d9deb4f301f237c06942.js","mappings":"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","sources":["webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/AddButton/AddButton.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/AddButton/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ArrayFieldItemTemplate/ArrayFieldItemTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ArrayFieldItemTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ArrayFieldTemplate/ArrayFieldTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ArrayFieldTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/BaseInputTemplate/BaseInputTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/BaseInputTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/CheckboxWidget/CheckboxWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/CheckboxesWidget/CheckboxesWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/DateTimeWidget/DateTimeWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/DateWidget/DateWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/DescriptionField/DescriptionField.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/DescriptionField/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ErrorList/ErrorList.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ErrorList/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldErrorTemplate/FieldErrorTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldErrorTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldHelpTemplate/FieldHelpTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldHelpTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldTemplate/FieldTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/FieldTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/IconButton/IconButton.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/IconButton/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ObjectFieldTemplate/ObjectFieldTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/ObjectFieldTemplate/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/PrimerForm/PrimerForm.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/PrimerForm/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/RadioWidget/RadioWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/RangeWidget/RangeWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/SelectWidget/SelectWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/SubmitButton/SubmitButton.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/SubmitButton/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Templates/Templates.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Templates/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/TextareaWidget/TextareaWidget.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Theme/Theme.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Theme/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/TitleField/TitleField.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/TitleField/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Widgets/Widgets.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/Widgets/index.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.js","webpack://@datalayer/jupyter-manager/../../primer/rjsf/lib/primer/WrapIfAdditionalTemplate/index.js"],"sourcesContent":["import PrimerForm from './primer/PrimerForm';\nexport { default as Form, generateForm } from './primer/PrimerForm';\nexport { default as Templates, generateTemplates } from './primer/Templates';\nexport { default as Theme, generateTheme } from './primer/Theme';\nexport { default as Widgets, generateWidgets } from './primer/Widgets';\nexport default PrimerForm;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { TranslatableString, } from \"@rjsf/utils\";\nimport { IconButton, Tooltip } from \"@primer/react\";\nimport { PlusIcon } from '@primer/octicons-react';\nexport default function AddButton({ uiSchema, registry, ...props }) {\n    const { translateString } = registry;\n    return (_jsx(Tooltip, { \"aria-label\": translateString(TranslatableString.AddItemButton), children: _jsx(IconButton, { variant: \"primary\", size: \"small\", icon: PlusIcon, \"aria-label\": translateString(TranslatableString.AddItemButton), ...props }) }));\n}\n","export { default } from \"./AddButton\";\nexport * from \"./AddButton\";\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box } from '@primer/react';\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate(props) {\n    const { children, disabled, hasToolbar, hasMoveDown, hasMoveUp, hasRemove, index, onDropIndexClick, onReorderClick, readonly, uiSchema, registry, } = props;\n    const { MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n    const btnStyle = {\n        flex: 1,\n        paddingLeft: 6,\n        paddingRight: 6,\n        fontWeight: \"bold\",\n        minWidth: 0,\n    };\n    return (_jsxs(Box, { sx: { display: 'flex', width: '100%', flexFlow: 'row wrap' }, alignItems: \"center\", children: [_jsx(Box, { sx: { flexBasis: 0, flexGrow: 1, maxWidth: '100%' }, style: { overflow: \"auto\" }, children: _jsx(Box, { mb: 2, p: 2, sx: { borderWidth: 1, borderStyle: 'solid', borderColor: 'border.default', borderRadius: 2 }, children: children }) }), hasToolbar && (_jsxs(Box, { p: 1, children: [(hasMoveUp || hasMoveDown) && (_jsx(MoveUpButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveUp, onClick: onReorderClick(index, index - 1), uiSchema: uiSchema, registry: registry })), (hasMoveUp || hasMoveDown) && (_jsx(MoveDownButton, { style: btnStyle, disabled: disabled || readonly || !hasMoveDown, onClick: onReorderClick(index, index + 1), uiSchema: uiSchema, registry: registry })), hasRemove && (_jsx(RemoveButton, { style: btnStyle, disabled: disabled || readonly, onClick: onDropIndexClick(index), uiSchema: uiSchema, registry: registry }))] }))] }));\n}\n","export { default } from \"./ArrayFieldItemTemplate\";\nexport * from \"./ArrayFieldItemTemplate\";\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box } from \"@primer/react\";\nimport { getTemplate, getUiOptions, } from \"@rjsf/utils\";\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate(props) {\n    const { canAdd, disabled, idSchema, uiSchema, items, onAddClick, readonly, registry, required, schema, title, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const ArrayFieldDescriptionTemplate = getTemplate(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n    const ArrayFieldItemTemplate = getTemplate(\"ArrayFieldItemTemplate\", registry, uiOptions);\n    const ArrayFieldTitleTemplate = getTemplate(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsxs(Box, { p: 3, sx: { display: 'flex', width: '100%', flexFlow: 'row wrap', borderWidth: 1, borderStyle: 'solid', borderColor: 'border.default', borderRadius: 2 }, children: [_jsx(ArrayFieldTitleTemplate, { idSchema: idSchema, title: uiOptions.title || title, schema: schema, uiSchema: uiSchema, required: required, registry: registry }), _jsx(ArrayFieldDescriptionTemplate, { idSchema: idSchema, description: uiOptions.description || schema.description, schema: schema, uiSchema: uiSchema, registry: registry }), _jsxs(Box, { sx: { display: 'flex', width: '100%', flexFlow: 'row wrap' }, children: [items &&\n                        items.map(({ key, ...itemProps }) => (_jsx(ArrayFieldItemTemplate, { ...itemProps }, key))), canAdd && (_jsx(Box, { sx: { display: 'flex', width: '100%', flexFlow: 'row wrap' }, justifyContent: \"flex-end\", children: _jsx(Box, { sx: { flexBasis: 0, flexGrow: 1, maxWidth: '100%' }, children: _jsx(Box, { mt: 2, children: _jsx(AddButton, { className: \"array-item-add\", onClick: onAddClick, disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }) }) }) }))] }, `array-item-list-${idSchema.$id}`)] }));\n}\n","export { default } from \"./ArrayFieldTemplate\";\nexport * from \"./ArrayFieldTemplate\";\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FormControl, TextInput } from \"@primer/react\";\nimport { ariaDescribedByIds, examplesId, getInputProps, } from \"@rjsf/utils\";\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate(props) {\n    const { id, placeholder, required, readonly, disabled, type, label, value, onChange, onBlur, onFocus, autofocus, options, schema, uiSchema, rawErrors = [], formContext, registry, ...textFieldProps } = props;\n    const inputProps = getInputProps(schema, type, options);\n    // Now we need to pull out the step, min, max into an inner `inputProps` for material-ui\n    const { step, min, max, ...rest } = inputProps;\n    const otherProps = {\n        inputProps: {\n            step,\n            min,\n            max,\n            ...(schema.examples ? { list: examplesId(id) } : undefined),\n        },\n        ...rest,\n    };\n    const _onChange = ({ target: { value }, }) => onChange(value === \"\" ? options.emptyValue : value);\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value }, }) => onFocus(id, value);\n    const { schemaUtils } = registry;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n    return (_jsxs(_Fragment, { children: [_jsx(FormControl.Label, { visuallyHidden: !displayLabel, htmlFor: id, children: label || schema.title }), _jsx(TextInput, { id: id, name: id, placeholder: placeholder, autoFocus: autofocus, required: required, disabled: disabled || readonly, ...otherProps, value: value || value === 0 ? value : \"\", validationStatus: rawErrors.length > 0 ? \"error\" : undefined, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, block: true, ...textFieldProps, \"aria-describedby\": ariaDescribedByIds(id, !!schema.examples) }), Array.isArray(schema.examples) && (_jsx(\"datalist\", { id: examplesId(id), children: schema.examples\n                    .concat(schema.default && !schema.examples.includes(schema.default)\n                    ? [schema.default]\n                    : [])\n                    .map((example) => {\n                    return _jsx(\"option\", { value: example }, example);\n                }) }))] }));\n}\n","export { default } from \"./BaseInputTemplate\";\nexport * from \"./BaseInputTemplate\";\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Checkbox, FormControl } from \"@primer/react\";\nimport { ariaDescribedByIds, schemaRequiresTrueValue, } from \"@rjsf/utils\";\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxWidget(props) {\n    const { schema, id, value, disabled, readonly, label, autofocus, onChange, onBlur, onFocus, } = props;\n    // Because an unchecked checkbox will cause html5 validation to fail, only add\n    // the \"required\" attribute if the field value must be \"true\", due to the\n    // \"const\" or \"enum\" keywords\n    const required = schemaRequiresTrueValue(schema);\n    const _onChange = ({ target: { checked } }) => onChange(checked);\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value }, }) => onFocus(id, value);\n    return (_jsxs(FormControl, { id: id, children: [_jsx(Checkbox, { checked: typeof value === \"undefined\" ? false : Boolean(value), required: required, disabled: disabled || readonly, autoFocus: autofocus, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id) }), _jsx(FormControl.Label, { children: label || \"\" })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Checkbox, CheckboxGroup, FormControl } from \"@primer/react\";\nimport { ariaDescribedByIds, enumOptionsDeselectValue, enumOptionsIsSelected, enumOptionsSelectValue, enumOptionsValueForIndex, optionId, } from \"@rjsf/utils\";\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxesWidget({ schema, label, id, disabled, options, value, autofocus, readonly, required, onChange, onBlur, onFocus, }) {\n    const { enumOptions, enumDisabled, inline, emptyValue } = options;\n    const checkboxesValues = Array.isArray(value) ? value : [value];\n    const _onChange = (index) => ({ target: { checked } }) => {\n        if (checked) {\n            onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));\n        }\n        else {\n            onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));\n        }\n    };\n    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onFocus = ({ target: { value }, }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    return (_jsxs(CheckboxGroup, { required: required, children: [_jsx(CheckboxGroup.Label, { children: label || schema.title }), Array.isArray(enumOptions) &&\n                enumOptions.map((option, index) => {\n                    const checked = enumOptionsIsSelected(option.value, checkboxesValues);\n                    const itemDisabled = Array.isArray(enumDisabled) &&\n                        enumDisabled.indexOf(option.value) !== -1;\n                    return (_jsxs(FormControl, { id: optionId(id, index), children: [_jsx(Checkbox, { checked: checked, disabled: disabled || itemDisabled || readonly, autoFocus: autofocus && index === 0, onChange: _onChange(index), onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id) }), _jsx(FormControl.Label, { children: option.label })] }, optionId(id, index)));\n                })] }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate, localToUTC, utcToLocal, } from \"@rjsf/utils\";\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate(\"BaseInputTemplate\", registry, options);\n    const value = utcToLocal(props.value);\n    const onChange = (value) => {\n        props.onChange(localToUTC(value));\n    };\n    return (_jsx(BaseInputTemplate, { type: \"datetime-local\", InputLabelProps: {\n            shrink: true,\n        }, ...props, value: value, onChange: onChange }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getTemplate, } from \"@rjsf/utils\";\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget(props) {\n    const { options, registry } = props;\n    const BaseInputTemplate = getTemplate(\"BaseInputTemplate\", registry, options);\n    return (_jsx(BaseInputTemplate, { type: \"date\", InputLabelProps: {\n            shrink: true,\n        }, ...props }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Text } from \"@primer/react\";\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField(props) {\n    const { id, description } = props;\n    if (description) {\n        return (_jsx(Text, { id: id, as: \"p\", mt: 1, children: description }));\n    }\n    return null;\n}\n","export { default } from \"./DescriptionField\";\nexport * from \"./DescriptionField\";\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box, Flash, Heading } from '@primer/react';\nimport { TranslatableString, } from \"@rjsf/utils\";\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList({ errors, registry }) {\n    const { translateString } = registry;\n    return (_jsx(Box, { mb: 3, sx: { borderWidth: 1, borderStyle: 'solid', borderColor: 'border.default', borderRadius: 2 }, children: _jsxs(Box, { p: 3, children: [_jsx(Heading, { as: \"h3\", sx: { fontSize: 3 }, children: translateString(TranslatableString.ErrorsLabel) }), _jsx(_Fragment, { children: errors.map((error, i) => {\n                        return (_jsx(Flash, { variant: \"danger\", sx: { marginTop: 2 }, children: error.stack }, i));\n                    }) })] }) }));\n}\n","export { default } from \"./ErrorList\";\nexport * from \"./ErrorList\";\n","import { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { Text } from \"@primer/react\";\nimport { errorId, } from \"@rjsf/utils\";\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate(props) {\n    const { errors = [], idSchema } = props;\n    if (errors.length === 0) {\n        return null;\n    }\n    const id = errorId(idSchema);\n    return (_jsx(\"div\", { id: id, children: errors.map((error, i) => (_jsxs(Text, { as: \"p\", mb: 1, sx: { fontSize: '12px', display: 'block', color: 'danger.fg' }, children: [\"\\u2022\", \" \" + error] }, i))) }));\n}\n","export { default } from \"./FieldErrorTemplate\";\nexport * from \"./FieldErrorTemplate\";\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { FormControl } from \"@primer/react\";\nimport { helpId, } from \"@rjsf/utils\";\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate(props) {\n    const { idSchema, help } = props;\n    if (!help) {\n        return null;\n    }\n    const id = helpId(idSchema);\n    return _jsx(FormControl.Caption, { id: id, children: help });\n}\n","export { default } from \"./FieldHelpTemplate\";\nexport * from \"./FieldHelpTemplate\";\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FormControl } from \"@primer/react\";\nimport { getTemplate, getUiOptions, } from \"@rjsf/utils\";\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate(props) {\n    const { id, children, classNames, style, disabled, displayLabel, hidden, label, onDropPropertyClick, onKeyChange, readonly, required, rawErrors = [], errors, help, rawDescription, schema, uiSchema, registry, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const WrapIfAdditionalTemplate = getTemplate(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n    if (hidden) {\n        return _jsx(\"div\", { style: { display: \"none\" }, children: children });\n    }\n    return (_jsx(WrapIfAdditionalTemplate, { classNames: classNames, style: style, disabled: disabled, id: id, label: label, onDropPropertyClick: onDropPropertyClick, onKeyChange: onKeyChange, readonly: readonly, required: required, schema: schema, uiSchema: uiSchema, registry: registry, children: _jsxs(FormControl, { required: required, children: [_jsx(FormControl.Label, { visuallyHidden: true }), children, displayLabel && rawDescription ? (_jsx(FormControl.Caption, { id: id, children: rawDescription })) : null, errors, help] }) }));\n}\n","export { default } from \"./FieldTemplate\";\nexport * from \"./FieldTemplate\";\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { IconButton, Tooltip } from \"@primer/react\";\nimport { CopyIcon, ArrowUpIcon, ArrowDownIcon, TrashIcon } from '@primer/octicons-react';\nimport { TranslatableString, } from \"@rjsf/utils\";\nexport default function PrimerIconButton({ uiSchema, color, title, icon, ...props }) {\n    if (!color)\n        color = \"primary\";\n    return (_jsx(Tooltip, { sx: { p: 1 }, \"aria-label\": color, children: _jsx(IconButton, { variant: color, size: \"small\", icon: icon, onClick: (e) => e.preventDefault(), onSubmit: (e) => e.preventDefault(), \"aria-label\": title, ...props }) }));\n}\nexport function CopyButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(PrimerIconButton, { title: translateString(TranslatableString.CopyButton), ...props, icon: CopyIcon }));\n}\nexport function MoveDownButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(PrimerIconButton, { title: translateString(TranslatableString.MoveDownButton), ...props, icon: ArrowDownIcon }));\n}\nexport function MoveUpButton(props) {\n    const { registry: { translateString }, } = props;\n    return (_jsx(PrimerIconButton, { title: translateString(TranslatableString.MoveUpButton), ...props, icon: ArrowUpIcon }));\n}\nexport function RemoveButton(props) {\n    const { iconType, ...otherProps } = props;\n    const { registry: { translateString }, } = otherProps;\n    return (_jsx(PrimerIconButton, { title: translateString(TranslatableString.RemoveButton), ...otherProps, color: \"danger\", icon: TrashIcon }));\n}\n","export { default } from \"./IconButton\";\nexport * from \"./IconButton\";\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Box } from \"@primer/react\";\nimport { canExpand, descriptionId, getTemplate, getUiOptions, titleId, } from \"@rjsf/utils\";\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate(props) {\n    const { description, title, properties, required, disabled, readonly, uiSchema, idSchema, schema, formData, onAddClick, registry, } = props;\n    const uiOptions = getUiOptions(uiSchema);\n    const TitleFieldTemplate = getTemplate(\"TitleFieldTemplate\", registry, uiOptions);\n    const DescriptionFieldTemplate = getTemplate(\"DescriptionFieldTemplate\", registry, uiOptions);\n    // Button templates are not overridden in the uiSchema\n    const { ButtonTemplates: { AddButton }, } = registry.templates;\n    return (_jsxs(_Fragment, { children: [(uiOptions.title || title) && (_jsx(TitleFieldTemplate, { id: titleId(idSchema), title: title, required: required, schema: schema, uiSchema: uiSchema, registry: registry })), (uiOptions.description || description) && (_jsx(DescriptionFieldTemplate, { id: descriptionId(idSchema), description: uiOptions.description || description, schema: schema, uiSchema: uiSchema, registry: registry })), _jsxs(Box, { sx: { display: 'flex', width: '100%', flexDirection: 'column', flexFlow: 'row wrap' }, style: { marginTop: \"10px\" }, children: [properties.map((element, index) => \n                    // Remove the <Grid> if the inner element is hidden as the <Grid>\n                    // itself would otherwise still take up space.\n                    element.hidden ? (element.content) : (_jsx(Box, { sx: { flexBasis: '100%', flexGrow: 0, maxWidth: '100%' }, mb: 1, children: element.content }, index))), canExpand(schema, uiSchema, formData) && (_jsx(Box, { sx: { display: 'flex', width: '100%', flexFlow: 'row wrap' }, justifyContent: \"flex-end\", children: _jsx(Box, { sx: { flexBasis: 0, flexGrow: 1, maxWidth: '100%' }, children: _jsx(AddButton, { className: \"object-property-expand\", onClick: (e) => {\n                                    e.preventDefault();\n                                    onAddClick(schema)();\n                                }, disabled: disabled || readonly, uiSchema: uiSchema, registry: registry }) }) }))] })] }));\n}\n","export { default } from \"./ObjectFieldTemplate\";\nexport * from \"./ObjectFieldTemplate\";\n","import { withTheme } from \"@rjsf/core\";\nimport { generateTheme } from \"../Theme\";\nexport function generateForm() {\n    return withTheme(generateTheme());\n}\nexport default generateForm();\n","export { default } from \"./PrimerForm\";\nexport * from \"./PrimerForm\";\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { FormControl, Radio, RadioGroup } from \"@primer/react\";\nimport { ariaDescribedByIds, enumOptionsValueForIndex, optionId, } from \"@rjsf/utils\";\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RadioWidget({ id, schema, options, value, required, disabled, readonly, label, onChange, onBlur, onFocus, }) {\n    const { enumOptions, enumDisabled, emptyValue } = options;\n    const _onChange = ({ target: { value } }) => onChange(enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onBlur = ({ target: { value } }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    const _onFocus = ({ target: { value }, }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n    return (_jsxs(RadioGroup, { name: id, required: required, children: [_jsx(RadioGroup.Label, { children: label || schema.title }), _jsx(_Fragment, { children: Array.isArray(enumOptions) &&\n                    enumOptions.map((option, index) => {\n                        const itemDisabled = Array.isArray(enumDisabled) &&\n                            enumDisabled.indexOf(option.value) !== -1;\n                        const radio = (_jsxs(FormControl, { id: optionId(id, index), children: [_jsx(Radio, { value: String(index), onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, \"aria-describedby\": ariaDescribedByIds(id), disabled: disabled || itemDisabled || readonly }, index), _jsx(FormControl.Label, { children: option.label })] }, optionId(id, index)));\n                        return radio;\n                    }) })] }));\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FormControl } from \"@primer/react\";\nimport Slider from \"@mui/material/Slider\";\nimport { ariaDescribedByIds, rangeSpec, } from \"@rjsf/utils\";\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget(props) {\n    const { value, readonly, disabled, onBlur, onFocus, options, schema, onChange, label, id, } = props;\n    const sliderProps = { value, label, id, name: id, ...rangeSpec(schema) };\n    const _onChange = (_, value) => {\n        onChange(value ?? options.emptyValue);\n    };\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value }, }) => onFocus(id, value);\n    return (_jsxs(_Fragment, { children: [_jsx(FormControl.Label, { htmlFor: id, children: label || schema.title }), _jsx(Slider, { disabled: disabled || readonly, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, valueLabelDisplay: \"auto\", ...sliderProps, \"aria-describedby\": ariaDescribedByIds(id) })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TriangleDownIcon } from \"@primer/octicons-react\";\nimport { Button, FormControl, Select, SelectPanel } from \"@primer/react\";\nimport { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex, } from \"@rjsf/utils\";\nimport { useState } from \"react\";\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function SelectWidget({ schema, id, options, label, required, disabled, placeholder, readonly, value, multiple, autofocus, onChange, onBlur, onFocus, rawErrors = [], registry, uiSchema, hideError, formContext, ...selectFieldProps }) {\n    const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n    const [open, setOpen] = useState(false);\n    multiple = typeof multiple === \"undefined\" ? false : !!multiple;\n    const emptyValue = multiple ? [] : \"\";\n    const isEmpty = typeof value === \"undefined\" ||\n        (multiple && value.length < 1) ||\n        (!multiple && value === emptyValue);\n    const items = enumOptions?.map(({ value, label }, i) => {\n        const disabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1;\n        return {\n            text: label,\n            id: i,\n            disabled,\n        };\n    });\n    const _onChange = ({ target: { value }, }) => onChange(enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const _onBlur = ({ target: { value }, }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const _onFocus = ({ target: { value }, }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, optEmptyVal));\n    const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);\n    return (_jsxs(FormControl, { id: id, required: required, children: [_jsx(FormControl.Label, { visuallyHidden: !(label || schema.title), htmlFor: id, children: label || schema.title }), (multiple && Array.isArray(enumOptions)) ? _jsx(SelectPanel, { placeholderText: (label || schema.title) ?? \"\", renderAnchor: ({ children, 'aria-labelledby': ariaLabelledBy, ...anchorProps }) => (_jsx(Button, { trailingAction: TriangleDownIcon, \"aria-labelledby\": ` ${ariaLabelledBy}`, ...anchorProps, onClick: (e) => {\n                        setOpen(!open);\n                        e.preventDefault();\n                    }, children: children || `Select ${label || schema.title}` })), open: open, onOpenChange: setOpen, items: items ?? [], selected: (items ?? []).filter((val, i) => {\n                    return selectedIndexes?.includes(String(i));\n                }), onSelectedChange: (selected) => {\n                    onChange(enumOptionsValueForIndex(selected.map((v) => v.id), enumOptions, optEmptyVal));\n                }, onFilterChange: () => null, showItemDividers: true, overlayProps: { width: 'small' } }) : _jsx(Select, { name: id, value: isEmpty ? emptyValue : selectedIndexes, disabled: disabled || readonly, autoFocus: autofocus, placeholder: label || schema.title, validationStatus: rawErrors.length > 0 ? \"error\" : undefined, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, defaultValue: undefined, ...selectFieldProps, \"aria-describedby\": ariaDescribedByIds(id), children: Array.isArray(enumOptions) &&\n                    enumOptions.map(({ value, label }, i) => {\n                        const disabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1;\n                        return (_jsx(Select.Option, { value: String(i), disabled: disabled, children: label }, i));\n                    }) })] }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box, Button } from \"@primer/react\";\nimport { getSubmitButtonOptions, } from \"@rjsf/utils\";\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton({ uiSchema }) {\n    const { submitText, norender, props: submitButtonProps = {}, } = getSubmitButtonOptions(uiSchema);\n    if (norender) {\n        return null;\n    }\n    return (_jsx(Box, { marginTop: 2, children: _jsx(Button, { type: \"submit\", variant: \"primary\", ...submitButtonProps, children: submitText }) }));\n}\n","export { default } from \"./SubmitButton\";\nexport * from \"./SubmitButton\";\n","import AddButton from \"../AddButton\";\nimport ArrayFieldItemTemplate from \"../ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"../ArrayFieldTemplate\";\nimport BaseInputTemplate from \"../BaseInputTemplate\";\nimport DescriptionField from \"../DescriptionField\";\nimport ErrorList from \"../ErrorList\";\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from \"../IconButton\";\nimport FieldErrorTemplate from \"../FieldErrorTemplate\";\nimport FieldHelpTemplate from \"../FieldHelpTemplate\";\nimport FieldTemplate from \"../FieldTemplate\";\nimport ObjectFieldTemplate from \"../ObjectFieldTemplate\";\nimport SubmitButton from \"../SubmitButton\";\nimport TitleField from \"../TitleField\";\nimport WrapIfAdditionalTemplate from \"../WrapIfAdditionalTemplate\";\nexport function generateTemplates() {\n    return {\n        ArrayFieldItemTemplate,\n        ArrayFieldTemplate,\n        BaseInputTemplate,\n        ButtonTemplates: {\n            AddButton,\n            CopyButton,\n            MoveDownButton,\n            MoveUpButton,\n            RemoveButton,\n            SubmitButton,\n        },\n        DescriptionFieldTemplate: DescriptionField,\n        ErrorListTemplate: ErrorList,\n        FieldErrorTemplate,\n        FieldHelpTemplate,\n        FieldTemplate,\n        ObjectFieldTemplate,\n        TitleFieldTemplate: TitleField,\n        WrapIfAdditionalTemplate,\n    };\n}\nexport default generateTemplates();\n","export { default } from \"./Templates\";\nexport * from \"./Templates\";\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FormControl, Textarea } from \"@primer/react\";\nimport { ariaDescribedByIds, } from \"@rjsf/utils\";\nexport default function TextareaWidget({ id, placeholder, value, label, disabled, autofocus, readonly, onBlur, onFocus, onChange, options, schema, uiSchema, required, rawErrors = [], registry, }) {\n    const { schemaUtils } = registry;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema) &&\n        (!!label || !!schema.title);\n    const _onChange = ({ target: { value } }) => onChange(value === \"\" ? options.emptyValue : value);\n    const _onBlur = ({ target: { value } }) => onBlur(id, value);\n    const _onFocus = ({ target: { value } }) => onFocus(id, value);\n    return (_jsxs(_Fragment, { children: [_jsx(FormControl.Label, { visuallyHidden: !displayLabel, htmlFor: id, children: label || schema.title }), _jsx(Textarea, { id: id, name: id, value: value ?? \"\", placeholder: placeholder, autoFocus: autofocus, required: required, disabled: disabled || readonly, validationStatus: rawErrors.length > 0 ? \"error\" : undefined, onChange: _onChange, onBlur: _onBlur, onFocus: _onFocus, block: true, \"aria-describedby\": ariaDescribedByIds(id) })] }));\n}\n","import { generateTemplates } from \"../Templates\";\nimport { generateWidgets } from \"../Widgets\";\nexport function generateTheme() {\n    return {\n        templates: generateTemplates(),\n        widgets: generateWidgets(),\n    };\n}\nexport default generateTheme();\n","export { default } from \"./Theme\";\nexport * from \"./Theme\";\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Box, Heading } from \"@primer/react\";\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField({ id, title }) {\n    return (_jsx(Box, { id: id, my: 2, children: _jsx(Heading, { as: \"h5\", sx: { fontSize: 1, borderBottom: '1px solid', borderColor: 'border.default', paddingBottom: 1 }, children: title }) }));\n}\n","export { default } from \"./TitleField\";\nexport * from \"./TitleField\";\n","import CheckboxWidget from \"../CheckboxWidget/CheckboxWidget\";\nimport CheckboxesWidget from \"../CheckboxesWidget/CheckboxesWidget\";\nimport DateWidget from \"../DateWidget/DateWidget\";\nimport DateTimeWidget from \"../DateTimeWidget/DateTimeWidget\";\nimport RadioWidget from \"../RadioWidget/RadioWidget\";\nimport RangeWidget from \"../RangeWidget/RangeWidget\";\nimport SelectWidget from \"../SelectWidget/SelectWidget\";\nimport TextareaWidget from \"../TextareaWidget/TextareaWidget\";\nexport function generateWidgets() {\n    return {\n        CheckboxWidget,\n        CheckboxesWidget,\n        DateWidget,\n        DateTimeWidget,\n        RadioWidget,\n        RangeWidget,\n        SelectWidget,\n        TextareaWidget,\n    };\n}\nexport default generateWidgets();\n","export { default } from \"./Widgets\";\nexport * from \"./Widgets\";\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Box, FormControl, TextInput } from \"@primer/react\";\nimport { ADDITIONAL_PROPERTY_FLAG, TranslatableString, } from \"@rjsf/utils\";\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate(props) {\n    const { children, classNames, style, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, required, schema, uiSchema, registry, } = props;\n    const { templates, translateString } = registry;\n    // Button templates are not overridden in the uiSchema\n    const { RemoveButton } = templates.ButtonTemplates;\n    const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n    const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n    const btnStyle = {\n        flex: 1,\n        paddingLeft: 6,\n        paddingRight: 6,\n        fontWeight: \"bold\",\n    };\n    if (!additional) {\n        return (_jsx(\"div\", { className: classNames, style: style, children: children }));\n    }\n    const handleBlur = ({ target }) => onKeyChange(target.value);\n    return (_jsxs(Box, { sx: { display: 'flex', width: '100%', flexFlow: 'row wrap' }, alignItems: \"center\", \n        //spacing={2}\n        className: classNames, style: style, children: [_jsx(Box, { pr: 2, sx: { flexBasis: 0, flexGrow: 1, maxWidth: '100%' }, children: _jsxs(FormControl, { id: `${id}-key`, required: required, children: [_jsx(FormControl.Label, { children: keyLabel }), _jsx(TextInput, { defaultValue: label, disabled: disabled || readonly, name: `${id}-key`, onBlur: !readonly ? handleBlur : undefined, type: \"text\", block: true })] }) }), _jsx(Box, { pr: 2, sx: { flexBasis: 0, flexGrow: 1, maxWidth: '100%' }, children: children }), _jsx(Box, { children: _jsx(RemoveButton, { iconType: \"default\", style: btnStyle, disabled: disabled || readonly, onClick: onDropPropertyClick(label), uiSchema: uiSchema, registry: registry }) })] }, `${id}-key`));\n}\n","export { default } from \"./WrapIfAdditionalTemplate\";\nexport * from \"./WrapIfAdditionalTemplate\";\n"],"names":[],"sourceRoot":""}