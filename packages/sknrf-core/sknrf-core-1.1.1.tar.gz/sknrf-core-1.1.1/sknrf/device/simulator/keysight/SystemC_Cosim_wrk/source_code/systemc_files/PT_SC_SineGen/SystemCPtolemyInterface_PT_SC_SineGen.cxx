/** **********************************************************************

 This file is Generated by ADS "hpeesofmake pt2sys" command	           
 SystemC users are not allowed to make any change in this file.           
 Modifying this file may result in a non-functional Ptolemy-SystemC       
 Cosim. If you need to modify your design interface then modify your      
 .pl file instead.                                                        

 Copyright (c) 2007 Agilent Technologies Inc. All rights reserved.         

***************************************************************************/




#include "SystemCPtolemyInterface_PT_SC_SineGen.hxx"
#include <iostream>


/** Forward declarations of functions used in SystemCPtolemyInterface_PT_SC_SineGen */
extern "C" 
 { 
	 int setSCADS_Connection( char * token, SCADS_Connection ** connection, int numinputs, int numoutputs, int numparameters);
	 int processCommandArgs(int argc, char* argv[], char ***userarg ,char * connectionID);
	 int insertSCADS_Interface(SCADS_InterfaceList * interfacelist, const char *name, const char * type, const char * datatype);
	 SCADS_InterfaceList * newSCADS_InterfaceList(void);
	 void deleteSCADS_Interface(SCADS_InterfaceList * interfacelist);
	 int  checkSCADS_Compatibility(SCADS_InterfaceList * interfacelist, SCADS_Connection * adsConnection);
	 SCADS_Interface * getSCADS_InterfaceByName(char * name, SCADS_Connection * adsConnection, const char * direction );
	 double getSCADS_PortValue(SCADS_Interface * port, int tokennum);
	 double getSCADS_ParamValue(SCADS_Interface * param, int index, SCADS_Connection * adsConnection);
	 void writeSCADS_PortValue(SCADS_Interface * port, double value, int tokennum );
	 int getSCADS_PortNumTokens(SCADS_Interface * port);
	 int processADS_RunCommand(SCADS_Connection * adsConnection);
	 void notifyADS(SCADS_Connection * adsConnection);
	 void sendDataToADS(SCADS_Connection * adsConnection);
	 void stopRequestToADS(SCADS_Connection * adsConnection);
}

/****************************************************/


/** SystemC sc_main function. Please note that it is user's
 responsibility to invoke sc_start(-1) inside "ptolemy_sc_main" */

int sc_main(int argc, char* argv[]) {
	 char  adstoken[128];
	 char ** userarg;
	 int argcount = processCommandArgs( argc,  argv,&userarg, adstoken);
	 SystemCPtolemyInterface_PT_SC_SineGen ptolemyInterface("PtolemyInterface", adstoken);

	 /* SystemC user must write sc_main(-1) inside "ptolemy_sc_main" */

	 ptolemy_sc_main( argcount, userarg, ptolemyInterface );
return 1;
}

/* ***************************************************/


SystemCPtolemyInterface_PT_SC_SineGen::SystemCPtolemyInterface_PT_SC_SineGen(sc_module_name name, char * connectiontoken) : sc_module(name) { 
	 int err = 0;
	 interfacelist = newSCADS_InterfaceList();
	 setSCADS_Connection( connectiontoken, &connection, 0, 1 , 2);


/* Adding output ports in the interface list to check for compatibility with ADS */
	 if (insertSCADS_Interface(interfacelist, "output", "OUTPUT", "DOUBLE")) err = 1;


/* Adding user defined variables in the interface list to check for compatibility with ADS */
	 if (insertSCADS_Interface(interfacelist, "RadiansPerSample", "PARAM", "DOUBLE")) err = 1;
	 if (insertSCADS_Interface(interfacelist, "InitialRadians", "PARAM", "DOUBLE")) err = 1;

/* Testing for SystemC-ADS interface compatibility */

	 if (checkSCADS_Compatibility(interfacelist,  connection) ) err = 1;


/* Initializing output pins. */
	 pin_output = getSCADS_InterfaceByName("output", connection, "OUTPUT" );


/* Initializing user defined variables. */
	 RadiansPerSample = getSCADS_InterfaceByName("RadiansPerSample", connection, "PARAM" );
	 InitialRadians = getSCADS_InterfaceByName("InitialRadians", connection, "PARAM" );

/* Calling go method for simulation runs.*/

	 SC_THREAD(go);
}

/* ************************************************************/

SystemCPtolemyInterface_PT_SC_SineGen::~SystemCPtolemyInterface_PT_SC_SineGen(){
	/* Sending stop request to ADS. */
	 stopRequestToADS(connection); 
	 deleteSCADS_Interface(interfacelist); 
}

/* ************************************************************/

int SystemCPtolemyInterface_PT_SC_SineGen::getIntegerParamValue(SCADS_Interface * param, int index) { 
	  return (int) getSCADS_ParamValue(param, index, connection);
 } 

/* ************************************************************/

double SystemCPtolemyInterface_PT_SC_SineGen::getDoubleParamValue(SCADS_Interface * param, int index) {
	 return (double) getSCADS_ParamValue(param, index, connection);
 } 

/* ************************************************************/

int SystemCPtolemyInterface_PT_SC_SineGen::getParamArraySize(SCADS_Interface * param) { 
	 return getSCADS_PortNumTokens(param);
 }

/* ************************************************************/

void SystemCPtolemyInterface_PT_SC_SineGen::go() {
	 int token;
	 while (1) { 
	 /* Checking that ADS has issued a Continue command or requested a stop. */
		 if(processADS_RunCommand(connection)) { sc_stop(); return;}

	/* Writing outputs to ADS. These are interface inputs. */
		 for( token=0; token < getSCADS_PortNumTokens(pin_output); token++) {
			 writeSCADS_PortValue(pin_output, (double) output.read(), token );
		 }

	/* Sending COTINUES simulation command to ADS */
		 sendDataToADS(connection);

	 } 
 }
