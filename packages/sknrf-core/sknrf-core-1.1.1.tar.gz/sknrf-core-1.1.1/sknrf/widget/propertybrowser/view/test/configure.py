#!/bin/python3
import os
import re
from datetime import datetime
from enum import Enum

import yaml

HEADER = 'qtpropertybrowsertest.h'
SOURCE = 'qtpropertybrowsertest.cpp'


class MinMax(Enum):
    MIN = 1
    MAX = 2


range_str_map = {
    MinMax.MIN: "Minimum",
    MinMax.MAX: "Maximum"
}

locale_definitions = \
"""
    int languageIndex;
    int territoryIndex;
    metaEnumProvider()->localeToIndex(LANGUAGE_LOCALE_TEST_VECTOR, TERRITORY_LOCALE_TEST_VECTOR, &languageIndex, &territoryIndex);
"""

size_policy_definitions = \
"""
    int xPolicyIndex = metaEnumProvider()->sizePolicyToIndex(X_SIZE_POLICY_TEST_VECTOR);
    int yPolicyIndex = metaEnumProvider()->sizePolicyToIndex(Y_SIZE_POLICY_TEST_VECTOR);
"""


class Data(object):

    def __init__(self, cfg, cfg_manager_name, cfg_manager, editor_index=0):
        self.child_names = cfg_manager['child_names']
        self.child_classes = cfg_manager['child_classes']
        self.child_num = int(cfg_manager['child_num'])
        self.editor_factory = cfg_manager['editor_factories'][editor_index]
        self.editor = cfg_manager['editors'][editor_index]
        self.declaration_type = cfg_manager['declaration_type']
        self.argument_type = cfg_manager['argument_type']
        self.spy_count = cfg_manager['spy_count']
        self.spy_cast = cfg_manager['spy_cast']
        self.max_value = cfg_manager['max_value']
        self.test_value = cfg_manager['test_value']
        self.min_value = cfg_manager['min_value']
        self.manager_signal = cfg_manager['manager_signal']
        self.editor_signal = cfg_manager['editor_signal']
        self.range_signal = cfg_manager['range_signal']
        self.editor_setter = cfg_manager['editor_setter']
        self.editor_getter = cfg_manager['editor_getter']
        self.has_check = cfg_manager['has_check']
        self.is_vector = cfg_manager['is_vector']
        self.is_group = cfg_manager['is_group']
        self.is_complex = cfg_manager['is_complex']
        self.is_quarterion = cfg_manager['is_quarterion']
        self.is_enabled = cfg_manager['is_enabled']
        self.child = [None] * self.child_num

        self.manager = cfg_manager_name
        self.manager_instance = camel_case(cfg_manager_name)
        self.editor_factory_instance = camel_case(self.editor_factory)
        self.en_spy_count = self.spy_count > 0
        self.en_spy_value = self.en_spy_count and self.spy_cast is not None


def camel_case(title_case)->str:
    components = re.findall('[A-Z]+[^A-Z]*', title_case)
    camel_case = components[0].lower() + ''.join(components[1:])
    return camel_case


def read_cfg_tree(cfg, cfg_manager_name, cfg_manager, editor_index=0)->Data:
    p = Data(cfg, cfg_manager_name, cfg_manager, editor_index=editor_index)
    for index, (sub_manager_name, sub_manager) in enumerate(zip(cfg_manager['child_names'], cfg_manager['child_classes'])):
        p.child[index] = read_cfg_tree(cfg, sub_manager_name, sub_manager)
    if p.manager == 'QtLocalePropertyManager':
        p.child[0].test_value = 'languageIndex'
        p.child[1].test_value = 'territoryIndex'
    if p.manager == 'QtSizePolicyPropertyManager':
        p.child[0].test_value = 'xPolicyIndex'
        p.child[1].test_value = 'yPolicyIndex'
        p.child[2].test_value = 'X_STRETCH_SIZE_POLICY_TEST_VECTOR'
        p.child[3].test_value = 'Y_STRETCH_SIZE_POLICY_TEST_VECTOR'
    if p.manager == 'QtFlagPropertyManager':
        p.child[0].editor = 'QtBoolEdit'
        p.child[1].editor = 'QtBoolEdit'
        p.child[2].editor = 'QtBoolEdit'
    return p

def add_header() -> str:
    code = \
f"""
//
// Autogenerated by configure.py on {datetime.now().strftime('%m/%d/%Y'):s}.
//
"""
    return code

def add_header_includes() -> str:
    code = \
f"""
#ifndef QTPROPERTYBROWSERTEST_H
#define QTPROPERTYBROWSERTEST_H

#include <iostream>

#include <QObject>
#include <QDialog>
#include <QGridLayout>
#include <QScrollArea>
#include "QtTreePropertyBrowser"
#include "QtGroupBoxPropertyBrowser"
#include "QtButtonPropertyBrowser"
#include "QtGroupPropertyManager"
#include "QtGroupEditorFactory"

#include "qtabstractpropertybrowsertest.h"
"""
    return code


def variable_definition(p) -> str:
    p_value_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    p_editors_size = 1 if p.manager != 'QtBoolPropertyManager' else 3
    p_editors_size = p_editors_size if p.editor != 'QtDoubleEdit' else 3
    code = ''
    code += '' if p.manager != 'QtLocalePropertyManager' else locale_definitions
    code += '' if p.manager != 'QtSizePolicyPropertyManager' else size_policy_definitions
    if not p.is_enabled:
        return code
    if p.is_vector:
        code += \
f"""
    QList<QGroupBox *> boxes = boxPropertyBrowser->findChildren<QGroupBox *>();
    QList<{p.child[0].editor:s} *> editors = boxPropertyBrowser->findChildren<{p.child[0].editor:s} *>();
    QGroupBox *box;
    QGridLayout *layout;
    {p.child[0].editor:s} *editor;
"""
    elif p.is_group:
        code += \
f"""
    QList<QGroupBox *> boxes = boxPropertyBrowser->findChildren<QGroupBox *>();
    QList<{p.child[0].editor:s} *> editors = boxPropertyBrowser->findChildren<{p.child[0].editor:s} *>();
    QGroupBox *box;
    QGridLayout *layout;
"""
        for child_idx in range(p.child_num):
            code += \
f"""
    {p.child[child_idx].editor:s} *editor_{child_idx:d};
"""
    else:
        code += \
f"""
    QList<{p.editor:s} *> editors = boxPropertyBrowser->findChildren<{p.editor:s} *>();
    QCOMPARE(editors.size(), {p_editors_size:d});
    {p.editor:s} *editor = editors[{0 + p_value_idx:d}];
"""
    return code


def set_manager_value(p) -> str:
    p_value_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 2
    code = ''
    if not p.is_enabled:
        return code
    if p.is_vector:
        code = \
f"""
[[ en_spy_count ]]    QSignalSpy spy({p.manager_instance:s}, SIGNAL({p.manager_signal:s}(QtProperty *, {p.argument_type:s})));
    {p.manager_instance:s}->setValue(property, {p.declaration_type:s}({p.child_num}, {p.child[0].declaration_type:s}({p.child[0].test_value:s})));
[[ en_spy_count ]]    QCOMPARE(spy.count(), {p.spy_count:d});
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at(1).{p.spy_cast}(), {p.declaration_type:s}({p.child_num}, {p.test_value:s}));
"""
    else:
        code = \
f"""
[[ en_spy_count ]]    QSignalSpy spy({p.manager_instance:s}, SIGNAL({p.manager_signal:s}(QtProperty *, {p.argument_type:s})));
    {p.manager_instance:s}->setValue(property, {p.declaration_type:s}({p.test_value:s}));
[[ en_spy_count ]]    QCOMPARE(spy.count(), {p.spy_count:d});
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at(1).{p.spy_cast}(), {p.declaration_type:s}({p.test_value:s}));
"""
    return code


def get_manager_value(p) -> str:
    p_value_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 2
    code = ''
    if not p.is_enabled:
        return code
    if p.is_vector:
        code = \
f"""
    {p.declaration_type:s} values = {p.manager_instance:s}->value(property);
    for (auto & value : values) {{
        QCOMPARE(value, {p.child[0].declaration_type:s}({p.child[0].test_value:s}));
    }}
"""
        if p.is_complex:
            code = code.replace(
                f'        QCOMPARE(value, {p.child[0].declaration_type:s}({p.child[0].test_value:s}));',
                f'        QCOMPARE(value.real(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).real());\n' +
                f'        QCOMPARE(value.imag(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).imag());'
            )
        elif p.is_quarterion:
            code = code.replace(
                f'        QCOMPARE(value, {p.child[0].declaration_type:s}({p.child[0].test_value:s}));',
                f'        QCOMPARE(value.scalar(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).scalar());\n' +
                f'        QCOMPARE(value.x(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).x());\n' +
                f'        QCOMPARE(value.y(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).y());\n' +
                f'        QCOMPARE(value.z(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).z());'
            )
    else:
        code = \
f"""
    {p.declaration_type:s} values = {p.manager_instance:s}->value(property);
    QCOMPARE(values, {p.declaration_type:s}({p.test_value:s}));
"""
        if p.is_complex:
            code= code.replace(
                f'    QCOMPARE(values, {p.declaration_type:s}({p.test_value:s}));',
                f'    QCOMPARE(values.real(), {p.declaration_type:s}({p.test_value:s}).real());\n' +
                f'    QCOMPARE(values.imag(), {p.declaration_type:s}({p.test_value:s}).imag());'
            )
        elif p.is_quarterion:
            code= code.replace(
                f'    QCOMPARE(values, {p.declaration_type:s}({p.test_value:s}));',
                f'    QCOMPARE(values.scalar(), {p.declaration_type:s}({p.test_value:s}).scalar());\n' +
                f'    QCOMPARE(values.x(), {p.declaration_type:s}({p.test_value:s}).x());\n' +
                f'    QCOMPARE(values.y(), {p.declaration_type:s}({p.test_value:s}).y());\n' +
                f'    QCOMPARE(values.z(), {p.declaration_type:s}({p.test_value:s}).z());'
            )
    return code


def set_factory_value(p) -> str:
    p_value_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 2
    code = ''
    if not p.is_enabled:
        return code
    if p.is_vector:
        p_set_editor = f'{p.child[0].editor_setter:s}' if p.child[0].editor_setter.endswith(';') \
            else f'editor->{p.child[0].editor_setter:s}({p.child[0].declaration_type}({p.child[0].test_value}));'
        code = \
f"""
    QCOMPARE(editors.size(), {p.child_num});
    for (auto & editor : editors) {{
[[ en_spy_count ]]        QSignalSpy spy(editor, SIGNAL({p.child[0].editor_signal}({p.child[0].argument_type})));
        {p_set_editor:s}
[[ en_spy_count ]]        QCOMPARE(spy.count(), 1);
    }}
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at(1).{p.spy_cast}(), {p.declaration_type:s}({p.child_num}, {p.test_value:s}));
"""
    elif p.is_group:
        code = \
f"""
    QCOMPARE(boxes.size(), 2);
    box = boxes[1];
    layout = qobject_cast<QGridLayout *>(box->layout());
    QVERIFY(layout != nullptr);
    QCOMPARE(layout->rowCount(), {p.child_num + 2});
    QCOMPARE(layout->columnCount(), 6);
"""
        for child_idx in range(p.child_num):
            code += \
f"""
    {{
        editor_{child_idx:d} = qobject_cast<{p.child[child_idx].editor:s} *>(layout->itemAtPosition({child_idx + 2:d}, 1)->widget());
        QVERIFY(editor_{child_idx:d} != nullptr);
        QSignalSpy spy(editor_{child_idx:d}, SIGNAL({p.child[child_idx].editor_signal:s}({p.child[child_idx].argument_type:s})));
        editor_{child_idx:d}->{p.child[child_idx].editor_setter:s}({p.child[child_idx].declaration_type:s}({p.child[child_idx].test_value:s}));
[[ en_spy_count ]]        QCOMPARE(spy.count(), 1);
    }}
"""

    else:
        p_set_editor = f'{p.editor_setter:s}\n' if p.editor_setter.endswith(';') \
            else f'editor->{p.editor_setter:s}({p.declaration_type}({p.test_value}));\n'
        code = \
f"""
[[ en_spy_count ]]    QSignalSpy spy(editor, SIGNAL({p.editor_signal}({p.argument_type})));
    {p_set_editor:s}
[[ en_spy_count ]]    QCOMPARE(spy.count(), 1);
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at(0).{p.spy_cast}(), {p.declaration_type:s}({p.test_value:s}));
"""
    return code


def get_factory_value(p) -> str:
    p_value_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 2
    code = ''
    if not p.is_enabled:
        return code
    if p.is_vector:
        p_get_editor = f'{p.child[0].editor_getter:s}' if p.child[0].editor_getter.endswith(';') \
            else f'QCOMPARE(editor->{p.child[0].editor_getter:s}(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}));'
        code = \
f"""
    QCOMPARE(editors.size(), {p.child_num});
    for (auto & editor : editors) {{
        QCOMPARE(editor->{p.child[0].editor_getter:s}(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}));
    }}
"""
        if p.is_complex:
            code = code.replace(
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}));',
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().real(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).real());\n' +
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().imag(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).imag());'
            )
        elif p.is_quarterion:
            code = code.replace(
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}));',
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().scalar(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).scalar());\n' +
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().x(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).x());\n' +
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().y(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).y());\n' +
                f'        QCOMPARE(editor->{p.child[0].editor_getter:s}().z(), {p.child[0].declaration_type:s}({p.child[0].test_value:s}).z());'
            )
    elif p.is_group:
        code = \
f"""
    QCOMPARE(boxes.size(), 2);
    box = boxes[1];
    layout = qobject_cast<QGridLayout *>(box->layout());
    QVERIFY(layout != nullptr);
    QCOMPARE(layout->rowCount(), {p.child_num + 2});
    QCOMPARE(layout->columnCount(), 6);
"""
        for child_idx in range(p.child_num):
            code += \
f"""
    {{
        editor_{child_idx:d} = qobject_cast<{p.child[child_idx].editor:s} *>(layout->itemAtPosition({child_idx + 2:d}, 1)->widget());
        QVERIFY(editor_{child_idx:d} != nullptr);
        QCOMPARE(editor_{child_idx:d}->{p.child[child_idx].editor_getter:s}(), {p.child[child_idx].declaration_type:s}({p.child[child_idx].test_value:s}));
    }}
"""
    else:
        p_get_editor = f'{p.editor_getter:s}' if p.editor_getter.endswith(';') \
            else f'QCOMPARE(editor->{p.editor_getter:s}(), {p.declaration_type:s}({p.test_value:s}));'
        code = \
f"""
    {p_get_editor:s}
"""
        if p.is_complex:
            code = code.replace(
                f'    QCOMPARE(editor->{p.editor_getter:s}(), {p.declaration_type:s}({p.test_value:s}));',
                f'    QCOMPARE(editor->{p.editor_getter:s}().real(), {p.declaration_type:s}({p.test_value:s}).real());\n' +
                f'    QCOMPARE(editor->{p.editor_getter:s}().imag(), {p.declaration_type:s}({p.test_value:s}).imag());'
            )
        elif p.is_quarterion:
            code = code.replace(
                f'    QCOMPARE(editor->{p.editor_getter:s}(), {p.declaration_type:s}({p.test_value:s}));',
                f'    QCOMPARE(editor->{p.editor_getter:s}().scalar(), {p.declaration_type:s}({p.test_value:s}).scalar());\n' +
                f'    QCOMPARE(editor->{p.editor_getter:s}().x(), {p.declaration_type:s}({p.test_value:s}).x());\n' +
                f'    QCOMPARE(editor->{p.editor_getter:s}().y(), {p.declaration_type:s}({p.test_value:s}).y());\n' +
                f'    QCOMPARE(editor->{p.editor_getter:s}().z(), {p.declaration_type:s}({p.test_value:s}).z());'
            )
    return code


def variable_definition_range(p, min_max) -> str:
    p_range_value = p.min_value if min_max == MinMax.MIN else p.max_value
    p_get_range = 'minimum' if min_max == MinMax.MIN else 'maximum'
    p_set_range = 'setMinimum' if min_max == MinMax.MIN else 'setMaximum'
    p_range_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx += 0 if p.editor != 'QtDoubleEdit' else 1
    p_editors_size = 2 if p.editor != 'QtDoubleEdit' else 3
    code = ''
    if not p.is_enabled:
        return code
    code = \
f"""
    QList<QtDoubleEdit *> editors = boxPropertyBrowser->findChildren<QtDoubleEdit *>();
    QCOMPARE(editors.size(), {max(p_editors_size *p.child_num, p_editors_size):d});
    QtDoubleEdit *editor;
"""
    return code


def set_manager_range(p, min_max) -> str:
    p_range_value = p.min_value if min_max == MinMax.MIN else p.max_value
    p_get_range = 'minimum' if min_max == MinMax.MIN else 'maximum'
    p_set_range = 'setMinimum' if min_max == MinMax.MIN else 'setMaximum'
    p_range_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx += 0 if p.editor != 'QtDoubleEdit' else 1
    p_range_color = 'blue' if min_max == MinMax.MIN else 'red'
    code = ''
    if not p.is_enabled:
        return code
    if p.range_signal is None:
        return code
    if not p.is_vector:
        code = \
f"""
[[ en_spy_count ]]    QSignalSpy spy({p.manager_instance:s}, SIGNAL({p.range_signal}(QtProperty *, {p.argument_type:s}, {p.argument_type:s})));
    {p.manager_instance:s}->{p_set_range:s}(property, {p.declaration_type:s}({p_range_value:s}));
[[ en_spy_count ]]    QCOMPARE(spy.count(), {p.spy_count:d});
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at({1 + p_range_idx}).{p.spy_cast}(), {p.declaration_type:s}({p_range_value:s}));
"""
    if p.is_vector:
        code = \
f"""
[[ en_spy_count ]]    QSignalSpy spy({p.manager_instance:s}, SIGNAL({p.range_signal}(QtProperty *, {p.argument_type:s}, {p.argument_type:s})));
    {p.manager_instance:s}->{p_set_range:s}(property, {p.declaration_type:s}({p.child_num}, {p.child[0].declaration_type:s}({p_range_value:s})));
[[ en_spy_count ]]    QCOMPARE(spy.count(), 1);
[[ en_spy_value ]]    QCOMPARE(spy.takeFirst().at({2 + p_range_idx}).{p.spy_cast}(), {p.declaration_type:s}({p.child_num}, {p_range_value:s}));
"""
    return code


def get_manager_range(p, min_max) -> str:
    p_range_value = p.min_value if min_max == MinMax.MIN else p.max_value
    p_get_range = 'minimum' if min_max == MinMax.MIN else 'maximum'
    p_set_range = 'setMinimum' if min_max == MinMax.MIN else 'setMaximum'
    p_range_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx += 0 if p.editor != 'QtDoubleEdit' else 1
    p_range_color = 'blue' if min_max == MinMax.MIN else 'red'
    code = ''
    if not p.is_enabled:
        return code
    if p.range_signal is None:
        return code
    if not p.is_vector:
        code = \
f"""
    QCOMPARE({p.manager_instance:s}->{p_get_range:s}(property), {p.declaration_type:s}({p_range_value:s}));
    {p.declaration_type:s} values = {p.manager_instance:s}->value(property);
    QCOMPARE(values, {p.declaration_type:s}({p_range_value:s}));
    QVERIFY({p.manager_instance:s}->foreground(property) == QBrush(Qt::{p_range_color:s}, Qt::SolidPattern));
"""
        if p.is_complex:
            code= code.replace(
                f'    QCOMPARE(values, {p.declaration_type:s}({p_range_value:s}));',
                f'    QCOMPARE(std::abs(values), double({p_range_value:s}));'
            )
        elif p.is_quarterion:
            code= code.replace(
                f'    QCOMPARE(values, {p.declaration_type:s}({p_range_value:s}));',
                f'    QCOMPARE(values.length(), float({p_range_value:s}));'
            )

    if p.is_vector:
        code = \
f"""
    QCOMPARE({p.manager_instance:s}->{p_get_range:s}(property), {p.declaration_type:s}({p.child_num}, {p.child[0].declaration_type:s}({p_range_value:s})));
    {p.declaration_type:s} values = {p.manager_instance:s}->value(property);
    for (auto & value : values) {{
        QCOMPARE(value, {p.child[0].declaration_type:s}({p_range_value:s}));
    }}
"""
        if p.is_complex:
            code = code.replace(
                f'        QCOMPARE(value, {p.child[0].declaration_type:s}({p_range_value:s}));',
                f'        QCOMPARE(std::abs(value), double({p_range_value:s}));'
            )
        elif p.is_quarterion:
            code = code.replace(
                f'        QCOMPARE(value, {p.child[0].declaration_type:s}({p_range_value:s}));',
                f'        QCOMPARE(value.length(), float({p_range_value:s}));'
            )
    return code


def set_factory_range(p, min_max) -> str:
    p_range_value = p.min_value if min_max == MinMax.MIN else p.max_value
    p_get_range = 'minimum' if min_max == MinMax.MIN else 'maximum'
    p_set_range = 'setMinimum' if min_max == MinMax.MIN else 'setMaximum'
    p_range_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx += 0 if p.editor != 'QtDoubleEdit' else 1
    p_range_color = 'blue' if min_max == MinMax.MIN else 'red'
    code = ''
    if not p.is_enabled:
        return code
    if p.range_signal is None:
        return code
    if not p.is_vector:
        code = \
f"""
    editor = editors[{p_editors_idx:d}];
    QSignalSpy spy(editor, SIGNAL(valueChanged(double)));
    editor->setValue(double({p_range_value}));
    QCOMPARE(spy.count(), 1);
    QCOMPARE(spy.takeFirst().at(0).toDouble(), double({p_range_value}));
"""
    if p.is_vector:
        code = \
f"""
    for (int idx = {p_editors_idx:d}; idx < editors.size(); idx+=2) {{
        editor = editors[idx];
        QSignalSpy spy(editor, SIGNAL(valueChanged(double)));
        editor->setValue(double({p_range_value}));
        QCOMPARE(spy.count(), 1);
        QCOMPARE(spy.takeFirst().at(0).toDouble(), double({p_range_value}));
    }}
"""
    return code


def get_factory_range(p, min_max) -> str:
    p_range_value = p.min_value if min_max == MinMax.MIN else p.max_value
    p_get_range = 'minimum' if min_max == MinMax.MIN else 'maximum'
    p_set_range = 'setMinimum' if min_max == MinMax.MIN else 'setMaximum'
    p_range_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx = 0 if min_max == MinMax.MIN else 1
    p_editors_idx += 0 if p.editor != 'QtDoubleEdit' else 1
    p_range_color = 'blue' if min_max == MinMax.MIN else 'red'
    code = ''
    if not p.is_enabled:
        return code
    if p.range_signal is None:
        return code
    if not p.is_vector:
        code = \
f"""
    editor = editors[{p_editors_idx:d}];
    QCOMPARE(editor->value(), double({p_range_value:s}));
"""

    if p.is_vector:
        code = \
f"""
    for (int idx = {p_editors_idx:d}; idx < editors.size(); idx+=2) {{
        editor = editors[idx];
        QCOMPARE(editor->value(), double({p_range_value}));
    }}
"""
    return code


def variable_definition_check(p) -> str:
    num_check = 2
    num_check += 0 if p.manager != 'QtBoolPropertyManager' else 1
    num_check += 0 if p.manager != 'QtFlagPropertyManager' else 3
    code = ''
    if not p.is_enabled:
        return code
    code = \
f"""
    QList<QCheckBox *> editors = boxPropertyBrowser->findChildren<QCheckBox *>();
    QCOMPARE(editors.size(), {num_check:d});
    QCheckBox *editor;
"""
    return code


def set_manager_check(p) -> str:
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    code = ''
    if not p.is_enabled:
        return code
    if not p.is_vector:
        code = \
f"""
    QSignalSpy spy({p.manager_instance:s}, SIGNAL(checkChanged(QtProperty *, bool)));
    {p.manager_instance:s}->setCheck(property, true);
[[ en_spy_count ]]    QCOMPARE(spy.count(), {p.spy_count:d});
    QCOMPARE(spy.takeFirst().at(1).toBool(), true);
"""
    if p.is_vector:
        code = \
f"""
    QSignalSpy spy({p.manager_instance:s}, SIGNAL(checkChanged(QtProperty *, bool)));
    {p.manager_instance:s}->setCheck(property, true);
[[ en_spy_count ]]    QCOMPARE(spy.count(), {p.spy_count:d});
    QCOMPARE(spy.takeFirst().at(1).toBool(), true);
"""
    return code


def get_manager_check(p) -> str:
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    code = ''
    if not p.is_enabled:
        return code
    if not p.is_vector:
        code = \
f"""
    QCOMPARE({p.manager_instance:s}->check(property), true);
"""

    if p.is_vector:
        code = \
f"""
    QCOMPARE(qtVectorComplexPropertyManager->check(property), true);
"""
    return code


def set_factory_check(p) -> str:
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    code = ''
    if not p.is_enabled:
        return code
    if not p.is_vector:
        code = \
f"""
    editor = editors[{1 + p_check_idx}];
    QSignalSpy spy(editor, SIGNAL(toggled(bool)));
    editor->setChecked(bool(true));
    QCOMPARE(spy.count(), 1);
    QCOMPARE(spy.takeFirst().at(0).toBool(), bool(true));
"""
    if p.is_vector:
        code = \
f"""
    editor = editors[{1 + p_check_idx}];
    QSignalSpy spy(editor, SIGNAL(toggled(bool)));
    editor->setChecked(bool(true));
    QCOMPARE(spy.count(), 1);
    QCOMPARE(spy.takeFirst().at(0).toBool(), bool(true));
"""
    return code


def get_factory_check(p) -> str:
    p_check_idx = 0 if p.manager != 'QtBoolPropertyManager' else 1
    code = ''
    if not p.is_enabled:
        return code
    if not p.is_vector:
        code = \
f"""
    editor = editors[{1 + p_check_idx}];
    QCOMPARE(editor->isChecked(), bool(true));
"""

    if p.is_vector:
        code = \
f"""
    editor = editors[{1 + p_check_idx}];
    QCOMPARE(editor->isChecked(), true);
"""
    return code


def format_code(p, code) -> str:
    code = code.replace('[[ scalar ]]', '') if not p.is_vector else re.sub(r'\[\[ scalar \]\].*\n', '', code)
    code = code.replace('[[ vector ]]', '') if p.is_vector else re.sub(r'\[\[ vector \]\].*\n', '', code)
    code = code.replace('[[ en_spy_count ]]', '') if p.en_spy_count else re.sub(r'\[\[ en_spy_count \]\].*\n', '', code)
    code = code.replace('[[ en_spy_value ]]', '') if p.en_spy_value else re.sub(r'\[\[ en_spy_value \]\].*\n', '', code)
    return code

dir_path = os.path.dirname(os.path.realpath(__file__))
with open(os.sep.join((dir_path, 'config.yml')), mode='rt') as f:
    cfg = yaml.safe_load(f)

with open(HEADER, mode='wt') as f_h:
    with open(SOURCE, mode='wt') as f_c:

        f_h.write(add_header())
        f_c.write(add_header())
        f_h.write(add_header_includes())
        for include in cfg['includes']:
            f_c.write(f'#include {include:s}\n' if len(include) else '\n')
        f_h.write('\n')
        for define, define_val in cfg['defines'].items():
            f_h.write(f'#define {define:s} {define_val:s}\n' if len(define) else '\n')
        f_h.write('\n')
        f_c.write('\n')
        f_h.write('QT_BEGIN_NAMESPACE\n')
        f_c.write('QT_BEGIN_NAMESPACE\n')
        f_h.write('\n')
        f_c.write('\n')
        f_c.write('Q_GLOBAL_STATIC(QtMetaEnumProvider, metaEnumProvider)\n')
        f_c.write('Q_GLOBAL_STATIC(QtCursorDatabase, cursorDatabase)\n')
        f_c.write('\n')
        for manager in cfg['property_managers']:
            for editor_index, (editor_factory, editor) in enumerate(zip(
                                              cfg['property_managers'][manager]['editor_factories'],
                                              cfg['property_managers'][manager]['editors'])):
                p = read_cfg_tree(cfg, manager, cfg['property_managers'][manager], editor_index=editor_index)

                f_h.write(f'class {manager:s}{editor_factory:s}BaseTest : public QtAbstractManagerEditorTest\n')
                f_h.write(f'{{\n')
                f_h.write(f'Q_OBJECT\n')
                f_h.write(f'\n')
                f_h.write(f'public:\n')
                f_h.write(f'\n')
                f_h.write(f'private slots:\n')
                f_h.write('\n')

                f_h.write(f'    void testSetManagerGetManagerValue();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetManagerValue() {{')
                f_c.write(format_code(p, variable_definition(p)))
                f_c.write(format_code(p, set_manager_value(p)))
                f_c.write(format_code(p, get_manager_value(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetManagerGetFactoryValue();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetFactoryValue() {{')
                f_c.write(format_code(p, variable_definition(p)))
                f_c.write(format_code(p, set_manager_value(p)))
                f_c.write(format_code(p, get_factory_value(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetFactoryGetManagerValue();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetManagerValue() {{')
                f_c.write(format_code(p, variable_definition(p)))
                f_c.write(format_code(p, set_factory_value(p)))
                f_c.write(format_code(p, get_manager_value(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetFactoryGetFactoryValue();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetFactoryValue() {{')
                f_c.write(format_code(p, variable_definition(p)))
                f_c.write(format_code(p, set_factory_value(p)))
                f_c.write(format_code(p, get_factory_value(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                if cfg['property_managers'][manager]['range_signal']:
                    f_h.write(f'    void testSetManagerGetManagerMinimum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetManagerMinimum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, set_manager_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, get_manager_range(p, MinMax.MIN)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetManagerGetFactoryMinimum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetFactoryMinimum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, set_manager_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, get_factory_range(p, MinMax.MIN)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetFactoryGetManagerMinimum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetManagerMinimum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, set_factory_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, get_manager_range(p, MinMax.MIN)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetFactoryGetFactoryMinimum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetFactoryMinimum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, set_factory_range(p, MinMax.MIN)))
                    f_c.write(format_code(p, get_factory_range(p, MinMax.MIN)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetManagerGetManagerMaximum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetManagerMaximum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, set_manager_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, get_manager_range(p, MinMax.MAX)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetManagerGetFactoryMaximum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetFactoryMaximum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, set_manager_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, get_factory_range(p, MinMax.MAX)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetFactoryGetManagerMaximum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetManagerMaximum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, set_factory_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, get_manager_range(p, MinMax.MAX)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                    f_h.write(f'    void testSetFactoryGetFactoryMaximum();\n')
                    f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetFactoryMaximum() {{')
                    f_c.write(format_code(p, variable_definition_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, set_factory_range(p, MinMax.MAX)))
                    f_c.write(format_code(p, get_factory_range(p, MinMax.MAX)))
                    f_c.write(f'}}\n')
                    f_c.write('\n')

                f_h.write(f'    void testSetManagerGetManagerCheck();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetManagerCheck() {{')
                f_c.write(format_code(p, variable_definition_check(p)))
                f_c.write(format_code(p, set_manager_check(p)))
                f_c.write(format_code(p, get_manager_check(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetManagerGetFactoryCheck();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetManagerGetFactoryCheck() {{')
                f_c.write(format_code(p, variable_definition_check(p)))
                f_c.write(format_code(p, set_manager_check(p)))
                f_c.write(format_code(p, get_factory_check(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetFactoryGetManagerCheck();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetManagerCheck() {{')
                f_c.write(format_code(p, variable_definition_check(p)))
                f_c.write(format_code(p, set_factory_check(p)))
                f_c.write(format_code(p, get_manager_check(p)))
                f_c.write(f'}}\n')
                f_c.write('\n')

                f_h.write(f'    void testSetFactoryGetFactoryCheck();\n')
                f_c.write(f'void {manager}{editor_factory}BaseTest::testSetFactoryGetFactoryCheck() {{')
                f_c.write(format_code(p, variable_definition_check(p)))
                f_c.write(format_code(p, set_factory_check(p)))
                f_c.write(format_code(p, get_factory_check(p)))
                f_h.write(f'}};\n')
                f_c.write(f'}}\n')
                f_h.write('\n')
                f_c.write('\n')

        f_h.write('QT_END_NAMESPACE\n')
        f_c.write('QT_END_NAMESPACE\n')

        f_h.write('\n')
        f_h.write('#endif //QTPROPERTYBROWSERTEST_H\n')

