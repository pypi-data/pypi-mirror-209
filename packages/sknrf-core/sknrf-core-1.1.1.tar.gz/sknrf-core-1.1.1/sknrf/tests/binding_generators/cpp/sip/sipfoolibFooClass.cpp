/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPIfoolib.h"

#line 11 "foolib.sip"
#include <fooclass.h>
#line 12 "./sipfoolibFooClass.cpp"

#line 31 "/Users/dylanbespalko/anaconda/envs/py34/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipfoolibFooClass.cpp"


extern "C" {static PyObject *meth_FooClass_Echo(PyObject *, PyObject *);}
static PyObject *meth_FooClass_Echo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString* a0;
        int a0State = 0;
        FooClass *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FooClass, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->Echo(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FooClass, sipName_Echo, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_FooClass(void *, const sipTypeDef *);}
static void *cast_FooClass(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_FooClass)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FooClass(void *, int);}
static void release_FooClass(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<FooClass *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_FooClass(void *, SIP_SSIZE_T, const void *);}
static void assign_FooClass(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<FooClass *>(sipDst)[sipDstIdx] = *reinterpret_cast<const FooClass *>(sipSrc);
}


extern "C" {static void *array_FooClass(SIP_SSIZE_T);}
static void *array_FooClass(SIP_SSIZE_T sipNrElem)
{
    return new FooClass[sipNrElem];
}


extern "C" {static void *copy_FooClass(const void *, SIP_SSIZE_T);}
static void *copy_FooClass(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new FooClass(reinterpret_cast<const FooClass *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FooClass(sipSimpleWrapper *);}
static void dealloc_FooClass(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_FooClass(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_FooClass(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FooClass(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    FooClass *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new FooClass();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const FooClass* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FooClass, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new FooClass(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FooClass[] = {
    {SIP_MLNAME_CAST(sipName_Echo), meth_FooClass_Echo, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_foolib_FooClass = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FooClass,
        {0}
    },
    {
        sipNameNr_FooClass,
        {0, 0, 1},
        1, methods_FooClass,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_FooClass,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FooClass,
    assign_FooClass,
    array_FooClass,
    copy_FooClass,
    release_FooClass,
    cast_FooClass,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
