import json

from src.vcc_kms_client.auth.kms_credentials import KMSCredentials
from src.vcc_kms_client.models import content_type
from src.vcc_kms_client.models.decrypt_with_data_key_pair_request import DecryptWithDataKeyPairRequest
from src.vcc_kms_client.kms_client import KMSClient

f = open("file/security_file.json", "r")
credentals = KMSCredentials(f)
kms = KMSClient(credentals)
# request = DecryptWithDataKeyPairRequest('01GZZWTJYTNRGEQ8YMQQ7H6KMS', '7CqNRImiu2/DdnNoosdYnrdKUQflUy63mhsMaLKzS9VKUJmbd0gQXn3yoKmP4p3DmGMq0WO+fNoMMgWPeDv1xnLEq2F3k/GffYGDMrKleCUjlXPtzkFYjDxWAE695msCUk/E2EMTA8kmFWA9MGbf1H2Op8oUb45SwiKpLwV/NXVMkGj16DlyTbvtwBztu2A8xiAE7BtbmmvL9aot9tONvHr7aNgENyK5zlLLSVUx7BQCL6lR0MARzyms0K2S8H4d1MtxkszLUQQIIc9OiVd4TJO0gLnj24Tp2A04ZyQTSVavkm/WTlK1rAXWM7JA5qV4DeGW7/WJYfaG3AHvCdzZJfadn5akRgk3FQ03ZlHpVS9GboJgf7Qe3RlzlZ/EqHrOypXGoWpQUUwWQs2lTzqWI5Wvfh20uzw2y3o8u6WffRGLamqUGejjLbLReHJc7rIOaYkW2V+g096YpGY67rgKUz9nVs7KyK2yk8xxHxski2yY5PVUw+GwK1aGd9Igqq90HSqr0tx1xKmAbkoieluro2RnYnYy3oEV/E4/ZAQxSBbhhZcZSxTuEeiDmhcwkJcsvijVbWffsMKArqPZ0eI8mppMWN+4GKhKk03G+XFY8wp1wbA6Tq2iAokiCajbVhwpaABQhF89A+yNXzLqqs7ZUUmkV0zfjaKbHNlvobTmDBOTWSkabC24gWn6dk2vZ5VTdn8KqONL4NgXqrqEhJuOyNx7taAufYGjmHRldTAyGkO/QtpRcYauuOI5B4UXBUr6vZRFC0RJBWdCTGaHduqqXZRFhbC/GWeHZ3U1iJAm29PoYrH1HcmD7LaN/dHAuRC95DirSC7C/O3yfG/vUKjz4/rTZPXmoQO7VYuEimFT9wngW7oMEcnaHqRZRpCWfaB2E/79a35nZzz6bISMdc8haDGXf1M3cm+yLTQkbOj53luaFKvrKQqo3dhq1W2lJd3ge4Fx8ID7/0YI3kWyv11LqKZR0m5RNJa/wr4oxs8lF4KI9j6JsFjgQofI4/QR+I7aWMFTcohtEXmZ+tDjB3Y3FXC72sLlujrWmwtXJlCWRi7qCoXncza0tkJKolvJWLZx10iFe8TSx/t6Oro9dwu7GOctAWfsQr6j8qRs3F7ZmvYXnQyjIxXyh8mMDIxc5lt7CozLjZUsmY2nyOFgkYtbLqJ9Qf1E2F/x0Sr47efZVtRz/QtgLHduMeEeZf1RPd5fP4uvvV/s1JOXzY5t0BESYl6tjkpOjmRF0HSKs6QZcWXR8SUufdEXFo9aXwaCQaypuFrV9izxuu/q/+t5MdnbQ2D/39xW3vF/scYeifXfhd3+vITCZ1p7LtGWJLOGCHNU17ZWBDP44g2+P+oQAnWa8sEBuXWtMaIICgNoD/Zu9LmtGvUncjRXbFiKCZPC5fgAafTE6AjNj+5mOAlfmz4IyDtJ1YW/Pr1PypOBDADARKfW4OdLuHSkbLYFIiNffZL8ipGITAX2FDnVLEoro1dXiYhqDnHj+S3VMJcdtS1nlv+W0GS6z0W5ZB3aYBQ2cf1tYaFNo25Ifl/FneSuxE80lwR8iCee5XqCYGwJ7nmJdlGo3QRfLTzaoAUMTWRe6haPN6Q37hHqhIOaYYP3wAwKETgaqepPSikpcjctMEXjO1Qy22DLlvlJJuSP4g+ePA+2csHgHlv1bmwrD3SHD6k0YIvU3ICe8ydgzl9Xy26m/buWuqXvW2gWB3tJ5hkjI/uCZ8YisCAlfT6wCn3KvvIA4jX+lqfYnjW1WfLNxnU4fi2mw9ux9f3xCE9QO2Vnw7zw2NASWl+iY8/a8Vlbo5h4N+/HO99YRt98SZFLL7W8B3vo3bIJzqOIvV7bkigb2Pianv8Qxfqc0xebRsOD72X7fJwwm13ZndH9gZ1GXZxkwlzmCbu+q7VHlJj6RCwtnWXqUA+ifsvcKZyCMHm6gosLW68c5ym123PfY1B5CO3WbRcPfl0DjLKsLFcDvxLa2EDiWtFXnt6Kc0UXrAQqn4LrQx53tlnIbGG0JzMScpaxUSkJYAhXFlwEWVk0npcRsGd2LJCYoN26Ktb37bC8mNMv/QO4Clp+KN2YofHHXumQvEj4kfv1isgFLoUwBKoLQRhBL5GOefYsc3hmkuBRMcykZHW++vpqA/KGHQnN/1DblBvTciqh7fFsbbbq7ekoaIkqIUR3LPMa4duhsYpK3H6BHjMFI+e32BDIy29ueu8Glub1qJWno/EbHIIHeh27KMjtk4H/2fXDet9Xe5O182e2CMkec8ogkx6vWN/VFsO7PCNk8fqNArEy/S44RN+a6HqjjFsqJcIWpXsC3l04cuYQ1UEnphYGVbDRqbwxU1NkCflej5c3elJd8RjD96l49u6SdsIpRiLh2X1ETTxg4uTL13fYelCmf3pwDvRpkdsolIoh2ADev6GJ9xfHqDBYMPwgKHk5lnm0NRdPuMBHRJXBpTvM12RVkLeWlI7v+Qk/DWf82Oq/MSoS0sE9EsctH6qrxQsJMAST7f+nTLZ7KNrOK3M+YJXBt4b8Gjy3Vt+kdn0GSOqMKIxTI4pD9FQDmsXpOy2aH4JcjEQYxHJqQJxk5qAAyil5IeeF0VMaEX4s2LLjs5ZCqaoAkERrjyJYqivvoUzxoVkfPqX0/maHztE/Rtr3yzAvIIBrLZe/saD2xl1wB3wMr/poVR5qn9KF8pnVVl7FWNwEjyf0FR38unCBQrw+FLQ5IPPhPBpDMSLCNCgmHd20W+sHRdxoo+VD2arm3sBQnRggElkuLnAruRJT12D4JzxnTW/KL2VfIDMnVYlxVw1U+pH7xBYuo1OvmemNHqKC1Wq6jNbCyP5MiN3HrLuHiUNT5ryfWPOfr1JA+N2LY8ZnX5BBk3ot+MSI9nYE32wuHpvjN21zadUuU7mCR7GD8ovDpjl+OtQG6XfdbruhONpsG78Jq985EfQv+EWWZFnsMHzFRE0St3ezDWhUC51a4cK+IL0yaBt/C78cy2z4Laq6rHKQj9eyXh0Kz+TrD5+coXsHu/vk6RL0Ywd/ot9b7OKBHv+/OlMT/gjvmS666yDQgQgT8dXNHScbPDHxyZIpxAETIw2X9iOfqRoKU71iQGpW7llnICn72n99bLPmPY3PCTPP5H1UILJDhP3U+sC9nUC793I8qLFLUWFqBNID+csovZrmVRoaq0hXct9sQg9d55lytJ6eJE6W1Qssta06s9NjlpRNxoOEjAHuBoFzAlWb/Z66QIf7dHahsHpk9ogkL8D9A4taj6TvEMmbE5D7hfX9t2L41grzW2iPqnnezNtFdctxtXgdGoR1Zeg3MRZ8+MfhTslNtFvhMfXuFg/INCxbB4ddZBs/DluHJAYOrBBzaE9knRpHyh65GtdrX4qpsUnuu6we5XVofePs1EPKDoIhm7+JJItUS7A/NA==', content_type.SINGLE_STRING)
# request = DecryptWithDataKeyPairRequest('01GZZWTJYTNRGEQ8YMQQ7H6KMS', ['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'], content_type.LIST_STRING)
x = {
  "name": "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"
}
y = json.dumps(x)
request = DecryptWithDataKeyPairRequest('01GZZWTJYTNRGEQ8YMQQ7H6KMS', [y], content_type.LIST_JSON_OBJECT)
print(kms.decrypt_with_data_key_pair(request))