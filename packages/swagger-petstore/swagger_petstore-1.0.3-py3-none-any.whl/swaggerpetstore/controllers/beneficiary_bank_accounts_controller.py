# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.beneficiary_bank_account_get_response import BeneficiaryBankAccountGetResponse
from swaggerpetstore.models.bank_account_expected_settlement_response import BankAccountExpectedSettlementResponse
from swaggerpetstore.models.beneficiary_bank_account_validate_response import BeneficiaryBankAccountValidateResponse
from swaggerpetstore.models.beneficiary_bank_account_list_response import BeneficiaryBankAccountListResponse
from swaggerpetstore.models.users_bank_id import UsersBankID
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class BeneficiaryBankAccountsController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(BeneficiaryBankAccountsController, self).__init__(config)

    def get_beneficiary_bank_account(self,
                                     user_id,
                                     bank_id,
                                     id_type=None):
        """Does a GET request to /users/{userID}/bank-accounts/{bankID}.

        Gets a Beneficiary Bank Account.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            bank_id (string): Unique ID for the beneficiary bank account. It
                can be either earthport id or merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            BeneficiaryBankAccountGetResponse: Response from the API. Bank
                Accounts succesfully returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts/{bankID}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('bankID')
                            .value(bank_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BeneficiaryBankAccountGetResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def deactivate_beneficiary_bank_account(self,
                                            user_id,
                                            bank_id,
                                            id_type=None):
        """Does a DELETE request to /users/{userID}/bank-accounts/{bankID}.

        Deactivates a Beneficiary Bank Account. You will not be able to send a
        payment to a deactivated bank account.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            bank_id (string): Unique ID for the beneficiary bank account. It
                can be either earthport id or merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            void: Response from the API. Bank Accounts succesfully
                deactivated.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts/{bankID}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('bankID')
                            .value(bank_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .auth(Single('global'))
        ).execute()

    def get_expected_settlement_date(self,
                                     body):
        """Does a POST request to /bank-accounts/expected-settlement.

        Validates a new beneficiary bank account and gets the expected
        settlement date.

        Args:
            body (BankAccountExpectedSettlementRequest): The beneficiary bank
                account.

        Returns:
            BankAccountExpectedSettlementResponse: Response from the API. Bank
                Account Valid.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank-accounts/expected-settlement')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BankAccountExpectedSettlementResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def validate_beneficiary_bank_account(self,
                                          body):
        """Does a POST request to /bank-accounts.

        Vaidates a new beneficiary bank account against a User.

        Args:
            body (BeneficiaryBankAccountValidateRequest): The beneficiary bank
                account.

        Returns:
            BeneficiaryBankAccountValidateResponse: Response from the API.
                Bank Account Valid.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/bank-accounts')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BeneficiaryBankAccountValidateResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def list_bank_accounts(self,
                           user_id,
                           id_type=None,
                           offset=None,
                           page_size=None):
        """Does a GET request to /users/{userID}/bank-accounts.

        Gets all Beneficiary Bank Accounts registered by this User.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.
            offset (int, optional): This is used for pagination of resultsets.
                0-based starting offset of the page with respect to the entire
                resultset.
            page_size (int, optional): This is used for pagination of
                resultsets. Number of items per page to return. If empty the
                maximum allowable (25) number of records will be returned.

        Returns:
            BeneficiaryBankAccountListResponse: Response from the API. Bank
                Accounts succesfully returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BeneficiaryBankAccountListResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def create_beneficiary_bank_account(self,
                                        user_id,
                                        body,
                                        id_type=None):
        """Does a POST request to /users/{userID}/bank-accounts.

        Registers a new beneficiary bank account against this User.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            body (BeneficiaryBankAccountCreateRequest): The beneficiary bank
                account.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            UsersBankID: Response from the API. Bank Account succesfully
                created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsersBankID.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
