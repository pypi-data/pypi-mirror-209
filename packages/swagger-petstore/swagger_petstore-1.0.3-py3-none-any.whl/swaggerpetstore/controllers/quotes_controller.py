# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.quotes_bulk_response import QuotesBulkResponse
from swaggerpetstore.models.quotes_indicative_response import QuotesIndicativeResponse
from swaggerpetstore.models.quotes_response import QuotesResponse
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class QuotesController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(QuotesController, self).__init__(config)

    def create_bulk_fx_quote(self,
                             body):
        """Does a POST request to /quotes/bulk.

        Requests a bulk FX quote and creates a ticket for the quote. This
        ticket is honoured for a specified duration which is limited by Rate
        Expiry Date/Time.

        Args:
            body (list of QuotesBulkRequest): Bulk FX Quote Request.

        Returns:
            QuotesBulkResponse: Response from the API. Quote succesfully
                retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/quotes/bulk')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(QuotesBulkResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def get_indicative_fx_quote(self,
                                body):
        """Does a POST request to /quotes/indicative.

        Requests an  indicative quote. There are two exclusive scenarios when
        requesting a rate between two currencies:
        1. The caller provides a sell amount and is given the corresponding
        buy amount. In this case, the caller needs to populate the sellAmount
        and buyCurrency input parameters.
        2. The caller provides a buy amount and is given the corresponding
        sell amount. In this case, the caller needs to populate the buyAmount
        and sellCurrency input parameters.

        Args:
            body (QuotesIndicativeRequest): The request details to get an
                indicative FX quote. You must either supply the sellAmount and
                buyCurrency. Or you must supply the buyAmount and
                sellCurrency.

        Returns:
            QuotesIndicativeResponse: Response from the API. Quote succesfully
                retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/quotes/indicative')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(QuotesIndicativeResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def create_fx_quote(self,
                        user_id,
                        bank_id,
                        body,
                        id_type=None):
        """Does a POST request to /users/{userID}/bank-accounts/{bankID}/quotes.

        Requests an FX quote and creates a ticket for the quote. This ticket
        is honoured for a specified duration which is limited by Rate Expiry
        Date/Time. There are two exclusive scenarios when requesting a rate
        between two currencies:
        1. The caller provides a sell amount and is given the corresponding
        buy amount. In this case, the caller needs to populate the sellAmount
        and buyCurrency input parameters.
        2. The caller provides a buy amount and is given the corresponding
        sell amount. In this case, the caller needs to populate the buyAmount
        and sellCurrency input parameters.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            bank_id (string): Unique ID for the beneficiary bank account. It
                can be either earthport id or merchant id.
            body (QuotesRequest): The request details to get an FX quote and
                receive a unique Ticket ID with a time to live.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            QuotesResponse: Response from the API. Quote succesfully
                retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts/{bankID}/quotes')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('bankID')
                            .value(bank_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(QuotesResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
