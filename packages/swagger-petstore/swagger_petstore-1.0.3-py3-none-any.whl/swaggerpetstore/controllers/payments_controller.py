# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.payments_create_response import PaymentsCreateResponse
from swaggerpetstore.models.payments_registered_beneficiary_create_response import PaymentsRegisteredBeneficiaryCreateResponse
from swaggerpetstore.models.get_payout_required_data_response import GetPayoutRequiredDataResponse
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class PaymentsController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(PaymentsController, self).__init__(config)

    def create_payment(self,
                       body):
        """Does a POST request to /payments.

        This service creates a payment without the need to pre-register either
        the User or Beneficiary Bank Account.
        Creates a User (or updates an existing User), adds a Beneficiary Bank
        Account to this user and creates a new payment.

        Args:
            body (PaymentsCreateRequest): The payment request.

        Returns:
            PaymentsCreateResponse: Response from the API. Payment succesfully
                created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/payments')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentsCreateResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def create_payment_registered_beneficiary(self,
                                              user_id,
                                              bank_id,
                                              body,
                                              id_type=None):
        """Does a POST request to /users/{userID}/bank-accounts/{bankID}/payments.

        Creates a new payment for a previously registered beneficiary bank
        account (and user).

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            bank_id (string): Unique ID for the beneficiary bank account. It
                can be either earthport id or merchant id.
            body (Payment): Payment details
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            PaymentsRegisteredBeneficiaryCreateResponse: Response from the
                API. Payment succesfully created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts/{bankID}/payments')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('bankID')
                            .value(bank_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PaymentsRegisteredBeneficiaryCreateResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def get_purposeof_payment_metadata(self,
                                       user_id,
                                       bank_id,
                                       id_type=None,
                                       amount=None,
                                       currency=None,
                                       payer_type=None,
                                       service_level=None):
        """Does a GET request to /users/{userID}/bank-accounts/{bankID}/payments/meta.

        Returns Purpose of Payment metadata for a payment to a beneficiary
        bank account which has previously been registered.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            bank_id (string): Unique ID for the beneficiary bank account. It
                can be either earthport id or merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.
            amount (int, optional): Decimal amount value. The number of
                decimal places is defined by the currency.
            currency (string, optional): Valid supported ISO 4217 3-character
                currency code.
            payer_type (string, optional): The type of Payer. Allowed values
                are authenticatedCaller, managedMerchant and user.
            service_level (string, optional): Service Level. Allowed values
                are standard and express.

        Returns:
            GetPayoutRequiredDataResponse: Response from the API. Payment
                metadata succesfully returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/bank-accounts/{bankID}/payments/meta')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('bankID')
                            .value(bank_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .query_param(Parameter()
                         .key('amount')
                         .value(amount))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .query_param(Parameter()
                         .key('payerType')
                         .value(payer_type))
            .query_param(Parameter()
                         .key('serviceLevel')
                         .value(service_level))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetPayoutRequiredDataResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def get_metadatafor_payment_request(self,
                                        country_code,
                                        currency_code,
                                        beneficiary_identity_entity_type=None,
                                        locale=None,
                                        service_level=None):
        """Does a GET request to /payments/meta.

        Returns the required fields for creating the payment request.

        Args:
            country_code (string): Valid supported ISO 3166 2-character
                country code.
            currency_code (string): Valid supported ISO 4217 3-character
                currency code.
            beneficiary_identity_entity_type (IdentityEntityEnum, optional):
                Type of beneficiary identity.
            locale (string, optional): Localization String e.g. en_GB, en_US.
            service_level (string, optional): Service Level. Allowed values
                are standard and express.

        Returns:
            GetPayoutRequiredDataResponse: Response from the API. Payment
                metadata succesfully returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/payments/meta')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('countryCode')
                         .value(country_code))
            .query_param(Parameter()
                         .key('currencyCode')
                         .value(currency_code))
            .query_param(Parameter()
                         .key('beneficiaryIdentityEntityType')
                         .value(beneficiary_identity_entity_type))
            .query_param(Parameter()
                         .key('locale')
                         .value(locale))
            .query_param(Parameter()
                         .key('serviceLevel')
                         .value(service_level))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetPayoutRequiredDataResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
