# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.financial_transaction import FinancialTransaction
from swaggerpetstore.models.transactions_cancel_response import TransactionsCancelResponse
from swaggerpetstore.models.transactions_search_response import TransactionsSearchResponse
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class TransactionsController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(TransactionsController, self).__init__(config)

    def get_transaction(self,
                        transaction_id,
                        id_type=None,
                        managed_merchant_name=None):
        """Does a GET request to /transactions/{transactionID}.

        Retrieves a single Transaction based on TransactionID.

        Args:
            transaction_id (string): A unique transaction ID. You can use
                either Earthport transaction ID or merchant transaction ID.
                Note when using the merchant transaction ID you must set the
                query parameter idType as merchant.
            id_type (IdTypeEnum, optional): This allows you to specify either
                your own unique identifier (UID) or Earthport generated unique
                identifier (UID). Earthport's generated UID will be used by
                default.
            managed_merchant_name (string, optional): The name of the managed
                merchant who created or owns the transaction. Do not supply if
                you either do not have any managed merchants configured or the
                managed merchant did not create this transaction. If this is
                not supplied and the managed merchant did create this
                transaction then you will receive a "Validation failure:
                Financial Transaction not found" error, even though the
                transaction does exist.

        Returns:
            FinancialTransaction: Response from the API. Transaction
                succesfully retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transactions/{transactionID}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('transactionID')
                            .value(transaction_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .query_param(Parameter()
                         .key('managedMerchantName')
                         .value(managed_merchant_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FinancialTransaction.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def cancel_transaction(self,
                           transaction_id,
                           id_type=None,
                           merchant_cancellation_req_id=None):
        """Does a DELETE request to /transactions/{transactionID}.

        Cancels a Transaction (payout instruction) which is in a cancellable
        state in Earthportâ€™s Payments Service.
        ### Payout Status Table
        | Payout External Status| Cancellable|  
        | ----------|----------- |                            
        INSUFFICIENT_MERCHANT_LIQUIDITY|YES|
        PENDING_PROCESSING|YES |
        IN_PROCESS|NO |
        PAYMENT_SENT|NO|
        WITH_PARTNER_BANK|NO|
        REJECTED_PAYOUT|NO| 
        PAYMENT_SENT|NO|
        RETURNED_PAYOUT|NO|
        ### Responses
        1.  **"Pending Cancellation"** Response 
        This is returned when the payout to be cancelled status is "Held in
        Compliance"
        The payout will be set to a pending cancellation status, which will
        changed to rejected later on. Either by a compliance rejection or by
        the automatic cancellation rejection. (Example shown in the 'Example
        Response' section)
        2. **"Cancelled"** : Successful Cancellation Response
        This is returned when the transaction is in a cancellable status.
         
        3. **"Validation error"** Response
        There are 2 types of validation error responses:  
        *"Payout not cancellable"* : This is the equivalent to an unsuccessful
        Cancellation Response and it is returned when the payout was not in a
        cancellable status ( EP Error code = 11031) 
        *"Payout not found"*: This occurs when the system can not locate the
        payment to be cancelled or the transaction Ids not matching original
        transaction

        Args:
            transaction_id (string): A unique transaction ID. You can use
                earthport transaction id or merchant transaction reference.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.
            merchant_cancellation_req_id (string, optional): The ID provided
                by the merchant that will uniquely identify this cancellation
                request.

        Returns:
            TransactionsCancelResponse: Response from the API. Transaction
                succesfully Cancelled.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transactions/{transactionID}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('transactionID')
                            .value(transaction_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .query_param(Parameter()
                         .key('merchantCancellationReqID')
                         .value(merchant_cancellation_req_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionsCancelResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def search_transactions(self,
                            start_date_time,
                            end_date_time,
                            sort_order,
                            sort_fields,
                            managed_merchant_name=None,
                            currency=None,
                            amount_from=None,
                            amount_to=None,
                            merchant_transaction_id=None,
                            transaction_type=None,
                            transaction_status_code=None,
                            offset=None,
                            page_size=None):
        """Does a GET request to /transactions.

        This allows you to search for payments where you don't know the UID
        (paymentID) and also allows you to search for other financial
        transaction types on your account such as refunds, deposits (See
        Transaction Type). 
        This API supports sorting by "Timestamp" or "Amount" in a particular
        sort order (ASC or DESC) as well as paging across multiple pages of
        results.

        Args:
            start_date_time (string): Start Date Time in
                yyyyy-MM-ddTHH:mm:ssZ. This is in UTC and allows you to search
                against the acceptedDate of the transaction.
            end_date_time (string): End Date Time in yyyyy-MM-ddTHH:mm:ssZ.
                This is in UTC and allows you to search against the
                acceptedDate of the transaction.
            sort_order (SortOrderEnum): Sort in either ascending or descending
                order.
            sort_fields (list of string): Sort Fields. It can be either
                Timestamp or Amount or a combination of both. If you want to
                sort the results based on both the sort fields please provide
                a comma seperated list of sort fields, i.e. Timestamp,Amount
            managed_merchant_name (string, optional): Managed merchant whose
                transactions will be returned  when being called by the
                contracting merchant.
            currency (string, optional): Transaction currency (valid supported
                ISO 4217 3-character currency code).
            amount_from (float, optional): Decimal amount value. The number of
                decimal places is defined by the currency.This is the lower
                limit of transaction value (inclusive).
            amount_to (float, optional): Decimal amount value. The number of
                decimal places is defined by the currency.This is the upper
                limit of transaction value (inclusive).
            merchant_transaction_id (string, optional): Merchant assigned
                transaction ID (transaction reference).
            transaction_type (TransactionTypeEnum, optional): Type of
                financial transactions. Please provide one of the following
                transaction types (if none specified all types are searched):
                Payout, Refund, User Deposit, Merchant Liquidity Deposit,
                Journal, Merchant Liquidity Movement, Earthport Merchant
                Liquidity Transfer
            transaction_status_code (int, optional): Status Code of the
                Transactions.
            offset (int, optional): This is used for pagination of resultsets.
                0-based starting offset of the page with respect to the entire
                resultset.
            page_size (int, optional): This is used for pagination of
                resultsets. Number of items per page to return. If empty the
                maximum allowable (25) number of records will be returned.

        Returns:
            TransactionsSearchResponse: Response from the API. Transaction
                succesfully retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/transactions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('startDateTime')
                         .value(start_date_time))
            .query_param(Parameter()
                         .key('endDateTime')
                         .value(end_date_time))
            .query_param(Parameter()
                         .key('sortOrder')
                         .value(sort_order))
            .query_param(Parameter()
                         .key('sortFields')
                         .value(sort_fields))
            .query_param(Parameter()
                         .key('managedMerchantName')
                         .value(managed_merchant_name))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .query_param(Parameter()
                         .key('amountFrom')
                         .value(amount_from))
            .query_param(Parameter()
                         .key('amountTo')
                         .value(amount_to))
            .query_param(Parameter()
                         .key('merchantTransactionID')
                         .value(merchant_transaction_id))
            .query_param(Parameter()
                         .key('transactionType')
                         .value(transaction_type))
            .query_param(Parameter()
                         .key('transactionStatusCode')
                         .value(transaction_status_code))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionsSearchResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
