# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.users_get_response import UsersGetResponse
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class UsersController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(UsersController, self).__init__(config)

    def validate_user(self,
                      beneficiary_country_code,
                      body,
                      action=None):
        """Does a POST request to /users.

        Use this API to validate the payer identity details of the User.

        Args:
            beneficiary_country_code (string): Valid supported ISO 3166
                2-character country code for the payer being validated. This
                is the country, which the payer needs to send a payment to.
            body (UsersCreateorValidateRequest): The user details to be
                validated.
            action (Action1Enum, optional): This determines that the supplied
                User should be validated only and not persisted.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('beneficiaryCountryCode')
                         .value(beneficiary_country_code))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('action')
                         .value(action))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('global'))
        ).execute()

    def disable_user(self,
                     user_id,
                     id_type=None):
        """Does a DELETE request to /users/{userID}.

        Disables a User - you cannot register new bank accounts against a
        disabled User or create payments for a disabled User.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            void: Response from the API. User succesfully disabled.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .auth(Single('global'))
        ).execute()

    def update_user(self,
                    user_id,
                    body,
                    id_type=None):
        """Does a PUT request to /users/{userID}.

        Updates a User/Payer. This API only supports updating the identity
        details of a User/Payer.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            body (UsersUpdateRequest): The user details to be updated.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            void: Response from the API. User succesfully updated.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('global'))
        ).execute()

    def get_user(self,
                 user_id,
                 id_type=None):
        """Does a GET request to /users/{userID}.

        Get a User/Payer. This API only returns the identity details of a
        User/Payer.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            UsersGetResponse: Response from the API. User succesfully
                returned.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UsersGetResponse.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()

    def add_deposit_reference(self,
                              user_id,
                              body,
                              id_type=None):
        """Does a POST request to /users/{userID}/deposit-references.

        Creates a deposit reference for a User. This deposit reference is
        unique and each merchant has their own prefix.

        Args:
            user_id (string): The payer's unique id. It can be either VAN or
                merchant id.
            body (UsersDepositReferencesRequest): Request object to add a
                deposit reference.
            id_type (IdTypeEnum, optional): idType for the path parameters.
                This allows you to specify either your own UIDs or Earthport
                generated UIDs. The Earthport generated UIDs will be used by
                default.

        Returns:
            void: Response from the API. Deposit Reference Created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/users/{userID}/deposit-references')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('userID')
                            .value(user_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('body')
                        .value(body))
            .query_param(Parameter()
                         .key('idType')
                         .value(id_type))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('global'))
        ).execute()
