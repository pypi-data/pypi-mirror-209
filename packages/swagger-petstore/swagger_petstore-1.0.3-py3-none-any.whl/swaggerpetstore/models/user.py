# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.identity import Identity
from swaggerpetstore.models.user_id_merchant import UserIDMerchant


class User(object):

    """Implementation of the 'User' model.

    A user Object.

    Attributes:
        user_id (UserIDMerchant): This group consists of merchant user
            identifier only.
        managed_merchant_name (string): Refers to the descriptive name used to
            identify a given merchant. It is unique across Earthport
            merchants.
        account_currency (string): Valid supported ISO 4217 3-character
            currency code. This is used to set a default account currency.
        payer_identity (Identity): Represents the identity of an individual or
            legal entity. You must specify one of either an individual
            identity or legal entity identity or unstructured identity.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_id": 'userID',
        "account_currency": 'accountCurrency',
        "managed_merchant_name": 'managedMerchantName',
        "payer_identity": 'payerIdentity'
    }

    _optionals = [
        'managed_merchant_name',
        'payer_identity',
    ]

    def __init__(self,
                 user_id=None,
                 account_currency=None,
                 managed_merchant_name=APIHelper.SKIP,
                 payer_identity=APIHelper.SKIP):
        """Constructor for the User class"""

        # Initialize members of the class
        self.user_id = user_id 
        if managed_merchant_name is not APIHelper.SKIP:
            self.managed_merchant_name = managed_merchant_name 
        self.account_currency = account_currency 
        if payer_identity is not APIHelper.SKIP:
            self.payer_identity = payer_identity 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        user_id = UserIDMerchant.from_dictionary(dictionary.get('userID')) if dictionary.get('userID') else None
        account_currency = dictionary.get("accountCurrency") if dictionary.get("accountCurrency") else None
        managed_merchant_name = dictionary.get("managedMerchantName") if dictionary.get("managedMerchantName") else APIHelper.SKIP
        payer_identity = Identity.from_dictionary(dictionary.get('payerIdentity')) if 'payerIdentity' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(user_id,
                   account_currency,
                   managed_merchant_name,
                   payer_identity)
