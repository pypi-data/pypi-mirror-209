# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.monetary_value import MonetaryValue


class BeneficiaryAmountInformation(object):

    """Implementation of the 'BeneficiaryAmountInformation' model.

    Used to specify the beneficiary amount and the payout currency.

    Attributes:
        beneficiary_amount (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        payout_currency (string): Valid supported ISO 4217 3-character
            currency code.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary_amount": 'beneficiaryAmount',
        "payout_currency": 'payoutCurrency'
    }

    _optionals = [
        'beneficiary_amount',
        'payout_currency',
    ]

    def __init__(self,
                 beneficiary_amount=APIHelper.SKIP,
                 payout_currency=APIHelper.SKIP):
        """Constructor for the BeneficiaryAmountInformation class"""

        # Initialize members of the class
        if beneficiary_amount is not APIHelper.SKIP:
            self.beneficiary_amount = beneficiary_amount 
        if payout_currency is not APIHelper.SKIP:
            self.payout_currency = payout_currency 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beneficiary_amount = MonetaryValue.from_dictionary(dictionary.get('beneficiaryAmount')) if 'beneficiaryAmount' in dictionary.keys() else APIHelper.SKIP
        payout_currency = dictionary.get("payoutCurrency") if dictionary.get("payoutCurrency") else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary_amount,
                   payout_currency)
