# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.beneficiary_bank_account_list_items import BeneficiaryBankAccountListItems


class BeneficiaryBankAccountField(object):

    """Implementation of the 'BeneficiaryBankAccountField' model.

    Each beneficiaryBankAccountField would normally be displayed in the UI
    from left to right based on the tabOrder attribute. The
    beneficiaryBankAccountField element contains the attributes described
    below:-

    Attributes:
        description (string): Suggested roll-over or help text description to
            assist users.
        display_size (int): A suggested field size to display.
        input_type (BeneficiaryBankAccountFieldInputEnum): Supported input
            types for a bank registration UI.
        locale (string): The localisation setting of this particular record.
        max_size (int): Suggested client side syntactic validation rule.
        parameter_name (string): The name of the corresponding Earthport
            parameter to use when calling addBeneficiaryBankAcount.
        separator (string): The separator to display following (to the right
            hand side) this field, usually '-' or '/'.
        sub_title (string): If present contains a sub-label to be displayed
            with the field.
        tab_order (int): Indicates the ordering of this field in the UI.
        value (string): The current value of this field, populated by the
            getBeneficiaryBankAccount service.
        list_items (BeneficiaryBankAccountListItems): The
            beneficiaryBankAccountField contains optional listItem
            sub-elements. The listItem sub-elements would normally be present
            where the inputType attribute is 'list'.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "display_size": 'displaySize',
        "input_type": 'inputType',
        "locale": 'locale',
        "max_size": 'maxSize',
        "parameter_name": 'parameterName',
        "separator": 'separator',
        "sub_title": 'subTitle',
        "tab_order": 'tabOrder',
        "value": 'value',
        "list_items": 'listItems'
    }

    _optionals = [
        'value',
        'list_items',
    ]

    def __init__(self,
                 description=None,
                 display_size=None,
                 input_type=None,
                 locale=None,
                 max_size=None,
                 parameter_name=None,
                 separator=None,
                 sub_title=None,
                 tab_order=None,
                 value=APIHelper.SKIP,
                 list_items=APIHelper.SKIP):
        """Constructor for the BeneficiaryBankAccountField class"""

        # Initialize members of the class
        self.description = description 
        self.display_size = display_size 
        self.input_type = input_type 
        self.locale = locale 
        self.max_size = max_size 
        self.parameter_name = parameter_name 
        self.separator = separator 
        self.sub_title = sub_title 
        self.tab_order = tab_order 
        if value is not APIHelper.SKIP:
            self.value = value 
        if list_items is not APIHelper.SKIP:
            self.list_items = list_items 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        description = dictionary.get("description") if dictionary.get("description") else None
        display_size = dictionary.get("displaySize") if dictionary.get("displaySize") else None
        input_type = dictionary.get("inputType") if dictionary.get("inputType") else None
        locale = dictionary.get("locale") if dictionary.get("locale") else None
        max_size = dictionary.get("maxSize") if dictionary.get("maxSize") else None
        parameter_name = dictionary.get("parameterName") if dictionary.get("parameterName") else None
        separator = dictionary.get("separator") if dictionary.get("separator") else None
        sub_title = dictionary.get("subTitle") if dictionary.get("subTitle") else None
        tab_order = dictionary.get("tabOrder") if dictionary.get("tabOrder") else None
        value = dictionary.get("value") if dictionary.get("value") else APIHelper.SKIP
        list_items = BeneficiaryBankAccountListItems.from_dictionary(dictionary.get('listItems')) if 'listItems' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   display_size,
                   input_type,
                   locale,
                   max_size,
                   parameter_name,
                   separator,
                   sub_title,
                   tab_order,
                   value,
                   list_items)
