# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.models.beneficiary_bank_account_fields_list import BeneficiaryBankAccountFieldsList


class BeneficiaryBankAccountGroup(object):

    """Implementation of the 'BeneficiaryBankAccountGroup' model.

    This type defines a bank account data group. Each group is normally
    represented as a row on the UI.

    Attributes:
        group_label (string): The UI text to display as a name for this row.
        mandatory (bool): Indicates whether values must be supplied in the
            fields of this group.
        beneficiary_bank_account_fields_list
            (BeneficiaryBankAccountFieldsList): This type defines a bank
            account field.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "group_label": 'groupLabel',
        "mandatory": 'mandatory',
        "beneficiary_bank_account_fields_list": 'beneficiaryBankAccountFieldsList'
    }

    def __init__(self,
                 group_label=None,
                 mandatory=None,
                 beneficiary_bank_account_fields_list=None):
        """Constructor for the BeneficiaryBankAccountGroup class"""

        # Initialize members of the class
        self.group_label = group_label 
        self.mandatory = mandatory 
        self.beneficiary_bank_account_fields_list = beneficiary_bank_account_fields_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        group_label = dictionary.get("groupLabel") if dictionary.get("groupLabel") else None
        mandatory = dictionary.get("mandatory") if "mandatory" in dictionary.keys() else None
        beneficiary_bank_account_fields_list = BeneficiaryBankAccountFieldsList.from_dictionary(dictionary.get('beneficiaryBankAccountFieldsList')) if dictionary.get('beneficiaryBankAccountFieldsList') else None
        # Return an object of this model
        return cls(group_label,
                   mandatory,
                   beneficiary_bank_account_fields_list)
