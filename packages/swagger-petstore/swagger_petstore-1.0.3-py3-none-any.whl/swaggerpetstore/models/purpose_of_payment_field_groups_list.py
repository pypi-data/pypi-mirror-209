# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.purpose_of_payment_code import PurposeOfPaymentCode


class PurposeOfPaymentFieldGroupsList(object):

    """Implementation of the 'PurposeOfPaymentFieldGroupsList' model.

    This group contains all configuration information for Purpose of Payment
    options. The 'mandatory' attribute indicates whether provision of Purpose
    of Payment data is required for the Payout to be accepted.

    Attributes:
        mandatory (bool): Whether the purpose of payment is mandatory.
        purpose_of_payment_code (list of PurposeOfPaymentCode): List of valid
            purpose of payment codes.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mandatory": 'mandatory',
        "purpose_of_payment_code": 'purposeOfPaymentCode'
    }

    _optionals = [
        'purpose_of_payment_code',
    ]

    def __init__(self,
                 mandatory=None,
                 purpose_of_payment_code=APIHelper.SKIP):
        """Constructor for the PurposeOfPaymentFieldGroupsList class"""

        # Initialize members of the class
        self.mandatory = mandatory 
        if purpose_of_payment_code is not APIHelper.SKIP:
            self.purpose_of_payment_code = purpose_of_payment_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mandatory = dictionary.get("mandatory") if "mandatory" in dictionary.keys() else None
        purpose_of_payment_code = None
        if dictionary.get('purposeOfPaymentCode') is not None:
            purpose_of_payment_code = [PurposeOfPaymentCode.from_dictionary(x) for x in dictionary.get('purposeOfPaymentCode')]
        else:
            purpose_of_payment_code = APIHelper.SKIP
        # Return an object of this model
        return cls(mandatory,
                   purpose_of_payment_code)
