# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.beneficiary_identity_list_items import BeneficiaryIdentityListItems


class BeneficiaryIdentityField(object):

    """Implementation of the 'BeneficiaryIdentityField' model.

    Each BeneficiaryIdentityField would normally be displayed in the UI from
    left to right based on the tabOrder attribute. The
    BeneficiaryIdentityField element contains the attributes described
    below:-

    Attributes:
        description (string): Suggested roll-over or help text description to
            assist users.
        display_size (long|int): A suggested field size to display.
        element_name (string): The name of the element in the
            addBeneficiaryBankAccount request document for the corresponding
            field.
        input_type (BeneficiaryIdentityFieldInputEnum): Supported input types
            for a beneficiary identity UI.
        locale (string): The localisation setting of this particular record.
        mandatory (bool): Indicates whether the field is mandatory.
        max_size (long|int): Suggested client side syntactic validation rule.
        parameter_name (string): The name of the corresponding Earthport
            parameter to use when calling addBeneficiaryBankAcount.
        separator (string): The separator to display following (to the right
            hand side) this field, usually '-' or '/'.
        sub_title (string): If present contains a sub-label to be displayed
            with the field.
        tab_order (long|int): Indicates the ordering of this field in the UI.
        value_regexp (string): The regexp for the value of this field.
        list_items (BeneficiaryIdentityListItems): The
            beneficiaryIdentityField contains optional listItem sub-elements.
            The listItem sub-elements would normally be present where the
            inputType attribute is 'list'.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "display_size": 'displaySize',
        "element_name": 'elementName',
        "input_type": 'inputType',
        "locale": 'locale',
        "mandatory": 'mandatory',
        "max_size": 'maxSize',
        "sub_title": 'subTitle',
        "tab_order": 'tabOrder',
        "parameter_name": 'parameterName',
        "separator": 'separator',
        "value_regexp": 'valueRegexp',
        "list_items": 'listItems'
    }

    _optionals = [
        'parameter_name',
        'separator',
        'value_regexp',
        'list_items',
    ]

    def __init__(self,
                 description=None,
                 display_size=None,
                 element_name=None,
                 input_type=None,
                 locale=None,
                 mandatory=None,
                 max_size=None,
                 sub_title=None,
                 tab_order=None,
                 parameter_name=APIHelper.SKIP,
                 separator=APIHelper.SKIP,
                 value_regexp=APIHelper.SKIP,
                 list_items=APIHelper.SKIP):
        """Constructor for the BeneficiaryIdentityField class"""

        # Initialize members of the class
        self.description = description 
        self.display_size = display_size 
        self.element_name = element_name 
        self.input_type = input_type 
        self.locale = locale 
        self.mandatory = mandatory 
        self.max_size = max_size 
        if parameter_name is not APIHelper.SKIP:
            self.parameter_name = parameter_name 
        if separator is not APIHelper.SKIP:
            self.separator = separator 
        self.sub_title = sub_title 
        self.tab_order = tab_order 
        if value_regexp is not APIHelper.SKIP:
            self.value_regexp = value_regexp 
        if list_items is not APIHelper.SKIP:
            self.list_items = list_items 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        description = dictionary.get("description") if dictionary.get("description") else None
        display_size = dictionary.get("displaySize") if dictionary.get("displaySize") else None
        element_name = dictionary.get("elementName") if dictionary.get("elementName") else None
        input_type = dictionary.get("inputType") if dictionary.get("inputType") else None
        locale = dictionary.get("locale") if dictionary.get("locale") else None
        mandatory = dictionary.get("mandatory") if "mandatory" in dictionary.keys() else None
        max_size = dictionary.get("maxSize") if dictionary.get("maxSize") else None
        sub_title = dictionary.get("subTitle") if dictionary.get("subTitle") else None
        tab_order = dictionary.get("tabOrder") if dictionary.get("tabOrder") else None
        parameter_name = dictionary.get("parameterName") if dictionary.get("parameterName") else APIHelper.SKIP
        separator = dictionary.get("separator") if dictionary.get("separator") else APIHelper.SKIP
        value_regexp = dictionary.get("valueRegexp") if dictionary.get("valueRegexp") else APIHelper.SKIP
        list_items = BeneficiaryIdentityListItems.from_dictionary(dictionary.get('listItems')) if 'listItems' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(description,
                   display_size,
                   element_name,
                   input_type,
                   locale,
                   mandatory,
                   max_size,
                   sub_title,
                   tab_order,
                   parameter_name,
                   separator,
                   value_regexp,
                   list_items)
