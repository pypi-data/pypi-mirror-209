# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.beneficiary_amount_information import BeneficiaryAmountInformation
from swaggerpetstore.models.monetary_value import MonetaryValue
from swaggerpetstore.models.payout_details import PayoutDetails
from swaggerpetstore.models.transaction_hold import TransactionHold
from swaggerpetstore.models.transaction_id_merchant import TransactionIDMerchant


class Payment(object):

    """Implementation of the 'Payment' model.

    This request is used to request a payout to a given beneficiary bank
    account. This message is used by Earthport merchants who are requesting
    payouts on behalf of a customer.

    Attributes:
        transaction_id (TransactionIDMerchant): This group consists of
            merchant transaction reference only.
        payout_request_amount (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        beneficiary_amount_information (BeneficiaryAmountInformation): Used to
            specify the beneficiary amount and the payout currency.
        service_level (ServiceLevelEnum): Supported service levels for a
            payout request (standard or express).
        beneficiary_statement_narrative (string): Narrative text to be
            displayed on the beneficiary bank accounts statement, where the
            banking network supports this.
        fx_ticket_id (int): Optional FxTicket Id to be used. This is a unique
            reference sent back to the Merchant as a response to getFXQuote as
            UID. If specified, the system will honour the rate specified in
            the FX Ticket for the Payment. The Earthport System will validate
            the specified FX Ticket including TTL on the Ticket. If the TTL
            has expired, the Earthport system will throw an error.
        requested_fx (RequestedFXEnum): Method of FX that is requested by the
            merchant and for which EPS2 will attempt to use in order to settle
            the payout request.
        payer_type (PayerTypeEnum): The type of Payer making the payment. This
            determines which identity details are used as the payer identity.
        payout_type (string): Reserved for future use. Will be used to state
            the Payout type.
        payout_details (list of PayoutDetails): Additional information related
            to the payment such as Purpose of Payment
        transaction_hold (TransactionHold): Parameter to prevent transactions
            from being processed until the desired time has been reached. Note
            releaseDateTime must be in UTC format.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transaction_id": 'transactionID',
        "payout_request_amount": 'payoutRequestAmount',
        "beneficiary_amount_information": 'beneficiaryAmountInformation',
        "service_level": 'serviceLevel',
        "beneficiary_statement_narrative": 'beneficiaryStatementNarrative',
        "fx_ticket_id": 'fxTicketID',
        "requested_fx": 'requestedFX',
        "payer_type": 'payerType',
        "payout_type": 'payoutType',
        "payout_details": 'payoutDetails',
        "transaction_hold": 'transactionHold'
    }

    _optionals = [
        'payout_request_amount',
        'beneficiary_amount_information',
        'service_level',
        'beneficiary_statement_narrative',
        'fx_ticket_id',
        'requested_fx',
        'payer_type',
        'payout_type',
        'payout_details',
        'transaction_hold',
    ]

    def __init__(self,
                 transaction_id=None,
                 payout_request_amount=APIHelper.SKIP,
                 beneficiary_amount_information=APIHelper.SKIP,
                 service_level=APIHelper.SKIP,
                 beneficiary_statement_narrative=APIHelper.SKIP,
                 fx_ticket_id=APIHelper.SKIP,
                 requested_fx=APIHelper.SKIP,
                 payer_type=APIHelper.SKIP,
                 payout_type=APIHelper.SKIP,
                 payout_details=APIHelper.SKIP,
                 transaction_hold=APIHelper.SKIP):
        """Constructor for the Payment class"""

        # Initialize members of the class
        self.transaction_id = transaction_id 
        if payout_request_amount is not APIHelper.SKIP:
            self.payout_request_amount = payout_request_amount 
        if beneficiary_amount_information is not APIHelper.SKIP:
            self.beneficiary_amount_information = beneficiary_amount_information 
        if service_level is not APIHelper.SKIP:
            self.service_level = service_level 
        if beneficiary_statement_narrative is not APIHelper.SKIP:
            self.beneficiary_statement_narrative = beneficiary_statement_narrative 
        if fx_ticket_id is not APIHelper.SKIP:
            self.fx_ticket_id = fx_ticket_id 
        if requested_fx is not APIHelper.SKIP:
            self.requested_fx = requested_fx 
        if payer_type is not APIHelper.SKIP:
            self.payer_type = payer_type 
        if payout_type is not APIHelper.SKIP:
            self.payout_type = payout_type 
        if payout_details is not APIHelper.SKIP:
            self.payout_details = payout_details 
        if transaction_hold is not APIHelper.SKIP:
            self.transaction_hold = transaction_hold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transaction_id = TransactionIDMerchant.from_dictionary(dictionary.get('transactionID')) if dictionary.get('transactionID') else None
        payout_request_amount = MonetaryValue.from_dictionary(dictionary.get('payoutRequestAmount')) if 'payoutRequestAmount' in dictionary.keys() else APIHelper.SKIP
        beneficiary_amount_information = BeneficiaryAmountInformation.from_dictionary(dictionary.get('beneficiaryAmountInformation')) if 'beneficiaryAmountInformation' in dictionary.keys() else APIHelper.SKIP
        service_level = dictionary.get("serviceLevel") if dictionary.get("serviceLevel") else APIHelper.SKIP
        beneficiary_statement_narrative = dictionary.get("beneficiaryStatementNarrative") if dictionary.get("beneficiaryStatementNarrative") else APIHelper.SKIP
        fx_ticket_id = dictionary.get("fxTicketID") if dictionary.get("fxTicketID") else APIHelper.SKIP
        requested_fx = dictionary.get("requestedFX") if dictionary.get("requestedFX") else APIHelper.SKIP
        payer_type = dictionary.get("payerType") if dictionary.get("payerType") else APIHelper.SKIP
        payout_type = dictionary.get("payoutType") if dictionary.get("payoutType") else APIHelper.SKIP
        payout_details = None
        if dictionary.get('payoutDetails') is not None:
            payout_details = [PayoutDetails.from_dictionary(x) for x in dictionary.get('payoutDetails')]
        else:
            payout_details = APIHelper.SKIP
        transaction_hold = TransactionHold.from_dictionary(dictionary.get('transactionHold')) if 'transactionHold' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(transaction_id,
                   payout_request_amount,
                   beneficiary_amount_information,
                   service_level,
                   beneficiary_statement_narrative,
                   fx_ticket_id,
                   requested_fx,
                   payer_type,
                   payout_type,
                   payout_details,
                   transaction_hold)
