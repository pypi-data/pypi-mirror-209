# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.additional_field_with_validator import AdditionalFieldWithValidator
from swaggerpetstore.models.additional_field_with_values import AdditionalFieldWithValues


class AdditionalFieldsList(object):

    """Implementation of the 'AdditionalFieldsList' model.

    This optionally contains a list of additional data that may be required if
    the associated purpose of payment is selected. This section will list a
    selection of 'additionalFieldWithValues' and/or
    'additionalFieldWithValidator':   'additionalFieldWithValues' indicates
    the additional key that can be provided in the payoutDetails section of a
    payout request along with an indication of whether this additional payout
    details entry is mandatory. 'additionalFieldWithValues' will also be
    followed by a series of 'fieldValues' that list the valid codes and
    descriptions that can be submitted as the value of the payoutDetail entry
    in the payout request. 'additionalFieldWithValidator' indicates an
    additional key that can be provided in the payoutDetails section of a
    payout request, along with an indication of whether this additional payout
    details is mandatory 'additionalFieldWithValidator' also includes the
    validation expression that will be applied to the value. This is a regular
    expression, and may be blank if no validation will be applied.

    Attributes:
        additional_field_with_validator (list of
            AdditionalFieldWithValidator): Indicates an additional key that
            can be provided in the payoutDetails section of a payout request,
            along with an indication of whether this additional payout details
            is mandatory.
        additional_field_with_values (list of AdditionalFieldWithValues):
            Indicates the additional key that can be provided in the
            payoutDetails section of a payout request along with an indication
            of whether this additional payout details entry is mandatory.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "additional_field_with_validator": 'additionalFieldWithValidator',
        "additional_field_with_values": 'additionalFieldWithValues'
    }

    _optionals = [
        'additional_field_with_validator',
        'additional_field_with_values',
    ]

    def __init__(self,
                 additional_field_with_validator=APIHelper.SKIP,
                 additional_field_with_values=APIHelper.SKIP):
        """Constructor for the AdditionalFieldsList class"""

        # Initialize members of the class
        if additional_field_with_validator is not APIHelper.SKIP:
            self.additional_field_with_validator = additional_field_with_validator 
        if additional_field_with_values is not APIHelper.SKIP:
            self.additional_field_with_values = additional_field_with_values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        additional_field_with_validator = None
        if dictionary.get('additionalFieldWithValidator') is not None:
            additional_field_with_validator = [AdditionalFieldWithValidator.from_dictionary(x) for x in dictionary.get('additionalFieldWithValidator')]
        else:
            additional_field_with_validator = APIHelper.SKIP
        additional_field_with_values = None
        if dictionary.get('additionalFieldWithValues') is not None:
            additional_field_with_values = [AdditionalFieldWithValues.from_dictionary(x) for x in dictionary.get('additionalFieldWithValues')]
        else:
            additional_field_with_values = APIHelper.SKIP
        # Return an object of this model
        return cls(additional_field_with_validator,
                   additional_field_with_values)
