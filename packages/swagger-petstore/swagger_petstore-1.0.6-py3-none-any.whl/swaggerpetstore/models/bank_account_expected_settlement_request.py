# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.bank_account_details import BankAccountDetails
from swaggerpetstore.models.identity import Identity
from swaggerpetstore.models.payout_details import PayoutDetails
from swaggerpetstore.models.transaction_hold import TransactionHold


class BankAccountExpectedSettlementRequest(object):

    """Implementation of the 'BankAccountExpectedSettlementRequest' model.

    This request can be used to determine whether a beneficiary bank account
    is deemed valid, and to obtain an expected settlement date for any	payout
    to this bank.

    Attributes:
        beneficiary_identity (Identity): Represents the identity of an
            individual or legal entity. You must specify one of either an
            individual identity or legal entity identity or unstructured
            identity.
        description (string): Type which defines a beneficiary bank account
            description. Each bank account must be given a description
            therefore this is a mandatory component.
        country_code (string): The territory in which this bank account is
            domiciled is mandatory and must be supplied in the 'countryCode'
            field as a valid supported ISO 3166 2-character country code.
        currency_code (string): The currency held in this bank account may
            optionally be supplied in the 'currencyCode' field as a valid
            supported ISO 4217 3-character currency code. If not supplied it
            will assume the default currency of the 'countryCode' parameter.
        bank_account_details (list of BankAccountDetails): This is a group of
            sub-elements which collectively identify both the bank and the
            account within the bank.
        payout_request_currency (string): Valid supported ISO 4217 3-character
            currency code of the payout request. Will default to the
            beneficiary bank currency if not supplied.
        anticipated_payout_request_time (string): A valid ISO 8601
            timestamp(YYYY-MM-DDThh:mm:ss.sssÂ±hh:mm). This represents the
            timestamp when the payout is anticipated to be requested. This
            cannot be a time in the past. Recommendation is to supply the
            dateTime in UTC timezone or +0000 offset. Non zero offset times
            will be converted to UTC by the service. In this case, the client
            should ensure the supplied time is that intended for the supplied
            timezone or offset, and be aware this dateTime will be converted
            to UTC prior to expected settlement date calculation.
        payer_identity (Identity): Represents the identity of an individual or
            legal entity. You must specify one of either an individual
            identity or legal entity identity or unstructured identity.
        service_level (ServiceLevelEnum): Supported service levels for a
            payout request (standard or express).
        payer_type (PayerTypeEnum): The type of Payer making the payment. This
            determines which identity details are used as the payer identity.
        payout_details (list of PayoutDetails): PayoutDetails are used for
            key-value pairs of details supported by payouts. Refer to client
            guides for detailed list of valid keys.
        transaction_hold (TransactionHold): Parameter to prevent transactions
            from being processed until the desired time has been reached. Note
            releaseDateTime must be in UTC format.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary_identity": 'beneficiaryIdentity',
        "description": 'description',
        "country_code": 'countryCode',
        "bank_account_details": 'bankAccountDetails',
        "anticipated_payout_request_time": 'anticipatedPayoutRequestTime',
        "payer_identity": 'payerIdentity',
        "currency_code": 'currencyCode',
        "payout_request_currency": 'payoutRequestCurrency',
        "service_level": 'serviceLevel',
        "payer_type": 'payerType',
        "payout_details": 'payoutDetails',
        "transaction_hold": 'transactionHold'
    }

    _optionals = [
        'currency_code',
        'payout_request_currency',
        'service_level',
        'payer_type',
        'payout_details',
        'transaction_hold',
    ]

    def __init__(self,
                 beneficiary_identity=None,
                 description=None,
                 country_code=None,
                 bank_account_details=None,
                 anticipated_payout_request_time=None,
                 payer_identity=None,
                 currency_code=APIHelper.SKIP,
                 payout_request_currency=APIHelper.SKIP,
                 service_level=APIHelper.SKIP,
                 payer_type=APIHelper.SKIP,
                 payout_details=APIHelper.SKIP,
                 transaction_hold=APIHelper.SKIP):
        """Constructor for the BankAccountExpectedSettlementRequest class"""

        # Initialize members of the class
        self.beneficiary_identity = beneficiary_identity 
        self.description = description 
        self.country_code = country_code 
        if currency_code is not APIHelper.SKIP:
            self.currency_code = currency_code 
        self.bank_account_details = bank_account_details 
        if payout_request_currency is not APIHelper.SKIP:
            self.payout_request_currency = payout_request_currency 
        self.anticipated_payout_request_time = anticipated_payout_request_time 
        self.payer_identity = payer_identity 
        if service_level is not APIHelper.SKIP:
            self.service_level = service_level 
        if payer_type is not APIHelper.SKIP:
            self.payer_type = payer_type 
        if payout_details is not APIHelper.SKIP:
            self.payout_details = payout_details 
        if transaction_hold is not APIHelper.SKIP:
            self.transaction_hold = transaction_hold 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beneficiary_identity = Identity.from_dictionary(dictionary.get('beneficiaryIdentity')) if dictionary.get('beneficiaryIdentity') else None
        description = dictionary.get("description") if dictionary.get("description") else None
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else None
        bank_account_details = None
        if dictionary.get('bankAccountDetails') is not None:
            bank_account_details = [BankAccountDetails.from_dictionary(x) for x in dictionary.get('bankAccountDetails')]
        anticipated_payout_request_time = dictionary.get("anticipatedPayoutRequestTime") if dictionary.get("anticipatedPayoutRequestTime") else None
        payer_identity = Identity.from_dictionary(dictionary.get('payerIdentity')) if dictionary.get('payerIdentity') else None
        currency_code = dictionary.get("currencyCode") if dictionary.get("currencyCode") else APIHelper.SKIP
        payout_request_currency = dictionary.get("payoutRequestCurrency") if dictionary.get("payoutRequestCurrency") else APIHelper.SKIP
        service_level = dictionary.get("serviceLevel") if dictionary.get("serviceLevel") else APIHelper.SKIP
        payer_type = dictionary.get("payerType") if dictionary.get("payerType") else APIHelper.SKIP
        payout_details = None
        if dictionary.get('payoutDetails') is not None:
            payout_details = [PayoutDetails.from_dictionary(x) for x in dictionary.get('payoutDetails')]
        else:
            payout_details = APIHelper.SKIP
        transaction_hold = TransactionHold.from_dictionary(dictionary.get('transactionHold')) if 'transactionHold' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary_identity,
                   description,
                   country_code,
                   bank_account_details,
                   anticipated_payout_request_time,
                   payer_identity,
                   currency_code,
                   payout_request_currency,
                   service_level,
                   payer_type,
                   payout_details,
                   transaction_hold)
