# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class FinancialTransactionStatus(object):

    """Implementation of the 'FinancialTransactionStatus' model.

    Additional important status information for specific transaction types.
    | code  | description  | Meaning |
    | ----  | -----------  | ------- |
    | 100   | Pending Processing | This is the initial state when Earthport
    receives your payment instruction. |
    | 200   | In Process         | This means the payment is being processed
    by Earthport's payment platform. |
    | 300   | With Partner Bank  | Earthport has sent the payment onto our
    partner bank and we are awaiting an ACK. |
    | 400   | Payment Sent       | Earthport has sent the payment to the
    partner bank and has received an ACK.|
    | 500   | Rejected Payout    | A payment can be rejected when uploading to
    the partner bank's system or by Earthport's compliance team. |
    | 600   | Returned Payout    | A returned payment is when Earthport
    processes the payment, sends on to our partner bank to be settled in the
    destination ACH but the beneficiary bank returns the payment. This could
    be becasue the bank account is closed.|
    | 700   | Insufficient Merchant liquidity | If you (Earthport's client) is
    holding insufficient liquidity funding with Earthport, then payments will
    appear in this state. Earthport will not reject or fail the payments and
    will wait for you to provide funding before they can be processed. |
    | 800   | Pending Cancellation            | A payment can be in this
    state, if you call the cancel payment API. |

    Attributes:
        code (int): Numerical code of financial transaction status.
        description (string): Description of the financial transaction status

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "description": 'description'
    }

    def __init__(self,
                 code=None,
                 description=None):
        """Constructor for the FinancialTransactionStatus class"""

        # Initialize members of the class
        self.code = code 
        self.description = description 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        code = dictionary.get("code") if dictionary.get("code") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        # Return an object of this model
        return cls(code,
                   description)
