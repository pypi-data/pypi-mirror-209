# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.monetary_value import MonetaryValue
from swaggerpetstore.models.users_bank_id import UsersBankID


class GetPayoutRequiredDataForBank(object):

    """Implementation of the 'GetPayoutRequiredDataForBank' model.

    TODO: type model description here.

    Attributes:
        amount (MonetaryValue): Represents a monetary value containing a
            decimal amount value along with a currency code. The currency code
            is a three letter ISO 4217 code. E.g. GBP for British sterling
            pounds.
        payer (PayerTypeEnum): The type of Payer making the payment. This
            determines which identity details are used as the payer identity.
        service_level (ServiceLevelEnum): Supported service levels for a
            payout request (standard or express).
        users_bank_id (UsersBankID): This group consists of a collection of
            both the user ID group and beneficiary bank ID group. The 'userID'
            is a collection of user identifier types. The 'benBankID' is a
            collection of account identifier types. Both the 'userID' and
            'benBankID' fields are mandatory.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "users_bank_id": 'usersBankID',
        "amount": 'amount',
        "payer": 'payer',
        "service_level": 'serviceLevel'
    }

    _optionals = [
        'amount',
        'payer',
        'service_level',
    ]

    def __init__(self,
                 users_bank_id=None,
                 amount=APIHelper.SKIP,
                 payer=APIHelper.SKIP,
                 service_level=APIHelper.SKIP):
        """Constructor for the GetPayoutRequiredDataForBank class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if payer is not APIHelper.SKIP:
            self.payer = payer 
        if service_level is not APIHelper.SKIP:
            self.service_level = service_level 
        self.users_bank_id = users_bank_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        users_bank_id = UsersBankID.from_dictionary(dictionary.get('usersBankID')) if dictionary.get('usersBankID') else None
        amount = MonetaryValue.from_dictionary(dictionary.get('amount')) if 'amount' in dictionary.keys() else APIHelper.SKIP
        payer = dictionary.get("payer") if dictionary.get("payer") else APIHelper.SKIP
        service_level = dictionary.get("serviceLevel") if dictionary.get("serviceLevel") else APIHelper.SKIP
        # Return an object of this model
        return cls(users_bank_id,
                   amount,
                   payer,
                   service_level)
