# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.models.settlement_calendar import SettlementCalendar


class SettlementCalendarsGetResponse(object):

    """Implementation of the 'SettlementCalendarsGetResponse' model.

    This represents a Settlement Calendar, with a range of settlement dates
    and the corresponding cut-off time.

    Attributes:
        response_time_stamp (string): A valid ISO 8601 timestamp, such as
            YYYY-MM-DDThh:mm:ss.sssÂ±hh:mm. Represents the timestamp when the
            Settlement Calendar was generated.
        settlement_calendar (list of SettlementCalendar): Represents a
            calander of settlement dates and the cut-off time for these
            settlement dates.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "response_time_stamp": 'responseTimeStamp',
        "settlement_calendar": 'settlementCalendar'
    }

    def __init__(self,
                 response_time_stamp=None,
                 settlement_calendar=None):
        """Constructor for the SettlementCalendarsGetResponse class"""

        # Initialize members of the class
        self.response_time_stamp = response_time_stamp 
        self.settlement_calendar = settlement_calendar 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        response_time_stamp = dictionary.get("responseTimeStamp") if dictionary.get("responseTimeStamp") else None
        settlement_calendar = None
        if dictionary.get('settlementCalendar') is not None:
            settlement_calendar = [SettlementCalendar.from_dictionary(x) for x in dictionary.get('settlementCalendar')]
        # Return an object of this model
        return cls(response_time_stamp,
                   settlement_calendar)
