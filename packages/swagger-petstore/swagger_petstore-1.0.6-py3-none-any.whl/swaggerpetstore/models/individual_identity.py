# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.address import Address
from swaggerpetstore.models.birth_information import BirthInformation
from swaggerpetstore.models.identification import Identification
from swaggerpetstore.models.individual_name import IndividualName


class IndividualIdentity(object):

    """Implementation of the 'IndividualIdentity' model.

    The identity of an individual. The 'name' attribute is mandatory for an
    individual. You must supply at least identification entry or one birth
    information entry or one address entry.

    Attributes:
        name (IndividualName): The 'givenNames' attribute is mandatory. This
            is a space separated list of names (not including the family
            name).  You should supply names and not initials (wherever
            possible). See examples below.  The 'familyName' attribute is
            mandatory. This contains the single family name. See examples
            below.   *Example1 - a western citizen from a country which uses
            the common western naming convention(such as US, GB, FR, CA, DE
            etc...)*      Name = "John Michael Smith",      givenNames="John
            Michael" and familyName="Smith"   *Example2 - a citizen from a
            country which uses the eastern name order where the family name
            comes first, followed by their given names (such as Hungary,
            China, Japan, Korea, Singapore, Taiwan, Vietnam etc...)*      Name
            = "Máo Zédÿng",      givenNames="Zédÿng" and familyName="Máo"     
            Name = "Hidetoshi Nakata",      givenNames="Nakata" and
            familyName="Hidetoshi"       Name = "Ferenc Puskás",     
            givenNames="Puskás" and familyName="Ferenc"   *Example3 - middle
            east names*      Name= "Mohammed bin Rashid bin Saeed Al-Maktoum",
            givenNames="Mohammed bin Rashid bin Saeed" and
            familyName="Al-Maktoum"   *Example4 - single names, such as in
            Indonesia*      Name="Suharto",      givenNames="Suharto" and
            familyName="Suharto".
        address (Address): Represents an address. Mandatory attributes are
            'addressLine1', 'city' and 'country'. All other attributes are
            optional.
        birth_information (BirthInformation): The group consists of elements
            that define birth information for an individual.
        identification (list of Identification): This group consists of an
            individual identification unique number and the country of origin
            of the identification.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "address": 'address',
        "birth_information": 'birthInformation',
        "identification": 'identification'
    }

    _optionals = [
        'address',
        'birth_information',
        'identification',
    ]

    def __init__(self,
                 name=None,
                 address=APIHelper.SKIP,
                 birth_information=APIHelper.SKIP,
                 identification=APIHelper.SKIP):
        """Constructor for the IndividualIdentity class"""

        # Initialize members of the class
        self.name = name 
        if address is not APIHelper.SKIP:
            self.address = address 
        if birth_information is not APIHelper.SKIP:
            self.birth_information = birth_information 
        if identification is not APIHelper.SKIP:
            self.identification = identification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        name = IndividualName.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        address = Address.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        birth_information = BirthInformation.from_dictionary(dictionary.get('birthInformation')) if 'birthInformation' in dictionary.keys() else APIHelper.SKIP
        identification = None
        if dictionary.get('identification') is not None:
            identification = [Identification.from_dictionary(x) for x in dictionary.get('identification')]
        else:
            identification = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   address,
                   birth_information,
                   identification)
