# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.bank_account_details import BankAccountDetails
from swaggerpetstore.models.ben_bank_id_merchant import BenBankIDMerchant
from swaggerpetstore.models.identity import Identity


class BankAccount(object):

    """Implementation of the 'BankAccount' model.

    The beneficiary bank account Object. This type provides all the possible
    information required to identify a beneficiary bank account.

    Attributes:
        ben_bank_id (BenBankIDMerchant): This group consists of merchant
            beneficiary bank identifier only.
        beneficiary_identity (Identity): Represents the identity of an
            individual or legal entity. You must specify one of either an
            individual identity or legal entity identity or unstructured
            identity.
        description (string): Type which defines a beneficiary bank account
            description. Each bank account must be given a description
            therefore this is a mandatory component.
        country_code (string): The territory in which this bank account is
            domiciled. This is a valid supported ISO 3166 2-character country
            code.
        currency_code (string): Valid supported ISO 4217 3-character currency
            code. The currency held in this bank account may optionally be
            supplied. If not supplied it will assume the default currency of
            the 'countryCode' parameter.
        bank_account_details (list of BankAccountDetails): This group holds
            the key-value pair of all possible account identifiers.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "beneficiary_identity": 'beneficiaryIdentity',
        "description": 'description',
        "country_code": 'countryCode',
        "currency_code": 'currencyCode',
        "bank_account_details": 'bankAccountDetails',
        "ben_bank_id": 'benBankID'
    }

    _optionals = [
        'ben_bank_id',
    ]

    def __init__(self,
                 beneficiary_identity=None,
                 description=None,
                 country_code=None,
                 currency_code=None,
                 bank_account_details=None,
                 ben_bank_id=APIHelper.SKIP):
        """Constructor for the BankAccount class"""

        # Initialize members of the class
        if ben_bank_id is not APIHelper.SKIP:
            self.ben_bank_id = ben_bank_id 
        self.beneficiary_identity = beneficiary_identity 
        self.description = description 
        self.country_code = country_code 
        self.currency_code = currency_code 
        self.bank_account_details = bank_account_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        beneficiary_identity = Identity.from_dictionary(dictionary.get('beneficiaryIdentity')) if dictionary.get('beneficiaryIdentity') else None
        description = dictionary.get("description") if dictionary.get("description") else None
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else None
        currency_code = dictionary.get("currencyCode") if dictionary.get("currencyCode") else None
        bank_account_details = None
        if dictionary.get('bankAccountDetails') is not None:
            bank_account_details = [BankAccountDetails.from_dictionary(x) for x in dictionary.get('bankAccountDetails')]
        ben_bank_id = BenBankIDMerchant.from_dictionary(dictionary.get('benBankID')) if 'benBankID' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(beneficiary_identity,
                   description,
                   country_code,
                   currency_code,
                   bank_account_details,
                   ben_bank_id)
