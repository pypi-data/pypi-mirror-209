# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper


class Address(object):

    """Implementation of the 'Address' model.

    Represents an address. Mandatory attributes are 'addressLine1', 'city' and
    'country'. All other attributes are optional.

    Attributes:
        address_line_1 (string): A line of address information. The length of
            this field is limited to 254 bytes. This value will be truncated
            if it is too long.
        address_line_2 (string): A line of address information. The length of
            this field is limited to 254 bytes. This value will be truncated
            if it is too long.
        address_line_3 (string): A line of address information. The length of
            this field is limited to 254 bytes. This value will be truncated
            if it is too long.
        city (string): A line of address information. The length of this field
            is limited to 254 bytes. This value will be truncated if it is too
            long.
        country (string): Valid supported ISO 3166 2-character country code.
        postcode (string): A line of address information. The length of this
            field is limited to 10 bytes. 10 bytes can hold 10 normal English
            characters. This value will be truncated if it is too long.
        province (string): A line of address information. The length of this
            field is limited to 254 bytes. This value will be truncated if it
            is too long.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_line_1": 'addressLine1',
        "city": 'city',
        "country": 'country',
        "address_line_2": 'addressLine2',
        "address_line_3": 'addressLine3',
        "postcode": 'postcode',
        "province": 'province'
    }

    _optionals = [
        'address_line_2',
        'address_line_3',
        'postcode',
        'province',
    ]

    def __init__(self,
                 address_line_1=None,
                 city=None,
                 country=None,
                 address_line_2=APIHelper.SKIP,
                 address_line_3=APIHelper.SKIP,
                 postcode=APIHelper.SKIP,
                 province=APIHelper.SKIP):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.address_line_1 = address_line_1 
        if address_line_2 is not APIHelper.SKIP:
            self.address_line_2 = address_line_2 
        if address_line_3 is not APIHelper.SKIP:
            self.address_line_3 = address_line_3 
        self.city = city 
        self.country = country 
        if postcode is not APIHelper.SKIP:
            self.postcode = postcode 
        if province is not APIHelper.SKIP:
            self.province = province 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        address_line_1 = dictionary.get("addressLine1") if dictionary.get("addressLine1") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        address_line_2 = dictionary.get("addressLine2") if dictionary.get("addressLine2") else APIHelper.SKIP
        address_line_3 = dictionary.get("addressLine3") if dictionary.get("addressLine3") else APIHelper.SKIP
        postcode = dictionary.get("postcode") if dictionary.get("postcode") else APIHelper.SKIP
        province = dictionary.get("province") if dictionary.get("province") else APIHelper.SKIP
        # Return an object of this model
        return cls(address_line_1,
                   city,
                   country,
                   address_line_2,
                   address_line_3,
                   postcode,
                   province)
