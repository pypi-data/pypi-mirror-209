# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper


class BankAccountExpectedSettlementResponse(object):

    """Implementation of the 'BankAccountExpectedSettlementResponse' model.

    This is the response to the Validate Beneficiary Bank Account API. The
    response will contain the element 'isBankAccountValid' which is a boolean
    representing if the specified beneficiary bank account is	valid. It will
    also return the expected settlement date of a payout based on supplied
    payout attributes in the request and the least cost route that can be used
    to settle against the beneficiary bank.

    Attributes:
        is_bank_account_valid (bool): Returns true if bank details have passed
            validation checks. In this case, the other response attributes of
            anticipatedPayoutRequestTime, serviceLevel and
            expectedSettlementDate are returned.
        anticipated_payout_request_time (string): A valid ISO 8601 timestamp,
            such as YYYY-MM-DDThh:mm:ss.sssÂ±hh:mm. This is the timestamp when
            the payout is anticipated to be sent to Earthport. This matches
            the supplied anticipatedPayoutRequestTime request attribute but
            the value returned will be in UTC (zero offset) dateTime.
            Therefore, a value supplied as 2013-01-20T12:30:00-05:00 will be
            returned as the UTC equivalent of 2013-01-20T17:30:00+00:00.
        service_level (ServiceLevelEnum): Supported service levels for a
            payout request (standard or express).
        expected_settlement_date (string): Valid ISO 8601 date format
            YYYY-MM-DD. This is an indicative date when the payout instruction
            is expected to be settled to the bank.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_bank_account_valid": 'isBankAccountValid',
        "anticipated_payout_request_time": 'anticipatedPayoutRequestTime',
        "service_level": 'serviceLevel',
        "expected_settlement_date": 'expectedSettlementDate'
    }

    _optionals = [
        'anticipated_payout_request_time',
        'service_level',
        'expected_settlement_date',
    ]

    def __init__(self,
                 is_bank_account_valid=None,
                 anticipated_payout_request_time=APIHelper.SKIP,
                 service_level=APIHelper.SKIP,
                 expected_settlement_date=APIHelper.SKIP):
        """Constructor for the BankAccountExpectedSettlementResponse class"""

        # Initialize members of the class
        self.is_bank_account_valid = is_bank_account_valid 
        if anticipated_payout_request_time is not APIHelper.SKIP:
            self.anticipated_payout_request_time = anticipated_payout_request_time 
        if service_level is not APIHelper.SKIP:
            self.service_level = service_level 
        if expected_settlement_date is not APIHelper.SKIP:
            self.expected_settlement_date = expected_settlement_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        is_bank_account_valid = dictionary.get("isBankAccountValid") if "isBankAccountValid" in dictionary.keys() else None
        anticipated_payout_request_time = dictionary.get("anticipatedPayoutRequestTime") if dictionary.get("anticipatedPayoutRequestTime") else APIHelper.SKIP
        service_level = dictionary.get("serviceLevel") if dictionary.get("serviceLevel") else APIHelper.SKIP
        expected_settlement_date = dictionary.get("expectedSettlementDate") if dictionary.get("expectedSettlementDate") else APIHelper.SKIP
        # Return an object of this model
        return cls(is_bank_account_valid,
                   anticipated_payout_request_time,
                   service_level,
                   expected_settlement_date)
