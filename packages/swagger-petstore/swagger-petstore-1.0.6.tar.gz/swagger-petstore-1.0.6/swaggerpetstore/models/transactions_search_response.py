# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.financial_transaction import FinancialTransaction
from swaggerpetstore.models.pagination_result import PaginationResult


class TransactionsSearchResponse(object):

    """Implementation of the 'TransactionsSearchResponse' model.

    This represents the response of Transactions Search. It contains a number
    of transactions which match the search criteria and details of pagination
    on resultset.

    Attributes:
        transactions (list of FinancialTransaction): Represents a transaction.
            This can any type of transaction among Payout transaction, Refund
            transaction, User deposit, Liquidity deposit, Journal transaction,
            Merchant liquidity movement and Earthport Merchant Liquidity
            Transfer.
        pagination_result (PaginationResult): This returns a paged set of
            results rather than the full result set.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transactions": 'transactions',
        "pagination_result": 'paginationResult'
    }

    _optionals = [
        'transactions',
        'pagination_result',
    ]

    def __init__(self,
                 transactions=APIHelper.SKIP,
                 pagination_result=APIHelper.SKIP):
        """Constructor for the TransactionsSearchResponse class"""

        # Initialize members of the class
        if transactions is not APIHelper.SKIP:
            self.transactions = transactions 
        if pagination_result is not APIHelper.SKIP:
            self.pagination_result = pagination_result 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transactions = None
        if dictionary.get('transactions') is not None:
            transactions = [FinancialTransaction.from_dictionary(x) for x in dictionary.get('transactions')]
        else:
            transactions = APIHelper.SKIP
        pagination_result = PaginationResult.from_dictionary(dictionary.get('paginationResult')) if 'paginationResult' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(transactions,
                   pagination_result)
