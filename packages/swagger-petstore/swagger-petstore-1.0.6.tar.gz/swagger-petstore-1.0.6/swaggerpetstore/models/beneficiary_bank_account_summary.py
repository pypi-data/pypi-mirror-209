# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.bank_account_details import BankAccountDetails
from swaggerpetstore.models.ben_bank_id import BenBankID


class BeneficiaryBankAccountSummary(object):

    """Implementation of the 'BeneficiaryBankAccountSummary' model.

    Represents a summary of a bank account. This type masks sensitive account
    information such as Account Numbers and IBANs.

    Attributes:
        ben_bank_id (BenBankID): This group consists of all possible
            beneficiary bank identifier types. The 'epBankID' field is a
            unique identifier for a beneficiary bank account. The
            'merchantBankID' is an optional merchant specified identifier for
            the beneficiary bank account. The 'epBankID', 'merchantBankID' or
            both 'epBankID' and 'merchantBankID' can be supplied. A mapping
            will be performed to retrieve the merchant bank ID from the
            supplied EP bank ID and vice versa. If both the 'epBankID' and
            'merchantBankID' are supplied, a check will be performed to ensure
            that the two are mapped. If the two provided fields are not
            mapped, then a validation error code will be returned. At least
            one of the fields must be populated.
        description (string): Type which defines a beneficiary bank account
            description. Each bank account must be given a description
            therefore this is a mandatory component of the
            BeneficiaryBankAccount complex type.
        country_code (string): Valid supported ISO 3166 2-character country
            code.
        bank_account_details (list of BankAccountDetails): The bank account
            details such as accountName, bankName, accountNumber etc...The
            list of bank account fields vary by country.
        status (string): Status of the bank account.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ben_bank_id": 'benBankID',
        "description": 'description',
        "country_code": 'countryCode',
        "bank_account_details": 'bankAccountDetails',
        "status": 'status'
    }

    _optionals = [
        'ben_bank_id',
        'description',
        'country_code',
        'bank_account_details',
        'status',
    ]

    def __init__(self,
                 ben_bank_id=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 country_code=APIHelper.SKIP,
                 bank_account_details=APIHelper.SKIP,
                 status=APIHelper.SKIP):
        """Constructor for the BeneficiaryBankAccountSummary class"""

        # Initialize members of the class
        if ben_bank_id is not APIHelper.SKIP:
            self.ben_bank_id = ben_bank_id 
        if description is not APIHelper.SKIP:
            self.description = description 
        if country_code is not APIHelper.SKIP:
            self.country_code = country_code 
        if bank_account_details is not APIHelper.SKIP:
            self.bank_account_details = bank_account_details 
        if status is not APIHelper.SKIP:
            self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        ben_bank_id = BenBankID.from_dictionary(dictionary.get('benBankID')) if 'benBankID' in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else APIHelper.SKIP
        bank_account_details = None
        if dictionary.get('bankAccountDetails') is not None:
            bank_account_details = [BankAccountDetails.from_dictionary(x) for x in dictionary.get('bankAccountDetails')]
        else:
            bank_account_details = APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        # Return an object of this model
        return cls(ben_bank_id,
                   description,
                   country_code,
                   bank_account_details,
                   status)
