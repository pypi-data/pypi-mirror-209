# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.models.bank_account import BankAccount
from swaggerpetstore.models.payment import Payment
from swaggerpetstore.models.user import User


class PaymentsCreateRequest(object):

    """Implementation of the 'PaymentsCreateRequest' model.

    This is a composite request. It is used when you have to create a payment
    request to a beneficiary bank account which is not previously registered
    on the earthport payment system. This request is also extended to create a
    payment request on behalf of a user that is not previously registered on
    the earthport system.

    Attributes:
        user (User): A user Object.
        bank_account (BankAccount): The beneficiary bank account Object. This
            type provides all the possible information required to identify a
            beneficiary bank account.
        payment (Payment): This request is used to request a payout to a given
            beneficiary bank account. This message is used by Earthport
            merchants who are requesting payouts on behalf of a customer.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user": 'user',
        "bank_account": 'bankAccount',
        "payment": 'payment'
    }

    def __init__(self,
                 user=None,
                 bank_account=None,
                 payment=None):
        """Constructor for the PaymentsCreateRequest class"""

        # Initialize members of the class
        self.user = user 
        self.bank_account = bank_account 
        self.payment = payment 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        user = User.from_dictionary(dictionary.get('user')) if dictionary.get('user') else None
        bank_account = BankAccount.from_dictionary(dictionary.get('bankAccount')) if dictionary.get('bankAccount') else None
        payment = Payment.from_dictionary(dictionary.get('payment')) if dictionary.get('payment') else None
        # Return an object of this model
        return cls(user,
                   bank_account,
                   payment)
