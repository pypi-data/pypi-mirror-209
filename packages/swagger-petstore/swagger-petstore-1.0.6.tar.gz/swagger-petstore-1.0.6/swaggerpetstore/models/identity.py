# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.additional_data import AdditionalData
from swaggerpetstore.models.individual_identity import IndividualIdentity
from swaggerpetstore.models.legal_entity_identity import LegalEntityIdentity
from swaggerpetstore.models.unstructured_identity import UnstructuredIdentity


class Identity(object):

    """Implementation of the 'Identity' model.

    Represents the identity of an individual or legal entity. You must specify
    one of either an individual identity or legal entity identity or
    unstructured identity.

    Attributes:
        individual_identity (IndividualIdentity): The identity of an
            individual. The 'name' attribute is mandatory for an individual.
            You must supply at least identification entry or one birth
            information entry or one address entry.
        legal_entity_identity (LegalEntityIdentity): The identity of a legal
            entity. The 'legalEntityName' is mandatory. You must supply one of
            'legalEntityRegistration' or 'address'.
        unstructured_identity (list of UnstructuredIdentity): Represents a set
            of name value pairs that can be supplied as the Identity
            information. The keys will be validated on the server side against
            a list of valid types that are accepted.
        additional_data (list of AdditionalData): Represents a set of name
            value pairs that can be supplied with the Identity information.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "individual_identity": 'individualIdentity',
        "legal_entity_identity": 'legalEntityIdentity',
        "unstructured_identity": 'unstructuredIdentity',
        "additional_data": 'additionalData'
    }

    _optionals = [
        'individual_identity',
        'legal_entity_identity',
        'unstructured_identity',
        'additional_data',
    ]

    def __init__(self,
                 individual_identity=APIHelper.SKIP,
                 legal_entity_identity=APIHelper.SKIP,
                 unstructured_identity=APIHelper.SKIP,
                 additional_data=APIHelper.SKIP):
        """Constructor for the Identity class"""

        # Initialize members of the class
        if individual_identity is not APIHelper.SKIP:
            self.individual_identity = individual_identity 
        if legal_entity_identity is not APIHelper.SKIP:
            self.legal_entity_identity = legal_entity_identity 
        if unstructured_identity is not APIHelper.SKIP:
            self.unstructured_identity = unstructured_identity 
        if additional_data is not APIHelper.SKIP:
            self.additional_data = additional_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        individual_identity = IndividualIdentity.from_dictionary(dictionary.get('individualIdentity')) if 'individualIdentity' in dictionary.keys() else APIHelper.SKIP
        legal_entity_identity = LegalEntityIdentity.from_dictionary(dictionary.get('legalEntityIdentity')) if 'legalEntityIdentity' in dictionary.keys() else APIHelper.SKIP
        unstructured_identity = None
        if dictionary.get('unstructuredIdentity') is not None:
            unstructured_identity = [UnstructuredIdentity.from_dictionary(x) for x in dictionary.get('unstructuredIdentity')]
        else:
            unstructured_identity = APIHelper.SKIP
        additional_data = None
        if dictionary.get('additionalData') is not None:
            additional_data = [AdditionalData.from_dictionary(x) for x in dictionary.get('additionalData')]
        else:
            additional_data = APIHelper.SKIP
        # Return an object of this model
        return cls(individual_identity,
                   legal_entity_identity,
                   unstructured_identity,
                   additional_data)
