# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.statement import Statement
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class StatementsController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(StatementsController, self).__init__(config)

    def get_statement(self,
                      currency,
                      start_date_time,
                      end_date_time,
                      sort_order,
                      managed_merchant_name=None,
                      offset=None,
                      page_size=None):
        """Does a GET request to /statements.

        Retrieves a list of financial transactions and balances for a
        specified time period for an account administered in the Earthport
        Payment system. To retrieve a particular statement the startDate,
        endDateTime and currency of the account must be specified. The
        statement returned will contain transactions that occurred since the
        start of the startDate up to and including endDateTime. If the account
        (in the requested currency) does not contain any transactions for the
        period an empty statement is returned. Every transaction, together
        with the money movement it represents (debit or credit) and its
        resulting account balance are represented as a statement line item.
        There will be a number of statement line items (up to the maximum page
        size) per page with an opening and closing balance for that page.
        Currently the following transaction types may show up on a statement:
         Payout transaction,
         Refund transaction,
         User deposit,
         Liquidity deposit,
         Journal transaction,
         Merchant liquidity movement,
         Earthport Merchant Liquidity Transfer
        The operation supports sorting (by date) by specifying a sort order
        (ASC or DESC) and paging across multiple pages of results.

        Args:
            currency (string): Valid supported ISO 4217 3-character currency
                code. The currency code representing currency of the user or
                merchant account.
            start_date_time (string): Valid ISO 8601 timestamp, i.e.
                yyyyy-MM-ddTHH:mm:ssZ. The start day of the statement period.
                All transactions from the start of the day are included.
            end_date_time (string): Valid ISO 8601 timestamp, i.e.
                yyyyy-MM-ddTHH:mm:ssZ. The end day timestamp of the statement
                period. If this is now or null the statement will include all
                transactions up to the current point in time.
            sort_order (SortOrderEnum): Sort by transaction date in either
                Ascending or Descending order.
            managed_merchant_name (string, optional): Managed merchant whose
                transactions will be returned  when being called by the
                contracting merchant.
            offset (int, optional): This is used for pagination of resultsets.
                0-based starting offset of the page with respect to the entire
                resultset.
            page_size (int, optional): This is used for pagination of
                resultsets. Number of items per page to return. If empty the
                maximum allowable (25) number of records will be returned.

        Returns:
            Statement: Response from the API. Statement succesfully
                retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/statements')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .query_param(Parameter()
                         .key('startDateTime')
                         .value(start_date_time))
            .query_param(Parameter()
                         .key('endDateTime')
                         .value(end_date_time))
            .query_param(Parameter()
                         .key('sortOrder')
                         .value(sort_order))
            .query_param(Parameter()
                         .key('managedMerchantName')
                         .value(managed_merchant_name))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Statement.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
