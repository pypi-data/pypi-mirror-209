# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.configuration import Server
from swaggerpetstore.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from swaggerpetstore.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from swaggerpetstore.models.account_balance import AccountBalance
from swaggerpetstore.exceptions.validation_exception import ValidationException
from swaggerpetstore.exceptions.api_exception import APIException


class BalancesController(BaseController):

    """A Controller to access Endpoints in the swaggerpetstore API."""
    def __init__(self, config):
        super(BalancesController, self).__init__(config)

    def get_balance(self,
                    managed_merchant_name=None,
                    currency=None):
        """Does a GET request to /balances.

        Retrieves the balance of a merchant account. 
        This API can be used to retrieve a set of balances represented by a
        monetary amount for each currency registered with the merchant's
        central virtual account. 
        You can filter the AccountBalance resource by currency if you require
        a balance for a specific currency. 
        You can also filter the AccountBalance on managedMerchantName. If no
        managedMerchantName is specified, then the caller will be used to
        identify which balance to return. If a managedMerchantName is
        specified, then an authorisation check will occur to ensure that the
        caller has the right to view the balance information for that managed
        merchant.

        Args:
            managed_merchant_name (string, optional): The name of a managed
                merchant registered on Earthport.
            currency (string, optional): Valid supported ISO 4217 3-character
                currency code.

        Returns:
            list of AccountBalance: Response from the API. Balance succesfully
                retrieved.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/balances')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('managedMerchantName')
                         .value(managed_merchant_name))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AccountBalance.from_dictionary)
            .local_error('400', 'The requested operation could not be performed. Input Request is invalid or incorrect.', ValidationException)
            .local_error('401', 'Unauthorized - Invalid API Key and Token.', APIException)
            .local_error('403', 'Forbidden. Access to requested data is forbidden.', APIException)
            .local_error('404', 'Not Found. Requested resource does not exist.', APIException)
            .local_error('408', 'Timeout. Operation timed out.', APIException)
            .local_error('413', 'Request Entity Too Large. Earthport limits the request payload size to 100KB.', APIException)
            .local_error('415', 'Unsupported media type. This is probably due to submitting incorrect data format. e.g. XML instead of JSON.', APIException)
            .local_error('429', 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.', APIException)
            .local_error('500', 'An internal error has occurred in the Earthport payment platform.', APIException)
        ).execute()
