# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class AdditionalData(object):

    """Implementation of the 'AdditionalData' model.

    Represents a set of name value pairs that can be supplied with the
    Identity information. The keys will be validated on the server side
    against a list of valid types that are accepted. See the "API Solution
    Guide" for further details. Both the key and the value are required if
    adding additional data.

    Attributes:
        key (string): This represents the 'key' of the additional data. The
            length of this field is currently restricted to 50 bytes, and will
            be truncated if the value is too long.
        value (string): This represents the 'value' of the additional data.
            The length of this field is currently restricted to 254 bytes,
            when used for Payer Identity, and 1024 bytes when used for
            Beneficiary Identity.The field value will be truncated if the
            value is too long.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key": 'key',
        "value": 'value'
    }

    def __init__(self,
                 key=None,
                 value=None):
        """Constructor for the AdditionalData class"""

        # Initialize members of the class
        self.key = key 
        self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        key = dictionary.get("key") if dictionary.get("key") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        # Return an object of this model
        return cls(key,
                   value)
