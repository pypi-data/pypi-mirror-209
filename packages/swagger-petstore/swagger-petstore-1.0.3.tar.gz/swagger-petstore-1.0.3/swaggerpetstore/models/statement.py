# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.models.account_balance import AccountBalance
from swaggerpetstore.models.pagination_result import PaginationResult
from swaggerpetstore.models.statement_line_item import StatementLineItem


class Statement(object):

    """Implementation of the 'Statement' model.

    The statement of transactions for a merchant account. This lists all
    debits and credits against this account. The results are paginated so may
    only be showing a subset of the total number of transactions. The
    statement also returns the opening and closing balances so can be used for
    reconciliation.

    Attributes:
        statement_line_items (list of StatementLineItem): List of 0 or more
            statement line item objects matching the request parameters. Each
            statement line item represents a financial transaction and an
            account balance resulting from the transaction.
        opening_balance (AccountBalance): This element represents the balance
            of a merchant account or a managed merchant account in a currency
            registered with the merchant's central virtual account.
        closing_balance (AccountBalance): This element represents the balance
            of a merchant account or a managed merchant account in a currency
            registered with the merchant's central virtual account.
        pagination_result (PaginationResult): This returns a paged set of
            results rather than the full result set.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statement_line_items": 'statementLineItems',
        "opening_balance": 'openingBalance',
        "closing_balance": 'closingBalance',
        "pagination_result": 'paginationResult'
    }

    def __init__(self,
                 statement_line_items=None,
                 opening_balance=None,
                 closing_balance=None,
                 pagination_result=None):
        """Constructor for the Statement class"""

        # Initialize members of the class
        self.statement_line_items = statement_line_items 
        self.opening_balance = opening_balance 
        self.closing_balance = closing_balance 
        self.pagination_result = pagination_result 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        statement_line_items = None
        if dictionary.get('statementLineItems') is not None:
            statement_line_items = [StatementLineItem.from_dictionary(x) for x in dictionary.get('statementLineItems')]
        opening_balance = AccountBalance.from_dictionary(dictionary.get('openingBalance')) if dictionary.get('openingBalance') else None
        closing_balance = AccountBalance.from_dictionary(dictionary.get('closingBalance')) if dictionary.get('closingBalance') else None
        pagination_result = PaginationResult.from_dictionary(dictionary.get('paginationResult')) if dictionary.get('paginationResult') else None
        # Return an object of this model
        return cls(statement_line_items,
                   opening_balance,
                   closing_balance,
                   pagination_result)
