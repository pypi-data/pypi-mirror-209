# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper
from swaggerpetstore.models.ben_bank_id import BenBankID
from swaggerpetstore.models.fx_rate import FXRate
from swaggerpetstore.models.monetary_value import MonetaryValue
from swaggerpetstore.models.transaction_id import TransactionID
from swaggerpetstore.models.user_id import UserID


class PaymentsCreateResponse(object):

    """Implementation of the 'PaymentsCreateResponse' model.

    Response object to the payout request APIs.

    Attributes:
        user_id (UserID): This group consists of all possible user identifier
            types. The 'epUserID' field is the Earthport generated unique
            identifier for a User and is the equivalent of a Virtual Account
            Number (VAN). The 'merchantUserID' is a merchant specified
            identifier for the User. The 'epUserID', 'merchantUserID' or both
            'epUserID' and 'merchantUserID' can be supplied. A mapping will be
            performed to retrieve the merchant user ID from the supplied EP
            user ID and vice versa. If both the 'epUserID' and
            'merchantUserID' are supplied, a check will be performed to ensure
            that the two are mapped. If the two provided fields are not
            mapped, then a validation error code will be returned. At least
            one of the fields must be populated.
        ben_bank_id (BenBankID): This group consists of all possible
            beneficiary bank identifier types. The 'epBankID' field is a
            unique identifier for a beneficiary bank account. The
            'merchantBankID' is an optional merchant specified identifier for
            the beneficiary bank account. The 'epBankID', 'merchantBankID' or
            both 'epBankID' and 'merchantBankID' can be supplied. A mapping
            will be performed to retrieve the merchant bank ID from the
            supplied EP bank ID and vice versa. If both the 'epBankID' and
            'merchantBankID' are supplied, a check will be performed to ensure
            that the two are mapped. If the two provided fields are not
            mapped, then a validation error code will be returned. At least
            one of the fields must be populated.
        transaction_id (TransactionID): Transaction ID type which contains
            both the unique Earthport transaction ID and the merchant supplied
            transaction ID.
        correspondent_charges_expected (bool): A flag to indicate if
            correspondent charges are expected during the processing of the
            payout request.
        liquidity_value (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        settlement_value (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        fee_value (MonetaryValue): Represents a monetary value containing a
            decimal amount value along with a currency code. The currency code
            is a three letter ISO 4217 code. E.g. GBP for British sterling
            pounds.
        fx_method_expected (FXMethodEnum): Method of FX that will be used to
            settle the payout request.
        fx_rate (FXRate): Represents an FX rate between two currencies, the
            rate is restricted to 6 decimal places. The currency code is a
            three letter ISO 4217 code. E.g. GBP for British sterling pounds.
        accepted_date (string): A valid ISO 8601 timestamp, such as
            YYYY-MM-DDThh:mm:ss.sssÂ±hh:mm. This is the timestamp when the
            payout instruction was accepted by the system.
        expected_settlement_date (string): Valid ISO 8601 date format
            YYYY-MM-DD. This is an Indicative date when the payout instruction
            is expected to be settled to the bank. This is calculated taking
            into account such things as acceptedDate, the settlement agreement
            cut-off time and period, etc. It currently does not take into
            account individual countries' banking calendars.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_id": 'userID',
        "ben_bank_id": 'benBankID',
        "transaction_id": 'transactionID',
        "liquidity_value": 'liquidityValue',
        "settlement_value": 'settlementValue',
        "accepted_date": 'acceptedDate',
        "expected_settlement_date": 'expectedSettlementDate',
        "correspondent_charges_expected": 'correspondentChargesExpected',
        "fee_value": 'feeValue',
        "fx_method_expected": 'fxMethodExpected',
        "fx_rate": 'fxRate'
    }

    _optionals = [
        'correspondent_charges_expected',
        'fee_value',
        'fx_method_expected',
        'fx_rate',
    ]

    def __init__(self,
                 user_id=None,
                 ben_bank_id=None,
                 transaction_id=None,
                 liquidity_value=None,
                 settlement_value=None,
                 accepted_date=None,
                 expected_settlement_date=None,
                 correspondent_charges_expected=APIHelper.SKIP,
                 fee_value=APIHelper.SKIP,
                 fx_method_expected=APIHelper.SKIP,
                 fx_rate=APIHelper.SKIP):
        """Constructor for the PaymentsCreateResponse class"""

        # Initialize members of the class
        self.user_id = user_id 
        self.ben_bank_id = ben_bank_id 
        self.transaction_id = transaction_id 
        if correspondent_charges_expected is not APIHelper.SKIP:
            self.correspondent_charges_expected = correspondent_charges_expected 
        self.liquidity_value = liquidity_value 
        self.settlement_value = settlement_value 
        if fee_value is not APIHelper.SKIP:
            self.fee_value = fee_value 
        if fx_method_expected is not APIHelper.SKIP:
            self.fx_method_expected = fx_method_expected 
        if fx_rate is not APIHelper.SKIP:
            self.fx_rate = fx_rate 
        self.accepted_date = accepted_date 
        self.expected_settlement_date = expected_settlement_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        user_id = UserID.from_dictionary(dictionary.get('userID')) if dictionary.get('userID') else None
        ben_bank_id = BenBankID.from_dictionary(dictionary.get('benBankID')) if dictionary.get('benBankID') else None
        transaction_id = TransactionID.from_dictionary(dictionary.get('transactionID')) if dictionary.get('transactionID') else None
        liquidity_value = MonetaryValue.from_dictionary(dictionary.get('liquidityValue')) if dictionary.get('liquidityValue') else None
        settlement_value = MonetaryValue.from_dictionary(dictionary.get('settlementValue')) if dictionary.get('settlementValue') else None
        accepted_date = dictionary.get("acceptedDate") if dictionary.get("acceptedDate") else None
        expected_settlement_date = dictionary.get("expectedSettlementDate") if dictionary.get("expectedSettlementDate") else None
        correspondent_charges_expected = dictionary.get("correspondentChargesExpected") if "correspondentChargesExpected" in dictionary.keys() else APIHelper.SKIP
        fee_value = MonetaryValue.from_dictionary(dictionary.get('feeValue')) if 'feeValue' in dictionary.keys() else APIHelper.SKIP
        fx_method_expected = dictionary.get("fxMethodExpected") if dictionary.get("fxMethodExpected") else APIHelper.SKIP
        fx_rate = FXRate.from_dictionary(dictionary.get('fxRate')) if 'fxRate' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(user_id,
                   ben_bank_id,
                   transaction_id,
                   liquidity_value,
                   settlement_value,
                   accepted_date,
                   expected_settlement_date,
                   correspondent_charges_expected,
                   fee_value,
                   fx_method_expected,
                   fx_rate)
