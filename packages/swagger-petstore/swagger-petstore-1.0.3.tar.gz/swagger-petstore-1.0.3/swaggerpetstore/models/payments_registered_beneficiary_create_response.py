# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.models.monetary_value import MonetaryValue
from swaggerpetstore.models.transaction_id import TransactionID


class PaymentsRegisteredBeneficiaryCreateResponse(object):

    """Implementation of the 'PaymentsRegisteredBeneficiaryCreateResponse' model.

    Response object to Create Payment Registered Beneficiary

    Attributes:
        transaction_id (TransactionID): Transaction ID type which contains
            both the unique Earthport transaction ID and the merchant supplied
            transaction ID.
        correspondent_charges_expected (bool): A flag to indicate if
            correspondent charges are expected during the processing of the
            payout request.
        liquidity_value (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        settlement_value (MonetaryValue): Represents a monetary value
            containing a decimal amount value along with a currency code. The
            currency code is a three letter ISO 4217 code. E.g. GBP for
            British sterling pounds.
        accepted_date (string): Timestamp when the payout instruction was
            accepted by the system. (This is known as - and is the same as -
            the debit value date in the Payout Transaction Detail Type).
        expected_settlement_date (string): Indicative date when the payout
            instruction is expected to be settled to the bank. This is
            calculated taking into account such things as acceptedDate, the
            settlement agreement cut-off time and period, etc. It currently
            does not take into account individual countries' banking
            calendars.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transaction_id": 'transactionID',
        "correspondent_charges_expected": 'correspondentChargesExpected',
        "liquidity_value": 'liquidityValue',
        "settlement_value": 'settlementValue',
        "accepted_date": 'acceptedDate',
        "expected_settlement_date": 'expectedSettlementDate'
    }

    def __init__(self,
                 transaction_id=None,
                 correspondent_charges_expected=None,
                 liquidity_value=None,
                 settlement_value=None,
                 accepted_date=None,
                 expected_settlement_date=None):
        """Constructor for the PaymentsRegisteredBeneficiaryCreateResponse class"""

        # Initialize members of the class
        self.transaction_id = transaction_id 
        self.correspondent_charges_expected = correspondent_charges_expected 
        self.liquidity_value = liquidity_value 
        self.settlement_value = settlement_value 
        self.accepted_date = accepted_date 
        self.expected_settlement_date = expected_settlement_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transaction_id = TransactionID.from_dictionary(dictionary.get('transactionID')) if dictionary.get('transactionID') else None
        correspondent_charges_expected = dictionary.get("correspondentChargesExpected") if "correspondentChargesExpected" in dictionary.keys() else None
        liquidity_value = MonetaryValue.from_dictionary(dictionary.get('liquidityValue')) if dictionary.get('liquidityValue') else None
        settlement_value = MonetaryValue.from_dictionary(dictionary.get('settlementValue')) if dictionary.get('settlementValue') else None
        accepted_date = dictionary.get("acceptedDate") if dictionary.get("acceptedDate") else None
        expected_settlement_date = dictionary.get("expectedSettlementDate") if dictionary.get("expectedSettlementDate") else None
        # Return an object of this model
        return cls(transaction_id,
                   correspondent_charges_expected,
                   liquidity_value,
                   settlement_value,
                   accepted_date,
                   expected_settlement_date)
