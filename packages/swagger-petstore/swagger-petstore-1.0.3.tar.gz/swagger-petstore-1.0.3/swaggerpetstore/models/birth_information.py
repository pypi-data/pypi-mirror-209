# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper


class BirthInformation(object):

    """Implementation of the 'BirthInformation' model.

    The group consists of elements that define birth information for an
    individual.

    Attributes:
        city_of_birth (string): This represents the date of birth. The length
            of this field is limited to 254 bytes. This value will be
            truncated if it is too long.
        country_of_birth (string): Valid supported ISO 3166 2-character
            country code. This represents the country of birth.
        date_of_birth (string): Valid ISO 8601 date format YYYY-MM-DD. This
            represents the date of birth.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_of_birth": 'countryOfBirth',
        "date_of_birth": 'dateOfBirth',
        "city_of_birth": 'cityOfBirth'
    }

    _optionals = [
        'city_of_birth',
    ]

    def __init__(self,
                 country_of_birth=None,
                 date_of_birth=None,
                 city_of_birth=APIHelper.SKIP):
        """Constructor for the BirthInformation class"""

        # Initialize members of the class
        if city_of_birth is not APIHelper.SKIP:
            self.city_of_birth = city_of_birth 
        self.country_of_birth = country_of_birth 
        self.date_of_birth = date_of_birth 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        country_of_birth = dictionary.get("countryOfBirth") if dictionary.get("countryOfBirth") else None
        date_of_birth = dictionary.get("dateOfBirth") if dictionary.get("dateOfBirth") else None
        city_of_birth = dictionary.get("cityOfBirth") if dictionary.get("cityOfBirth") else APIHelper.SKIP
        # Return an object of this model
        return cls(country_of_birth,
                   date_of_birth,
                   city_of_birth)
