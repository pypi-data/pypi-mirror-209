# -*- coding: utf-8 -*-

"""
swaggerpetstore

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstore.api_helper import APIHelper


class GetPayoutRequiredDataForCountryCurrency(object):

    """Implementation of the 'GetPayoutRequiredDataForCountryCurrency' model.

    TODO: type model description here.

    Attributes:
        beneficiary_identity_entity (IdentityEntityEnum): Supported identity
            entity types.
        country_code (string): Valid supported ISO 3166 2-character country
            code.
        currency_code (string): Valid supported ISO 4217 3-character currency
            code.
        locale (string): Supports a comma separated list of locales. for
            example en_GB, en_US in order of preferred locale.
        service_level (ServiceLevelEnum): Supported service levels for a
            payout request (standard or express).

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "country_code": 'countryCode',
        "currency_code": 'currencyCode',
        "beneficiary_identity_entity": 'beneficiaryIdentityEntity',
        "locale": 'locale',
        "service_level": 'serviceLevel'
    }

    _optionals = [
        'beneficiary_identity_entity',
        'locale',
        'service_level',
    ]

    def __init__(self,
                 country_code=None,
                 currency_code=None,
                 beneficiary_identity_entity=APIHelper.SKIP,
                 locale=APIHelper.SKIP,
                 service_level=APIHelper.SKIP):
        """Constructor for the GetPayoutRequiredDataForCountryCurrency class"""

        # Initialize members of the class
        if beneficiary_identity_entity is not APIHelper.SKIP:
            self.beneficiary_identity_entity = beneficiary_identity_entity 
        self.country_code = country_code 
        self.currency_code = currency_code 
        if locale is not APIHelper.SKIP:
            self.locale = locale 
        if service_level is not APIHelper.SKIP:
            self.service_level = service_level 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        country_code = dictionary.get("countryCode") if dictionary.get("countryCode") else None
        currency_code = dictionary.get("currencyCode") if dictionary.get("currencyCode") else None
        beneficiary_identity_entity = dictionary.get("beneficiaryIdentityEntity") if dictionary.get("beneficiaryIdentityEntity") else APIHelper.SKIP
        locale = dictionary.get("locale") if dictionary.get("locale") else APIHelper.SKIP
        service_level = dictionary.get("serviceLevel") if dictionary.get("serviceLevel") else APIHelper.SKIP
        # Return an object of this model
        return cls(country_code,
                   currency_code,
                   beneficiary_identity_entity,
                   locale,
                   service_level)
