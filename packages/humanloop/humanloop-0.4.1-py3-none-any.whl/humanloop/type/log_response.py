# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python SDK.  To install the official Python SDK, run the following command:  ```bash pip install humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://humanloop.gitbook.io/humanloop-docs/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.chat_message import ChatMessage
from humanloop.type.feedback import Feedback
from humanloop.type.src_external_app_models_v4_model_configs_project_model_config_response import SrcExternalAppModelsV4ModelConfigsProjectModelConfigResponse

RequiredLogResponse = TypedDict("RequiredLogResponse", {
    # Function name. If it does not exist, a new function will be created.
    "project": str,

    # Generated output from your model for the provided inputs.
    "output": str,

    # String ID of logged datapoint. Starts with `data_`.
    "id": str,

    # String ID of project the datapoint belongs to. Starts with `pr_`.
    "project_id": str,
    })

OptionalLogResponse = TypedDict("OptionalLogResponse", {
    # Session ID.
    "session_id": str,

    # Id associated to the parent datapoint. Useful when providing a trace from a chain.
    "parent_id": str,

    # Unique ID of an experiment trial to associate to the log.
    "trial_id": str,

    # The inputs passed to the prompt template.
    "inputs": typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]],

    # The messages passed to the to provider chat endpoint.
    "messages": typing.List[ChatMessage],

    # Identifies where the model was called from.
    "source": str,

    # The model config used for this datapoint.
    "model_config": SrcExternalAppModelsV4ModelConfigsProjectModelConfigResponse,

    # Additional metadata logged for reference.
    "metadata": typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]],

    # Feedback associated to the datapoint.
    "feedback": typing.Union[Feedback, typing.List[Feedback]],

    # Timestamp for when the datapoint was created.
    "created_at": datetime,

    # User email address provided when creating the datapoint.
    "user": str,

    # Original response from the provider.
    "provider_response": typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]],

    # Latency of provider response.
    "provider_latency": typing.Union[int, float],

    # Raw output from the provider.
    "raw_output": str,

    # Reason the generation finished.
    "finish_reason": str,
    }, total=False)

class LogResponse(RequiredLogResponse, OptionalLogResponse):
    pass
