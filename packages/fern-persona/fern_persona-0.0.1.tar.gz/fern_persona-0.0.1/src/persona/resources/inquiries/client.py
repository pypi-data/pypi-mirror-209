# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.conflict_error import ConflictError
from ...errors.not_found_error import NotFoundError
from ...types.inquiries_approve_request_meta import InquiriesApproveRequestMeta
from ...types.inquiries_approve_response import InquiriesApproveResponse
from ...types.inquiries_create_request_data import InquiriesCreateRequestData
from ...types.inquiries_create_response import InquiriesCreateResponse
from ...types.inquiries_decline_request_meta import InquiriesDeclineRequestMeta
from ...types.inquiries_decline_response import InquiriesDeclineResponse
from ...types.inquiries_list_all_response import InquiriesListAllResponse
from ...types.inquiries_redact_response import InquiriesRedactResponse
from ...types.inquiries_resume_response import InquiriesResumeResponse
from ...types.inquiries_retrieve_response import InquiriesRetrieveResponse
from ...types.inquiries_update_request_data import InquiriesUpdateRequestData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InquiriesClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def resume(
        self,
        inquiry_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesResumeResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/resume"),
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Idempotency-Key": idempotency_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesResumeResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(self, inquiry_id: str, *, key_inflection: typing.Optional[str] = None) -> InquiriesRetrieveResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
            headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesRetrieveResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, inquiry_id: str, *, data: InquiriesUpdateRequestData, key_inflection: typing.Optional[str] = None
    ) -> None:
        _response = httpx.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
            json=jsonable_encoder({"data": data}),
            headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def redact(self, inquiry_id: str, *, key_inflection: typing.Optional[str] = None) -> InquiriesRedactResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
            headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesRedactResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def approve(
        self,
        inquiry_id: str,
        *,
        meta: typing.Optional[InquiriesApproveRequestMeta] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesApproveResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/approve"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Idempotency-Key": idempotency_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesApproveResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def decline(
        self,
        inquiry_id: str,
        *,
        meta: typing.Optional[InquiriesDeclineRequestMeta] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesDeclineResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/decline"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Idempotency-Key": idempotency_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesDeclineResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_all(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_account_id: typing.Optional[str] = None,
        filter_reference_id: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> InquiriesListAllResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "inquiries"),
            params={
                "page[after]": page_after,
                "page[before]": page_before,
                "page[size]": page_size,
                "filter[account-id]": filter_account_id,
                "filter[reference-id]": filter_reference_id,
            },
            headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesListAllResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        data: InquiriesCreateRequestData,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesCreateResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "inquiries"),
            json=jsonable_encoder({"data": data}),
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Idempotency-Key": idempotency_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInquiriesClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def resume(
        self,
        inquiry_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesResumeResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/resume"),
                headers=remove_none_from_headers(
                    {
                        "Key-Inflection": key_inflection,
                        "Idempotency-Key": idempotency_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesResumeResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self, inquiry_id: str, *, key_inflection: typing.Optional[str] = None
    ) -> InquiriesRetrieveResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
                headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesRetrieveResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, inquiry_id: str, *, data: InquiriesUpdateRequestData, key_inflection: typing.Optional[str] = None
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PATCH",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
                json=jsonable_encoder({"data": data}),
                headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def redact(self, inquiry_id: str, *, key_inflection: typing.Optional[str] = None) -> InquiriesRedactResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}"),
                headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesRedactResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def approve(
        self,
        inquiry_id: str,
        *,
        meta: typing.Optional[InquiriesApproveRequestMeta] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesApproveResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/approve"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "Key-Inflection": key_inflection,
                        "Idempotency-Key": idempotency_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesApproveResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def decline(
        self,
        inquiry_id: str,
        *,
        meta: typing.Optional[InquiriesDeclineRequestMeta] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesDeclineResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"inquiries/{inquiry_id}/decline"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "Key-Inflection": key_inflection,
                        "Idempotency-Key": idempotency_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesDeclineResponse, _response.json())  # type: ignore
        if _response.status_code == 409:
            raise ConflictError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_all(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_account_id: typing.Optional[str] = None,
        filter_reference_id: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> InquiriesListAllResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "inquiries"),
                params={
                    "page[after]": page_after,
                    "page[before]": page_before,
                    "page[size]": page_size,
                    "filter[account-id]": filter_account_id,
                    "filter[reference-id]": filter_reference_id,
                },
                headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesListAllResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        data: InquiriesCreateRequestData,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> InquiriesCreateResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "inquiries"),
                json=jsonable_encoder({"data": data}),
                headers=remove_none_from_headers(
                    {
                        "Key-Inflection": key_inflection,
                        "Idempotency-Key": idempotency_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(InquiriesCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
