"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.add_dependencies_for_task_request import AddDependenciesForTaskRequest
from asana_preview.model.add_dependents_for_task_request import AddDependentsForTaskRequest
from asana_preview.model.add_project_for_task_request import AddProjectForTaskRequest
from asana_preview.model.add_tag_for_task_request import AddTagForTaskRequest
from asana_preview.model.create_task201_response import CreateTask201Response
from asana_preview.model.create_task_request import CreateTaskRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.duplicate_task_request import DuplicateTaskRequest
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_job200_response import GetJob200Response
from asana_preview.model.get_tasks200_response import GetTasks200Response
from asana_preview.model.remove_follower_for_task_request import RemoveFollowerForTaskRequest
from asana_preview.model.remove_project_for_task_request import RemoveProjectForTaskRequest
from asana_preview.model.remove_tag_for_task_request import RemoveTagForTaskRequest
from asana_preview.model.set_parent_for_task_request import SetParentForTaskRequest


class TasksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_dependencies_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/addDependencies',
                'operation_id': 'add_dependencies_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_dependencies_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_dependencies_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_dependencies_for_task_request':
                        (AddDependenciesForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_dependencies_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_dependents_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/addDependents',
                'operation_id': 'add_dependents_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_dependents_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_dependents_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_dependents_for_task_request':
                        (AddDependentsForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_dependents_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_project_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/addProject',
                'operation_id': 'add_project_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_project_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_project_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_project_for_task_request':
                        (AddProjectForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_project_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_tag_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/addTag',
                'operation_id': 'add_tag_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_tag_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_tag_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_tag_for_task_request':
                        (AddTagForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_tag_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_subtask_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/subtasks',
                'operation_id': 'create_subtask_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'create_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                    'create_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'create_task_request':
                        (CreateTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'create_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks',
                'operation_id': 'create_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'create_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'create_task_request':
                        (CreateTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'create_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}',
                'operation_id': 'delete_task',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.duplicate_task_endpoint = _Endpoint(
            settings={
                'response_type': (GetJob200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/duplicate',
                'operation_id': 'duplicate_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'duplicate_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                    'duplicate_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "NEW_PROJECT": "new_project",
                        "STATUS": "status",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "NEW_TASK_TEMPLATE": "new_task_template",
                        "NEW_PROJECT_TEMPLATE": "new_project_template",
                        "NEW_TASK": "new_task"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'duplicate_task_request':
                        (DuplicateTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'duplicate_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_dependencies_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/dependencies',
                'operation_id': 'get_dependencies_for_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_dependents_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/dependents',
                'operation_id': 'get_dependents_for_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_subtasks_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/subtasks',
                'operation_id': 'get_subtasks_for_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}',
                'operation_id': 'get_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tasks_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks',
                'operation_id': 'get_tasks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'opt_pretty',
                    'limit',
                    'offset',
                    'assignee',
                    'project',
                    'section',
                    'workspace',
                    'completed_since',
                    'modified_since',
                    'opt_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'assignee':
                        (str,),
                    'project':
                        (str,),
                    'section':
                        (str,),
                    'workspace':
                        (str,),
                    'completed_since':
                        (datetime,),
                    'modified_since':
                        (datetime,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'assignee': 'assignee',
                    'project': 'project',
                    'section': 'section',
                    'workspace': 'workspace',
                    'completed_since': 'completed_since',
                    'modified_since': 'modified_since',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'assignee': 'query',
                    'project': 'query',
                    'section': 'query',
                    'workspace': 'query',
                    'completed_since': 'query',
                    'modified_since': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tasks_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/tasks',
                'operation_id': 'get_tasks_for_project',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'completed_since',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'completed_since':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'completed_since': 'completed_since',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'completed_since': 'query',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tasks_for_section_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/sections/{section_gid}/tasks',
                'operation_id': 'get_tasks_for_section',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'section_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'section_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'section_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'section_gid': 'section_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'section_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tasks_for_tag_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tags/{tag_gid}/tasks',
                'operation_id': 'get_tasks_for_tag',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tag_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'tag_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'tag_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'tag_gid': 'tag_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'tag_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tasks_for_user_task_list_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/user_task_lists/{user_task_list_gid}/tasks',
                'operation_id': 'get_tasks_for_user_task_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_task_list_gid',
                    'completed_since',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'user_task_list_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'user_task_list_gid':
                        (str,),
                    'completed_since':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'user_task_list_gid': 'user_task_list_gid',
                    'completed_since': 'completed_since',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'user_task_list_gid': 'path',
                    'completed_since': 'query',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_dependencies_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/removeDependencies',
                'operation_id': 'remove_dependencies_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_dependencies_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_dependencies_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_dependencies_for_task_request':
                        (AddDependenciesForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_dependencies_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_dependents_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/removeDependents',
                'operation_id': 'remove_dependents_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'add_dependents_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'add_dependents_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'add_dependents_for_task_request':
                        (AddDependentsForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'add_dependents_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_follower_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/removeFollowers',
                'operation_id': 'remove_follower_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'remove_follower_for_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                    'remove_follower_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'remove_follower_for_task_request':
                        (RemoveFollowerForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'remove_follower_for_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_project_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/removeProject',
                'operation_id': 'remove_project_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'remove_project_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'remove_project_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'remove_project_for_task_request':
                        (RemoveProjectForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'remove_project_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_tag_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/removeTag',
                'operation_id': 'remove_tag_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'remove_tag_for_task_request',
                    'opt_pretty',
                ],
                'required': [
                    'task_gid',
                    'remove_tag_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'remove_tag_for_task_request':
                        (RemoveTagForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'task_gid': 'path',
                    'remove_tag_for_task_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.search_tasks_for_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (GetTasks200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/workspaces/{workspace_gid}/tasks/search',
                'operation_id': 'search_tasks_for_workspace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace_gid',
                    'opt_pretty',
                    'text',
                    'resource_subtype',
                    'assignee_any',
                    'assignee_not',
                    'portfolios_any',
                    'projects_any',
                    'projects_not',
                    'projects_all',
                    'sections_any',
                    'sections_not',
                    'sections_all',
                    'tags_any',
                    'tags_not',
                    'tags_all',
                    'teams_any',
                    'followers_not',
                    'created_by_any',
                    'created_by_not',
                    'assigned_by_any',
                    'assigned_by_not',
                    'liked_by_not',
                    'commented_on_by_not',
                    'due_on_before',
                    'due_on_after',
                    'due_on',
                    'due_at_before',
                    'due_at_after',
                    'start_on_before',
                    'start_on_after',
                    'start_on',
                    'created_on_before',
                    'created_on_after',
                    'created_on',
                    'created_at_before',
                    'created_at_after',
                    'completed_on_before',
                    'completed_on_after',
                    'completed_on',
                    'completed_at_before',
                    'completed_at_after',
                    'modified_on_before',
                    'modified_on_after',
                    'modified_on',
                    'modified_at_before',
                    'modified_at_after',
                    'is_blocking',
                    'is_blocked',
                    'has_attachment',
                    'completed',
                    'is_subtask',
                    'sort_by',
                    'sort_ascending',
                    'opt_fields',
                ],
                'required': [
                    'workspace_gid',
                ],
                'nullable': [
                    'due_on',
                    'start_on',
                    'created_on',
                    'completed_on',
                    'modified_on',
                ],
                'enum': [
                    'resource_subtype',
                    'sort_by',
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('resource_subtype',): {

                        "DEFAULT_TASK": "default_task",
                        "MILESTONE": "milestone"
                    },
                    ('sort_by',): {

                        "DUE_DATE": "due_date",
                        "CREATED_AT": "created_at",
                        "COMPLETED_AT": "completed_at",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at"
                    },
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'workspace_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'text':
                        (str,),
                    'resource_subtype':
                        (str,),
                    'assignee_any':
                        (str,),
                    'assignee_not':
                        (str,),
                    'portfolios_any':
                        (str,),
                    'projects_any':
                        (str,),
                    'projects_not':
                        (str,),
                    'projects_all':
                        (str,),
                    'sections_any':
                        (str,),
                    'sections_not':
                        (str,),
                    'sections_all':
                        (str,),
                    'tags_any':
                        (str,),
                    'tags_not':
                        (str,),
                    'tags_all':
                        (str,),
                    'teams_any':
                        (str,),
                    'followers_not':
                        (str,),
                    'created_by_any':
                        (str,),
                    'created_by_not':
                        (str,),
                    'assigned_by_any':
                        (str,),
                    'assigned_by_not':
                        (str,),
                    'liked_by_not':
                        (str,),
                    'commented_on_by_not':
                        (str,),
                    'due_on_before':
                        (date,),
                    'due_on_after':
                        (date,),
                    'due_on':
                        (date, none_type,),
                    'due_at_before':
                        (datetime,),
                    'due_at_after':
                        (datetime,),
                    'start_on_before':
                        (date,),
                    'start_on_after':
                        (date,),
                    'start_on':
                        (date, none_type,),
                    'created_on_before':
                        (date,),
                    'created_on_after':
                        (date,),
                    'created_on':
                        (date, none_type,),
                    'created_at_before':
                        (datetime,),
                    'created_at_after':
                        (datetime,),
                    'completed_on_before':
                        (date,),
                    'completed_on_after':
                        (date,),
                    'completed_on':
                        (date, none_type,),
                    'completed_at_before':
                        (datetime,),
                    'completed_at_after':
                        (datetime,),
                    'modified_on_before':
                        (date,),
                    'modified_on_after':
                        (date,),
                    'modified_on':
                        (date, none_type,),
                    'modified_at_before':
                        (datetime,),
                    'modified_at_after':
                        (datetime,),
                    'is_blocking':
                        (bool,),
                    'is_blocked':
                        (bool,),
                    'has_attachment':
                        (bool,),
                    'completed':
                        (bool,),
                    'is_subtask':
                        (bool,),
                    'sort_by':
                        (str,),
                    'sort_ascending':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace_gid': 'workspace_gid',
                    'opt_pretty': 'opt_pretty',
                    'text': 'text',
                    'resource_subtype': 'resource_subtype',
                    'assignee_any': 'assignee.any',
                    'assignee_not': 'assignee.not',
                    'portfolios_any': 'portfolios.any',
                    'projects_any': 'projects.any',
                    'projects_not': 'projects.not',
                    'projects_all': 'projects.all',
                    'sections_any': 'sections.any',
                    'sections_not': 'sections.not',
                    'sections_all': 'sections.all',
                    'tags_any': 'tags.any',
                    'tags_not': 'tags.not',
                    'tags_all': 'tags.all',
                    'teams_any': 'teams.any',
                    'followers_not': 'followers.not',
                    'created_by_any': 'created_by.any',
                    'created_by_not': 'created_by.not',
                    'assigned_by_any': 'assigned_by.any',
                    'assigned_by_not': 'assigned_by.not',
                    'liked_by_not': 'liked_by.not',
                    'commented_on_by_not': 'commented_on_by.not',
                    'due_on_before': 'due_on.before',
                    'due_on_after': 'due_on.after',
                    'due_on': 'due_on',
                    'due_at_before': 'due_at.before',
                    'due_at_after': 'due_at.after',
                    'start_on_before': 'start_on.before',
                    'start_on_after': 'start_on.after',
                    'start_on': 'start_on',
                    'created_on_before': 'created_on.before',
                    'created_on_after': 'created_on.after',
                    'created_on': 'created_on',
                    'created_at_before': 'created_at.before',
                    'created_at_after': 'created_at.after',
                    'completed_on_before': 'completed_on.before',
                    'completed_on_after': 'completed_on.after',
                    'completed_on': 'completed_on',
                    'completed_at_before': 'completed_at.before',
                    'completed_at_after': 'completed_at.after',
                    'modified_on_before': 'modified_on.before',
                    'modified_on_after': 'modified_on.after',
                    'modified_on': 'modified_on',
                    'modified_at_before': 'modified_at.before',
                    'modified_at_after': 'modified_at.after',
                    'is_blocking': 'is_blocking',
                    'is_blocked': 'is_blocked',
                    'has_attachment': 'has_attachment',
                    'completed': 'completed',
                    'is_subtask': 'is_subtask',
                    'sort_by': 'sort_by',
                    'sort_ascending': 'sort_ascending',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace_gid': 'path',
                    'opt_pretty': 'query',
                    'text': 'query',
                    'resource_subtype': 'query',
                    'assignee_any': 'query',
                    'assignee_not': 'query',
                    'portfolios_any': 'query',
                    'projects_any': 'query',
                    'projects_not': 'query',
                    'projects_all': 'query',
                    'sections_any': 'query',
                    'sections_not': 'query',
                    'sections_all': 'query',
                    'tags_any': 'query',
                    'tags_not': 'query',
                    'tags_all': 'query',
                    'teams_any': 'query',
                    'followers_not': 'query',
                    'created_by_any': 'query',
                    'created_by_not': 'query',
                    'assigned_by_any': 'query',
                    'assigned_by_not': 'query',
                    'liked_by_not': 'query',
                    'commented_on_by_not': 'query',
                    'due_on_before': 'query',
                    'due_on_after': 'query',
                    'due_on': 'query',
                    'due_at_before': 'query',
                    'due_at_after': 'query',
                    'start_on_before': 'query',
                    'start_on_after': 'query',
                    'start_on': 'query',
                    'created_on_before': 'query',
                    'created_on_after': 'query',
                    'created_on': 'query',
                    'created_at_before': 'query',
                    'created_at_after': 'query',
                    'completed_on_before': 'query',
                    'completed_on_after': 'query',
                    'completed_on': 'query',
                    'completed_at_before': 'query',
                    'completed_at_after': 'query',
                    'modified_on_before': 'query',
                    'modified_on_after': 'query',
                    'modified_on': 'query',
                    'modified_at_before': 'query',
                    'modified_at_after': 'query',
                    'is_blocking': 'query',
                    'is_blocked': 'query',
                    'has_attachment': 'query',
                    'completed': 'query',
                    'is_subtask': 'query',
                    'sort_by': 'query',
                    'sort_ascending': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.set_parent_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/setParent',
                'operation_id': 'set_parent_for_task',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'set_parent_for_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                    'set_parent_for_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'set_parent_for_task_request':
                        (SetParentForTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'set_parent_for_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_task_endpoint = _Endpoint(
            settings={
                'response_type': (CreateTask201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}',
                'operation_id': 'update_task',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'create_task_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                    'create_task_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "ACTUAL_TIME_MINUTES": "actual_time_minutes",
                        "TAGS": "tags",
                        "DUE_ON": "due_on",
                        "START_AT": "start_at",
                        "NUM_LIKES": "num_likes",
                        "PARENT": "parent",
                        "HEARTS": "hearts",
                        "LIKES": "likes",
                        "MODIFIED_AT": "modified_at",
                        "IS_RENDERED_AS_SEPARATOR": "is_rendered_as_separator",
                        "DEPENDENTS": "dependents",
                        "HEARTED": "hearted",
                        "EXTERNAL": "external",
                        "PERMALINK_URL": "permalink_url",
                        "PROJECTS": "projects",
                        "ASSIGNEE_STATUS": "assignee_status",
                        "DEPENDENCIES": "dependencies",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "NOTES": "notes",
                        "MEMBERSHIPS": "memberships",
                        "WORKSPACE": "workspace",
                        "DUE_AT": "due_at",
                        "CREATED_AT": "created_at",
                        "ASSIGNEE_SECTION": "assignee_section",
                        "NUM_SUBTASKS": "num_subtasks",
                        "START_ON": "start_on",
                        "NUM_HEARTS": "num_hearts",
                        "CUSTOM_FIELDS": "custom_fields",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "APPROVAL_STATUS": "approval_status",
                        "LIKED": "liked",
                        "ASSIGNEE": "assignee",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'create_task_request':
                        (CreateTaskRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'create_task_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_dependencies_for_task(
        self,
        task_gid,
        add_dependencies_for_task_request,
        **kwargs
    ):
        """Set dependencies for a task  # noqa: E501

        Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_dependencies_for_task(task_gid, add_dependencies_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_dependencies_for_task_request (AddDependenciesForTaskRequest): The list of tasks to set as dependencies.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_dependencies_for_task_request'] = \
            add_dependencies_for_task_request
        return self.add_dependencies_for_task_endpoint.call_with_http_info(**kwargs)

    def add_dependents_for_task(
        self,
        task_gid,
        add_dependents_for_task_request,
        **kwargs
    ):
        """Set dependents for a task  # noqa: E501

        Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_dependents_for_task(task_gid, add_dependents_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_dependents_for_task_request (AddDependentsForTaskRequest): The list of tasks to add as dependents.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_dependents_for_task_request'] = \
            add_dependents_for_task_request
        return self.add_dependents_for_task_endpoint.call_with_http_info(**kwargs)

    def add_project_for_task(
        self,
        task_gid,
        add_project_for_task_request,
        **kwargs
    ):
        """Add a project to a task  # noqa: E501

        Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_project_for_task(task_gid, add_project_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_project_for_task_request (AddProjectForTaskRequest): The project to add the task to.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_project_for_task_request'] = \
            add_project_for_task_request
        return self.add_project_for_task_endpoint.call_with_http_info(**kwargs)

    def add_tag_for_task(
        self,
        task_gid,
        add_tag_for_task_request,
        **kwargs
    ):
        """Add a tag to a task  # noqa: E501

        Adds a tag to a task. Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_tag_for_task(task_gid, add_tag_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_tag_for_task_request (AddTagForTaskRequest): The tag to add to the task.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_tag_for_task_request'] = \
            add_tag_for_task_request
        return self.add_tag_for_task_endpoint.call_with_http_info(**kwargs)

    def create_subtask_for_task(
        self,
        task_gid,
        create_task_request,
        **kwargs
    ):
        """Create a subtask  # noqa: E501

        Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_subtask_for_task(task_gid, create_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            create_task_request (CreateTaskRequest): The new subtask to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['create_task_request'] = \
            create_task_request
        return self.create_subtask_for_task_endpoint.call_with_http_info(**kwargs)

    def create_task(
        self,
        create_task_request,
        **kwargs
    ):
        """Create a task  # noqa: E501

        Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_task(create_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_task_request (CreateTaskRequest): The task to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_task_request'] = \
            create_task_request
        return self.create_task_endpoint.call_with_http_info(**kwargs)

    def delete_task(
        self,
        task_gid,
        **kwargs
    ):
        """Delete a task  # noqa: E501

        A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.delete_task_endpoint.call_with_http_info(**kwargs)

    def duplicate_task(
        self,
        task_gid,
        duplicate_task_request,
        **kwargs
    ):
        """Duplicate a task  # noqa: E501

        Creates and returns a job that will asynchronously handle the duplication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_task(task_gid, duplicate_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            duplicate_task_request (DuplicateTaskRequest): Describes the duplicate's name and the fields that will be duplicated.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetJob200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['duplicate_task_request'] = \
            duplicate_task_request
        return self.duplicate_task_endpoint.call_with_http_info(**kwargs)

    def get_dependencies_for_task(
        self,
        task_gid,
        **kwargs
    ):
        """Get dependencies from a task  # noqa: E501

        Returns the compact representations of all of the dependencies of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dependencies_for_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.get_dependencies_for_task_endpoint.call_with_http_info(**kwargs)

    def get_dependents_for_task(
        self,
        task_gid,
        **kwargs
    ):
        """Get dependents from a task  # noqa: E501

        Returns the compact representations of all of the dependents of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dependents_for_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.get_dependents_for_task_endpoint.call_with_http_info(**kwargs)

    def get_subtasks_for_task(
        self,
        task_gid,
        **kwargs
    ):
        """Get subtasks from a task  # noqa: E501

        Returns a compact representation of all of the subtasks of a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_subtasks_for_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.get_subtasks_for_task_endpoint.call_with_http_info(**kwargs)

    def get_task(
        self,
        task_gid,
        **kwargs
    ):
        """Get a task  # noqa: E501

        Returns the complete task record for a single task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.get_task_endpoint.call_with_http_info(**kwargs)

    def get_tasks(
        self,
        **kwargs
    ):
        """Get multiple tasks  # noqa: E501

        Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tasks(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            assignee (str): The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified. *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*. [optional]
            project (str): The project to filter tasks on.. [optional]
            section (str): The section to filter tasks on.. [optional]
            workspace (str): The workspace to filter tasks on. *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*. [optional]
            completed_since (datetime): Only return tasks that are either incomplete or that have been completed since this time.. [optional]
            modified_since (datetime): Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_tasks_endpoint.call_with_http_info(**kwargs)

    def get_tasks_for_project(
        self,
        project_gid,
        **kwargs
    ):
        """Get tasks from a project  # noqa: E501

        Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tasks_for_project(project_gid, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.

        Keyword Args:
            completed_since (str): Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. . [optional]
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        return self.get_tasks_for_project_endpoint.call_with_http_info(**kwargs)

    def get_tasks_for_section(
        self,
        section_gid,
        **kwargs
    ):
        """Get tasks from a section  # noqa: E501

        *Board view only*: Returns the compact section records for all tasks within the given section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tasks_for_section(section_gid, async_req=True)
        >>> result = thread.get()

        Args:
            section_gid (str): The globally unique identifier for the section.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['section_gid'] = \
            section_gid
        return self.get_tasks_for_section_endpoint.call_with_http_info(**kwargs)

    def get_tasks_for_tag(
        self,
        tag_gid,
        **kwargs
    ):
        """Get tasks from a tag  # noqa: E501

        Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tasks_for_tag(tag_gid, async_req=True)
        >>> result = thread.get()

        Args:
            tag_gid (str): Globally unique identifier for the tag.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tag_gid'] = \
            tag_gid
        return self.get_tasks_for_tag_endpoint.call_with_http_info(**kwargs)

    def get_tasks_for_user_task_list(
        self,
        user_task_list_gid,
        **kwargs
    ):
        """Get tasks from a user task list  # noqa: E501

        Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tasks_for_user_task_list(user_task_list_gid, async_req=True)
        >>> result = thread.get()

        Args:
            user_task_list_gid (str): Globally unique identifier for the user task list.

        Keyword Args:
            completed_since (str): Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. . [optional]
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_task_list_gid'] = \
            user_task_list_gid
        return self.get_tasks_for_user_task_list_endpoint.call_with_http_info(**kwargs)

    def remove_dependencies_for_task(
        self,
        task_gid,
        add_dependencies_for_task_request,
        **kwargs
    ):
        """Unlink dependencies from a task  # noqa: E501

        Unlinks a set of dependencies from this task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_dependencies_for_task(task_gid, add_dependencies_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_dependencies_for_task_request (AddDependenciesForTaskRequest): The list of tasks to unlink as dependencies.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_dependencies_for_task_request'] = \
            add_dependencies_for_task_request
        return self.remove_dependencies_for_task_endpoint.call_with_http_info(**kwargs)

    def remove_dependents_for_task(
        self,
        task_gid,
        add_dependents_for_task_request,
        **kwargs
    ):
        """Unlink dependents from a task  # noqa: E501

        Unlinks a set of dependents from this task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_dependents_for_task(task_gid, add_dependents_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            add_dependents_for_task_request (AddDependentsForTaskRequest): The list of tasks to remove as dependents.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['add_dependents_for_task_request'] = \
            add_dependents_for_task_request
        return self.remove_dependents_for_task_endpoint.call_with_http_info(**kwargs)

    def remove_follower_for_task(
        self,
        task_gid,
        remove_follower_for_task_request,
        **kwargs
    ):
        """Remove followers from a task  # noqa: E501

        Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_follower_for_task(task_gid, remove_follower_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            remove_follower_for_task_request (RemoveFollowerForTaskRequest): The followers to remove from the task.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['remove_follower_for_task_request'] = \
            remove_follower_for_task_request
        return self.remove_follower_for_task_endpoint.call_with_http_info(**kwargs)

    def remove_project_for_task(
        self,
        task_gid,
        remove_project_for_task_request,
        **kwargs
    ):
        """Remove a project from a task  # noqa: E501

        Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_project_for_task(task_gid, remove_project_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            remove_project_for_task_request (RemoveProjectForTaskRequest): The project to remove the task from.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['remove_project_for_task_request'] = \
            remove_project_for_task_request
        return self.remove_project_for_task_endpoint.call_with_http_info(**kwargs)

    def remove_tag_for_task(
        self,
        task_gid,
        remove_tag_for_task_request,
        **kwargs
    ):
        """Remove a tag from a task  # noqa: E501

        Removes a tag from a task. Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_tag_for_task(task_gid, remove_tag_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            remove_tag_for_task_request (RemoveTagForTaskRequest): The tag to remove from the task.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['remove_tag_for_task_request'] = \
            remove_tag_for_task_request
        return self.remove_tag_for_task_endpoint.call_with_http_info(**kwargs)

    def search_tasks_for_workspace(
        self,
        workspace_gid,
        **kwargs
    ):
        """Search tasks in a workspace  # noqa: E501

        To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_tasks_for_workspace(workspace_gid, async_req=True)
        >>> result = thread.get()

        Args:
            workspace_gid (str): Globally unique identifier for the workspace or organization.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            text (str): Performs full-text search on both task name and description. [optional]
            resource_subtype (str): Filters results by the task's resource_subtype. [optional] if omitted the server will use the default value of "milestone"
            assignee_any (str): Comma-separated list of user identifiers. [optional]
            assignee_not (str): Comma-separated list of user identifiers. [optional]
            portfolios_any (str): Comma-separated list of portfolio IDs. [optional]
            projects_any (str): Comma-separated list of project IDs. [optional]
            projects_not (str): Comma-separated list of project IDs. [optional]
            projects_all (str): Comma-separated list of project IDs. [optional]
            sections_any (str): Comma-separated list of section or column IDs. [optional]
            sections_not (str): Comma-separated list of section or column IDs. [optional]
            sections_all (str): Comma-separated list of section or column IDs. [optional]
            tags_any (str): Comma-separated list of tag IDs. [optional]
            tags_not (str): Comma-separated list of tag IDs. [optional]
            tags_all (str): Comma-separated list of tag IDs. [optional]
            teams_any (str): Comma-separated list of team IDs. [optional]
            followers_not (str): Comma-separated list of user identifiers. [optional]
            created_by_any (str): Comma-separated list of user identifiers. [optional]
            created_by_not (str): Comma-separated list of user identifiers. [optional]
            assigned_by_any (str): Comma-separated list of user identifiers. [optional]
            assigned_by_not (str): Comma-separated list of user identifiers. [optional]
            liked_by_not (str): Comma-separated list of user identifiers. [optional]
            commented_on_by_not (str): Comma-separated list of user identifiers. [optional]
            due_on_before (date): ISO 8601 date string. [optional]
            due_on_after (date): ISO 8601 date string. [optional]
            due_on (date, none_type): ISO 8601 date string or `null`. [optional]
            due_at_before (datetime): ISO 8601 datetime string. [optional]
            due_at_after (datetime): ISO 8601 datetime string. [optional]
            start_on_before (date): ISO 8601 date string. [optional]
            start_on_after (date): ISO 8601 date string. [optional]
            start_on (date, none_type): ISO 8601 date string or `null`. [optional]
            created_on_before (date): ISO 8601 date string. [optional]
            created_on_after (date): ISO 8601 date string. [optional]
            created_on (date, none_type): ISO 8601 date string or `null`. [optional]
            created_at_before (datetime): ISO 8601 datetime string. [optional]
            created_at_after (datetime): ISO 8601 datetime string. [optional]
            completed_on_before (date): ISO 8601 date string. [optional]
            completed_on_after (date): ISO 8601 date string. [optional]
            completed_on (date, none_type): ISO 8601 date string or `null`. [optional]
            completed_at_before (datetime): ISO 8601 datetime string. [optional]
            completed_at_after (datetime): ISO 8601 datetime string. [optional]
            modified_on_before (date): ISO 8601 date string. [optional]
            modified_on_after (date): ISO 8601 date string. [optional]
            modified_on (date, none_type): ISO 8601 date string or `null`. [optional]
            modified_at_before (datetime): ISO 8601 datetime string. [optional]
            modified_at_after (datetime): ISO 8601 datetime string. [optional]
            is_blocking (bool): Filter to incomplete tasks with dependents. [optional]
            is_blocked (bool): Filter to tasks with incomplete dependencies. [optional]
            has_attachment (bool): Filter to tasks with attachments. [optional]
            completed (bool): Filter to completed tasks. [optional]
            is_subtask (bool): Filter to subtasks. [optional]
            sort_by (str): One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`. [optional] if omitted the server will use the default value of "modified_at"
            sort_ascending (bool): Default `false`. [optional] if omitted the server will use the default value of False
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTasks200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace_gid'] = \
            workspace_gid
        return self.search_tasks_for_workspace_endpoint.call_with_http_info(**kwargs)

    def set_parent_for_task(
        self,
        task_gid,
        set_parent_for_task_request,
        **kwargs
    ):
        """Set the parent of a task  # noqa: E501

        parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_parent_for_task(task_gid, set_parent_for_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            set_parent_for_task_request (SetParentForTaskRequest): The new parent of the subtask.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['set_parent_for_task_request'] = \
            set_parent_for_task_request
        return self.set_parent_for_task_endpoint.call_with_http_info(**kwargs)

    def update_task(
        self,
        task_gid,
        create_task_request,
        **kwargs
    ):
        """Update a task  # noqa: E501

        A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task(task_gid, create_task_request, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.
            create_task_request (CreateTaskRequest): The task to update.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateTask201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        kwargs['create_task_request'] = \
            create_task_request
        return self.update_task_endpoint.call_with_http_info(**kwargs)

