"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from asana_preview.exceptions import ApiAttributeError


def lazy_import():
    from asana_preview.model.create_project_from_asana_template_request_all_of import CreateProjectFromAsanaTemplateRequestAllOf
    from asana_preview.model.custom_field_response_people_value_inner import CustomFieldResponsePeopleValueInner
    from asana_preview.model.goal_response_likes_inner import GoalResponseLikesInner
    from asana_preview.model.job_base_new_project import JobBaseNewProject
    from asana_preview.model.story_response_assignee import StoryResponseAssignee
    from asana_preview.model.task_base_external import TaskBaseExternal
    from asana_preview.model.task_base_memberships_inner import TaskBaseMembershipsInner
    from asana_preview.model.task_response_assignee import TaskResponseAssignee
    from asana_preview.model.task_response_assignee_section import TaskResponseAssigneeSection
    from asana_preview.model.task_response_custom_fields_inner import TaskResponseCustomFieldsInner
    from asana_preview.model.task_response_parent import TaskResponseParent
    from asana_preview.model.task_response_tags_inner import TaskResponseTagsInner
    from asana_preview.model.task_response_workspace import TaskResponseWorkspace
    globals()['CreateProjectFromAsanaTemplateRequestAllOf'] = CreateProjectFromAsanaTemplateRequestAllOf
    globals()['CustomFieldResponsePeopleValueInner'] = CustomFieldResponsePeopleValueInner
    globals()['GoalResponseLikesInner'] = GoalResponseLikesInner
    globals()['JobBaseNewProject'] = JobBaseNewProject
    globals()['StoryResponseAssignee'] = StoryResponseAssignee
    globals()['TaskBaseExternal'] = TaskBaseExternal
    globals()['TaskBaseMembershipsInner'] = TaskBaseMembershipsInner
    globals()['TaskResponseAssignee'] = TaskResponseAssignee
    globals()['TaskResponseAssigneeSection'] = TaskResponseAssigneeSection
    globals()['TaskResponseCustomFieldsInner'] = TaskResponseCustomFieldsInner
    globals()['TaskResponseParent'] = TaskResponseParent
    globals()['TaskResponseTagsInner'] = TaskResponseTagsInner
    globals()['TaskResponseWorkspace'] = TaskResponseWorkspace


class TaskResponse(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('resource_subtype',): {
            'DEFAULT_TASK': "default_task",
            'MILESTONE': "milestone",
            'SECTION': "section",
            'APPROVAL': "approval",
        },
        ('approval_status',): {
            'PENDING': "pending",
            'APPROVED': "approved",
            'REJECTED': "rejected",
            'CHANGES_REQUESTED': "changes_requested",
        },
        ('assignee_status',): {
            'TODAY': "today",
            'UPCOMING': "upcoming",
            'LATER': "later",
            'NEW': "new",
            'INBOX': "inbox",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'gid': (str,),  # noqa: E501
            'resource_type': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'resource_subtype': (str,),  # noqa: E501
            'approval_status': (str,),  # noqa: E501
            'assignee_status': (str,),  # noqa: E501
            'completed': (bool,),  # noqa: E501
            'completed_at': (datetime, none_type,),  # noqa: E501
            'completed_by': (StoryResponseAssignee,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'dependencies': ([CreateProjectFromAsanaTemplateRequestAllOf],),  # noqa: E501
            'dependents': ([CreateProjectFromAsanaTemplateRequestAllOf],),  # noqa: E501
            'due_at': (date, none_type,),  # noqa: E501
            'due_on': (date, none_type,),  # noqa: E501
            'external': (TaskBaseExternal,),  # noqa: E501
            'html_notes': (str,),  # noqa: E501
            'hearted': (bool,),  # noqa: E501
            'hearts': ([GoalResponseLikesInner],),  # noqa: E501
            'is_rendered_as_separator': (bool,),  # noqa: E501
            'liked': (bool,),  # noqa: E501
            'likes': ([GoalResponseLikesInner],),  # noqa: E501
            'memberships': ([TaskBaseMembershipsInner],),  # noqa: E501
            'modified_at': (datetime,),  # noqa: E501
            'notes': (str,),  # noqa: E501
            'num_hearts': (int,),  # noqa: E501
            'num_likes': (int,),  # noqa: E501
            'num_subtasks': (int,),  # noqa: E501
            'start_at': (date, none_type,),  # noqa: E501
            'start_on': (date, none_type,),  # noqa: E501
            'actual_time_minutes': (float, none_type,),  # noqa: E501
            'assignee': (TaskResponseAssignee,),  # noqa: E501
            'assignee_section': (TaskResponseAssigneeSection,),  # noqa: E501
            'custom_fields': ([TaskResponseCustomFieldsInner],),  # noqa: E501
            'followers': ([CustomFieldResponsePeopleValueInner],),  # noqa: E501
            'parent': (TaskResponseParent,),  # noqa: E501
            'projects': ([JobBaseNewProject],),  # noqa: E501
            'tags': ([TaskResponseTagsInner],),  # noqa: E501
            'workspace': (TaskResponseWorkspace,),  # noqa: E501
            'permalink_url': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'gid': 'gid',  # noqa: E501
        'resource_type': 'resource_type',  # noqa: E501
        'name': 'name',  # noqa: E501
        'resource_subtype': 'resource_subtype',  # noqa: E501
        'approval_status': 'approval_status',  # noqa: E501
        'assignee_status': 'assignee_status',  # noqa: E501
        'completed': 'completed',  # noqa: E501
        'completed_at': 'completed_at',  # noqa: E501
        'completed_by': 'completed_by',  # noqa: E501
        'created_at': 'created_at',  # noqa: E501
        'dependencies': 'dependencies',  # noqa: E501
        'dependents': 'dependents',  # noqa: E501
        'due_at': 'due_at',  # noqa: E501
        'due_on': 'due_on',  # noqa: E501
        'external': 'external',  # noqa: E501
        'html_notes': 'html_notes',  # noqa: E501
        'hearted': 'hearted',  # noqa: E501
        'hearts': 'hearts',  # noqa: E501
        'is_rendered_as_separator': 'is_rendered_as_separator',  # noqa: E501
        'liked': 'liked',  # noqa: E501
        'likes': 'likes',  # noqa: E501
        'memberships': 'memberships',  # noqa: E501
        'modified_at': 'modified_at',  # noqa: E501
        'notes': 'notes',  # noqa: E501
        'num_hearts': 'num_hearts',  # noqa: E501
        'num_likes': 'num_likes',  # noqa: E501
        'num_subtasks': 'num_subtasks',  # noqa: E501
        'start_at': 'start_at',  # noqa: E501
        'start_on': 'start_on',  # noqa: E501
        'actual_time_minutes': 'actual_time_minutes',  # noqa: E501
        'assignee': 'assignee',  # noqa: E501
        'assignee_section': 'assignee_section',  # noqa: E501
        'custom_fields': 'custom_fields',  # noqa: E501
        'followers': 'followers',  # noqa: E501
        'parent': 'parent',  # noqa: E501
        'projects': 'projects',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'workspace': 'workspace',  # noqa: E501
        'permalink_url': 'permalink_url',  # noqa: E501
    }

    read_only_vars = {
        'gid',  # noqa: E501
        'resource_type',  # noqa: E501
        'completed_at',  # noqa: E501
        'created_at',  # noqa: E501
        'dependencies',  # noqa: E501
        'dependents',  # noqa: E501
        'hearted',  # noqa: E501
        'hearts',  # noqa: E501
        'is_rendered_as_separator',  # noqa: E501
        'likes',  # noqa: E501
        'memberships',  # noqa: E501
        'modified_at',  # noqa: E501
        'num_hearts',  # noqa: E501
        'num_likes',  # noqa: E501
        'num_subtasks',  # noqa: E501
        'actual_time_minutes',  # noqa: E501
        'custom_fields',  # noqa: E501
        'followers',  # noqa: E501
        'projects',  # noqa: E501
        'tags',  # noqa: E501
        'permalink_url',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TaskResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            gid (str): Globally unique identifier of the resource, as a string.. [optional]  # noqa: E501
            resource_type (str): The base type of this resource.. [optional]  # noqa: E501
            name (str): Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.. [optional]  # noqa: E501
            resource_subtype (str): The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.. [optional]  # noqa: E501
            approval_status (str): *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.. [optional]  # noqa: E501
            assignee_status (str): *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.. [optional]  # noqa: E501
            completed (bool): True if the task is currently marked complete, false if not.. [optional]  # noqa: E501
            completed_at (datetime, none_type): The time at which this task was completed, or null if the task is incomplete.. [optional]  # noqa: E501
            completed_by (StoryResponseAssignee): [optional]  # noqa: E501
            created_at (datetime): The time at which this resource was created.. [optional]  # noqa: E501
            dependencies ([CreateProjectFromAsanaTemplateRequestAllOf]): [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.. [optional]  # noqa: E501
            dependents ([CreateProjectFromAsanaTemplateRequestAllOf]): [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.. [optional]  # noqa: E501
            due_at (date, none_type): The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.. [optional]  # noqa: E501
            due_on (date, none_type): The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.. [optional]  # noqa: E501
            external (TaskBaseExternal): [optional]  # noqa: E501
            html_notes (str): [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.. [optional]  # noqa: E501
            hearted (bool): *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.. [optional]  # noqa: E501
            hearts ([GoalResponseLikesInner]): *Deprecated - please use likes instead* Array of likes for users who have hearted this task.. [optional]  # noqa: E501
            is_rendered_as_separator (bool): [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.. [optional]  # noqa: E501
            liked (bool): True if the task is liked by the authorized user, false if not.. [optional]  # noqa: E501
            likes ([GoalResponseLikesInner]): Array of likes for users who have liked this task.. [optional]  # noqa: E501
            memberships ([TaskBaseMembershipsInner]): *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.. [optional]  # noqa: E501
            modified_at (datetime): The time at which this task was last modified.  The following conditions will change `modified_at`:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change `modified_at`:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect `modified_at`). [optional]  # noqa: E501
            notes (str): Free-form textual information associated with the task (i.e. its description).. [optional]  # noqa: E501
            num_hearts (int): *Deprecated - please use likes instead* The number of users who have hearted this task.. [optional]  # noqa: E501
            num_likes (int): The number of users who have liked this task.. [optional]  # noqa: E501
            num_subtasks (int): [Opt In](/docs/inputoutput-options). The number of subtasks on this task. . [optional]  # noqa: E501
            start_at (date, none_type): Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*. [optional]  # noqa: E501
            start_on (date, none_type): The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*. [optional]  # noqa: E501
            actual_time_minutes (float, none_type): This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.. [optional]  # noqa: E501
            assignee (TaskResponseAssignee): [optional]  # noqa: E501
            assignee_section (TaskResponseAssigneeSection): [optional]  # noqa: E501
            custom_fields ([TaskResponseCustomFieldsInner]): Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.. [optional]  # noqa: E501
            followers ([CustomFieldResponsePeopleValueInner]): Array of users following this task.. [optional]  # noqa: E501
            parent (TaskResponseParent): [optional]  # noqa: E501
            projects ([JobBaseNewProject]): *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.. [optional]  # noqa: E501
            tags ([TaskResponseTagsInner]): Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.. [optional]  # noqa: E501
            workspace (TaskResponseWorkspace): [optional]  # noqa: E501
            permalink_url (str): A url that points directly to the object within Asana.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TaskResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            gid (str): Globally unique identifier of the resource, as a string.. [optional]  # noqa: E501
            resource_type (str): The base type of this resource.. [optional]  # noqa: E501
            name (str): Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.. [optional]  # noqa: E501
            resource_subtype (str): The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.. [optional]  # noqa: E501
            approval_status (str): *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.. [optional]  # noqa: E501
            assignee_status (str): *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.. [optional]  # noqa: E501
            completed (bool): True if the task is currently marked complete, false if not.. [optional]  # noqa: E501
            completed_at (datetime, none_type): The time at which this task was completed, or null if the task is incomplete.. [optional]  # noqa: E501
            completed_by (StoryResponseAssignee): [optional]  # noqa: E501
            created_at (datetime): The time at which this resource was created.. [optional]  # noqa: E501
            dependencies ([CreateProjectFromAsanaTemplateRequestAllOf]): [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.. [optional]  # noqa: E501
            dependents ([CreateProjectFromAsanaTemplateRequestAllOf]): [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.. [optional]  # noqa: E501
            due_at (date, none_type): The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.. [optional]  # noqa: E501
            due_on (date, none_type): The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.. [optional]  # noqa: E501
            external (TaskBaseExternal): [optional]  # noqa: E501
            html_notes (str): [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.. [optional]  # noqa: E501
            hearted (bool): *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.. [optional]  # noqa: E501
            hearts ([GoalResponseLikesInner]): *Deprecated - please use likes instead* Array of likes for users who have hearted this task.. [optional]  # noqa: E501
            is_rendered_as_separator (bool): [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.. [optional]  # noqa: E501
            liked (bool): True if the task is liked by the authorized user, false if not.. [optional]  # noqa: E501
            likes ([GoalResponseLikesInner]): Array of likes for users who have liked this task.. [optional]  # noqa: E501
            memberships ([TaskBaseMembershipsInner]): *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.. [optional]  # noqa: E501
            modified_at (datetime): The time at which this task was last modified.  The following conditions will change `modified_at`:  - story is created on a task - story is trashed on a task - attachment is trashed on a task - task is assigned or unassigned - custom field value is changed - the task itself is trashed - Or if any of the following fields are updated:   - completed   - name   - due_date   - description   - attachments   - items   - schedule_status  The following conditions will _not_ change `modified_at`:  - moving to a new container (project, portfolio, etc) - comments being added to the task (but the stories they generate   _will_ affect `modified_at`). [optional]  # noqa: E501
            notes (str): Free-form textual information associated with the task (i.e. its description).. [optional]  # noqa: E501
            num_hearts (int): *Deprecated - please use likes instead* The number of users who have hearted this task.. [optional]  # noqa: E501
            num_likes (int): The number of users who have liked this task.. [optional]  # noqa: E501
            num_subtasks (int): [Opt In](/docs/inputoutput-options). The number of subtasks on this task. . [optional]  # noqa: E501
            start_at (date, none_type): Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*. [optional]  # noqa: E501
            start_on (date, none_type): The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*. [optional]  # noqa: E501
            actual_time_minutes (float, none_type): This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.. [optional]  # noqa: E501
            assignee (TaskResponseAssignee): [optional]  # noqa: E501
            assignee_section (TaskResponseAssigneeSection): [optional]  # noqa: E501
            custom_fields ([TaskResponseCustomFieldsInner]): Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.. [optional]  # noqa: E501
            followers ([CustomFieldResponsePeopleValueInner]): Array of users following this task.. [optional]  # noqa: E501
            parent (TaskResponseParent): [optional]  # noqa: E501
            projects ([JobBaseNewProject]): *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.. [optional]  # noqa: E501
            tags ([TaskResponseTagsInner]): Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.. [optional]  # noqa: E501
            workspace (TaskResponseWorkspace): [optional]  # noqa: E501
            permalink_url (str): A url that points directly to the object within Asana.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
