"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.create_custom_field201_response import CreateCustomField201Response
from asana_preview.model.create_custom_field_request import CreateCustomFieldRequest
from asana_preview.model.create_enum_option_for_custom_field201_response import CreateEnumOptionForCustomField201Response
from asana_preview.model.create_enum_option_for_custom_field_request import CreateEnumOptionForCustomFieldRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_custom_fields_for_workspace200_response import GetCustomFieldsForWorkspace200Response
from asana_preview.model.insert_enum_option_for_custom_field_request import InsertEnumOptionForCustomFieldRequest


class CustomFieldsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (CreateCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields',
                'operation_id': 'create_custom_field',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                    'create_custom_field_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CREATED_BY": "created_by",
                        "CUSTOM_LABEL": "custom_label",
                        "PEOPLE_VALUE": "people_value",
                        "DATE_VALUE": "date_value",
                        "DISPLAY_VALUE": "display_value",
                        "IS_FORMULA_FIELD": "is_formula_field",
                        "FORMAT": "format",
                        "ENUM_OPTIONS": "enum_options",
                        "NAME": "name",
                        "CURRENCY_CODE": "currency_code",
                        "MULTI_ENUM_VALUES": "multi_enum_values",
                        "ENABLED": "enabled",
                        "HAS_NOTIFICATIONS_ENABLED": "has_notifications_enabled",
                        "ASANA_CREATED_FIELD": "asana_created_field",
                        "PRECISION": "precision",
                        "IS_GLOBAL_TO_WORKSPACE": "is_global_to_workspace",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "TYPE": "type",
                        "IS_VALUE_READ_ONLY": "is_value_read_only",
                        "TEXT_VALUE": "text_value",
                        "CUSTOM_LABEL_POSITION": "custom_label_position",
                        "NUMBER_VALUE": "number_value",
                        "DESCRIPTION": "description",
                        "ENUM_VALUE": "enum_value"
                    },
                },
                'openapi_types': {
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                    'create_custom_field_request':
                        (CreateCustomFieldRequest,),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                    'create_custom_field_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_enum_option_for_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (CreateEnumOptionForCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields/{custom_field_gid}/enum_options',
                'operation_id': 'create_enum_option_for_custom_field',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_field_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                    'create_enum_option_for_custom_field_request',
                ],
                'required': [
                    'custom_field_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "COLOR": "color",
                        "NAME": "name",
                        "ENABLED": "enabled"
                    },
                },
                'openapi_types': {
                    'custom_field_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                    'create_enum_option_for_custom_field_request':
                        (CreateEnumOptionForCustomFieldRequest,),
                },
                'attribute_map': {
                    'custom_field_gid': 'custom_field_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'custom_field_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                    'create_enum_option_for_custom_field_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields/{custom_field_gid}',
                'operation_id': 'delete_custom_field',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_field_gid',
                    'opt_pretty',
                ],
                'required': [
                    'custom_field_gid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'custom_field_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'custom_field_gid': 'custom_field_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'custom_field_gid': 'path',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (CreateCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields/{custom_field_gid}',
                'operation_id': 'get_custom_field',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_field_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'custom_field_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CREATED_BY": "created_by",
                        "CUSTOM_LABEL": "custom_label",
                        "PEOPLE_VALUE": "people_value",
                        "DATE_VALUE": "date_value",
                        "DISPLAY_VALUE": "display_value",
                        "IS_FORMULA_FIELD": "is_formula_field",
                        "FORMAT": "format",
                        "ENUM_OPTIONS": "enum_options",
                        "NAME": "name",
                        "CURRENCY_CODE": "currency_code",
                        "MULTI_ENUM_VALUES": "multi_enum_values",
                        "ENABLED": "enabled",
                        "HAS_NOTIFICATIONS_ENABLED": "has_notifications_enabled",
                        "ASANA_CREATED_FIELD": "asana_created_field",
                        "PRECISION": "precision",
                        "IS_GLOBAL_TO_WORKSPACE": "is_global_to_workspace",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "TYPE": "type",
                        "IS_VALUE_READ_ONLY": "is_value_read_only",
                        "TEXT_VALUE": "text_value",
                        "CUSTOM_LABEL_POSITION": "custom_label_position",
                        "NUMBER_VALUE": "number_value",
                        "DESCRIPTION": "description",
                        "ENUM_VALUE": "enum_value"
                    },
                },
                'openapi_types': {
                    'custom_field_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'custom_field_gid': 'custom_field_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'custom_field_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_custom_fields_for_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (GetCustomFieldsForWorkspace200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/workspaces/{workspace_gid}/custom_fields',
                'operation_id': 'get_custom_fields_for_workspace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'workspace_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CREATED_BY": "created_by",
                        "CUSTOM_LABEL": "custom_label",
                        "PEOPLE_VALUE": "people_value",
                        "DATE_VALUE": "date_value",
                        "DISPLAY_VALUE": "display_value",
                        "IS_FORMULA_FIELD": "is_formula_field",
                        "FORMAT": "format",
                        "ENUM_OPTIONS": "enum_options",
                        "NAME": "name",
                        "CURRENCY_CODE": "currency_code",
                        "MULTI_ENUM_VALUES": "multi_enum_values",
                        "ENABLED": "enabled",
                        "HAS_NOTIFICATIONS_ENABLED": "has_notifications_enabled",
                        "ASANA_CREATED_FIELD": "asana_created_field",
                        "PRECISION": "precision",
                        "IS_GLOBAL_TO_WORKSPACE": "is_global_to_workspace",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "TYPE": "type",
                        "IS_VALUE_READ_ONLY": "is_value_read_only",
                        "TEXT_VALUE": "text_value",
                        "CUSTOM_LABEL_POSITION": "custom_label_position",
                        "NUMBER_VALUE": "number_value",
                        "DESCRIPTION": "description",
                        "ENUM_VALUE": "enum_value"
                    },
                },
                'openapi_types': {
                    'workspace_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace_gid': 'workspace_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_enum_option_for_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (CreateEnumOptionForCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields/{custom_field_gid}/enum_options/insert',
                'operation_id': 'insert_enum_option_for_custom_field',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_field_gid',
                    'opt_pretty',
                    'opt_fields',
                    'insert_enum_option_for_custom_field_request',
                ],
                'required': [
                    'custom_field_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "COLOR": "color",
                        "NAME": "name",
                        "ENABLED": "enabled"
                    },
                },
                'openapi_types': {
                    'custom_field_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                    'insert_enum_option_for_custom_field_request':
                        (InsertEnumOptionForCustomFieldRequest,),
                },
                'attribute_map': {
                    'custom_field_gid': 'custom_field_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'custom_field_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                    'insert_enum_option_for_custom_field_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_custom_field_endpoint = _Endpoint(
            settings={
                'response_type': (CreateCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/custom_fields/{custom_field_gid}',
                'operation_id': 'update_custom_field',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'custom_field_gid',
                    'opt_pretty',
                    'opt_fields',
                    'create_custom_field_request',
                ],
                'required': [
                    'custom_field_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CREATED_BY": "created_by",
                        "CUSTOM_LABEL": "custom_label",
                        "PEOPLE_VALUE": "people_value",
                        "DATE_VALUE": "date_value",
                        "DISPLAY_VALUE": "display_value",
                        "IS_FORMULA_FIELD": "is_formula_field",
                        "FORMAT": "format",
                        "ENUM_OPTIONS": "enum_options",
                        "NAME": "name",
                        "CURRENCY_CODE": "currency_code",
                        "MULTI_ENUM_VALUES": "multi_enum_values",
                        "ENABLED": "enabled",
                        "HAS_NOTIFICATIONS_ENABLED": "has_notifications_enabled",
                        "ASANA_CREATED_FIELD": "asana_created_field",
                        "PRECISION": "precision",
                        "IS_GLOBAL_TO_WORKSPACE": "is_global_to_workspace",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "TYPE": "type",
                        "IS_VALUE_READ_ONLY": "is_value_read_only",
                        "TEXT_VALUE": "text_value",
                        "CUSTOM_LABEL_POSITION": "custom_label_position",
                        "NUMBER_VALUE": "number_value",
                        "DESCRIPTION": "description",
                        "ENUM_VALUE": "enum_value"
                    },
                },
                'openapi_types': {
                    'custom_field_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                    'create_custom_field_request':
                        (CreateCustomFieldRequest,),
                },
                'attribute_map': {
                    'custom_field_gid': 'custom_field_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'custom_field_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                    'create_custom_field_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_enum_option_endpoint = _Endpoint(
            settings={
                'response_type': (CreateEnumOptionForCustomField201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/enum_options/{enum_option_gid}',
                'operation_id': 'update_enum_option',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'enum_option_gid',
                    'opt_pretty',
                    'opt_fields',
                    'create_enum_option_for_custom_field_request',
                ],
                'required': [
                    'enum_option_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "COLOR": "color",
                        "NAME": "name",
                        "ENABLED": "enabled"
                    },
                },
                'openapi_types': {
                    'enum_option_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                    'create_enum_option_for_custom_field_request':
                        (CreateEnumOptionForCustomFieldRequest,),
                },
                'attribute_map': {
                    'enum_option_gid': 'enum_option_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'enum_option_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                    'create_enum_option_for_custom_field_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def create_custom_field(
        self,
        **kwargs
    ):
        """Create a custom field  # noqa: E501

        Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_custom_field(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            create_custom_field_request (CreateCustomFieldRequest): The custom field object to create.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_custom_field_endpoint.call_with_http_info(**kwargs)

    def create_enum_option_for_custom_field(
        self,
        custom_field_gid,
        **kwargs
    ):
        """Create an enum option  # noqa: E501

        Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_enum_option_for_custom_field(custom_field_gid, async_req=True)
        >>> result = thread.get()

        Args:
            custom_field_gid (str): Globally unique identifier for the custom field.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            create_enum_option_for_custom_field_request (CreateEnumOptionForCustomFieldRequest): The enum option object to create.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateEnumOptionForCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['custom_field_gid'] = \
            custom_field_gid
        return self.create_enum_option_for_custom_field_endpoint.call_with_http_info(**kwargs)

    def delete_custom_field(
        self,
        custom_field_gid,
        **kwargs
    ):
        """Delete a custom field  # noqa: E501

        A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_custom_field(custom_field_gid, async_req=True)
        >>> result = thread.get()

        Args:
            custom_field_gid (str): Globally unique identifier for the custom field.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['custom_field_gid'] = \
            custom_field_gid
        return self.delete_custom_field_endpoint.call_with_http_info(**kwargs)

    def get_custom_field(
        self,
        custom_field_gid,
        **kwargs
    ):
        """Get a custom field  # noqa: E501

        Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_custom_field(custom_field_gid, async_req=True)
        >>> result = thread.get()

        Args:
            custom_field_gid (str): Globally unique identifier for the custom field.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['custom_field_gid'] = \
            custom_field_gid
        return self.get_custom_field_endpoint.call_with_http_info(**kwargs)

    def get_custom_fields_for_workspace(
        self,
        workspace_gid,
        **kwargs
    ):
        """Get a workspace's custom fields  # noqa: E501

        Returns a list of the compact representation of all of the custom fields in a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_custom_fields_for_workspace(workspace_gid, async_req=True)
        >>> result = thread.get()

        Args:
            workspace_gid (str): Globally unique identifier for the workspace or organization.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCustomFieldsForWorkspace200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace_gid'] = \
            workspace_gid
        return self.get_custom_fields_for_workspace_endpoint.call_with_http_info(**kwargs)

    def insert_enum_option_for_custom_field(
        self,
        custom_field_gid,
        **kwargs
    ):
        """Reorder a custom field's enum  # noqa: E501

        Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_enum_option_for_custom_field(custom_field_gid, async_req=True)
        >>> result = thread.get()

        Args:
            custom_field_gid (str): Globally unique identifier for the custom field.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            insert_enum_option_for_custom_field_request (InsertEnumOptionForCustomFieldRequest): The enum option object to create.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateEnumOptionForCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['custom_field_gid'] = \
            custom_field_gid
        return self.insert_enum_option_for_custom_field_endpoint.call_with_http_info(**kwargs)

    def update_custom_field(
        self,
        custom_field_gid,
        **kwargs
    ):
        """Update a custom field  # noqa: E501

        A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_custom_field(custom_field_gid, async_req=True)
        >>> result = thread.get()

        Args:
            custom_field_gid (str): Globally unique identifier for the custom field.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            create_custom_field_request (CreateCustomFieldRequest): The custom field object with all updated properties.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['custom_field_gid'] = \
            custom_field_gid
        return self.update_custom_field_endpoint.call_with_http_info(**kwargs)

    def update_enum_option(
        self,
        enum_option_gid,
        **kwargs
    ):
        """Update an enum option  # noqa: E501

        Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_enum_option(enum_option_gid, async_req=True)
        >>> result = thread.get()

        Args:
            enum_option_gid (str): Globally unique identifier for the enum option.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            create_enum_option_for_custom_field_request (CreateEnumOptionForCustomFieldRequest): The enum option object to update. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateEnumOptionForCustomField201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['enum_option_gid'] = \
            enum_option_gid
        return self.update_enum_option_endpoint.call_with_http_info(**kwargs)

