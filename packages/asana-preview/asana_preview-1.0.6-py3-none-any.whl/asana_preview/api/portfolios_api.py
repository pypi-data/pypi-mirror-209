"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.add_custom_field_setting_for_portfolio200_response import AddCustomFieldSettingForPortfolio200Response
from asana_preview.model.add_custom_field_setting_for_portfolio_request import AddCustomFieldSettingForPortfolioRequest
from asana_preview.model.add_item_for_portfolio_request import AddItemForPortfolioRequest
from asana_preview.model.add_members_for_portfolio_request import AddMembersForPortfolioRequest
from asana_preview.model.create_portfolio201_response import CreatePortfolio201Response
from asana_preview.model.create_portfolio_request import CreatePortfolioRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_items_for_portfolio200_response import GetItemsForPortfolio200Response
from asana_preview.model.get_portfolios200_response import GetPortfolios200Response
from asana_preview.model.remove_custom_field_setting_for_portfolio_request import RemoveCustomFieldSettingForPortfolioRequest
from asana_preview.model.remove_item_for_portfolio_request import RemoveItemForPortfolioRequest
from asana_preview.model.remove_members_for_portfolio_request import RemoveMembersForPortfolioRequest


class PortfoliosApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_custom_field_setting_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (AddCustomFieldSettingForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/addCustomFieldSetting',
                'operation_id': 'add_custom_field_setting_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'add_custom_field_setting_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                    'add_custom_field_setting_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PROJECT": "project",
                        "IS_IMPORTANT": "is_important",
                        "CUSTOM_FIELD": "custom_field",
                        "PARENT": "parent"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'add_custom_field_setting_for_portfolio_request':
                        (AddCustomFieldSettingForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'add_custom_field_setting_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_item_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/addItem',
                'operation_id': 'add_item_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'add_item_for_portfolio_request',
                    'opt_pretty',
                ],
                'required': [
                    'portfolio_gid',
                    'add_item_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'add_item_for_portfolio_request':
                        (AddItemForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'add_item_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_members_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePortfolio201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/addMembers',
                'operation_id': 'add_members_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'add_members_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                    'add_members_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'add_members_for_portfolio_request':
                        (AddMembersForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'add_members_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePortfolio201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'create_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'create_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'create_portfolio_request':
                        (CreatePortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'create_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}',
                'operation_id': 'delete_portfolio',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'opt_pretty',
                ],
                'required': [
                    'portfolio_gid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_items_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (GetItemsForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/items',
                'operation_id': 'get_items_for_portfolio',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePortfolio201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}',
                'operation_id': 'get_portfolio',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_portfolios_endpoint = _Endpoint(
            settings={
                'response_type': (GetPortfolios200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'get_portfolios',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'owner',
                    'opt_fields',
                ],
                'required': [
                    'workspace',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'workspace':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'owner':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace': 'workspace',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'owner': 'owner',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace': 'query',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'owner': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_custom_field_setting_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/removeCustomFieldSetting',
                'operation_id': 'remove_custom_field_setting_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'remove_custom_field_setting_for_portfolio_request',
                    'opt_pretty',
                ],
                'required': [
                    'portfolio_gid',
                    'remove_custom_field_setting_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'remove_custom_field_setting_for_portfolio_request':
                        (RemoveCustomFieldSettingForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'remove_custom_field_setting_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_item_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/removeItem',
                'operation_id': 'remove_item_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'remove_item_for_portfolio_request',
                    'opt_pretty',
                ],
                'required': [
                    'portfolio_gid',
                    'remove_item_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'remove_item_for_portfolio_request':
                        (RemoveItemForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'remove_item_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_members_for_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePortfolio201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}/removeMembers',
                'operation_id': 'remove_members_for_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'remove_members_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                    'remove_members_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'remove_members_for_portfolio_request':
                        (RemoveMembersForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'remove_members_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (CreatePortfolio201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/portfolios/{portfolio_gid}',
                'operation_id': 'update_portfolio',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_gid',
                    'create_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'portfolio_gid',
                    'create_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PUBLIC": "public",
                        "OWNER": "owner",
                        "CREATED_BY": "created_by",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "CUSTOM_FIELDS": "custom_fields",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "COLOR": "color",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "PROJECT_TEMPLATES": "project_templates",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "WORKSPACE": "workspace",
                        "CREATED_AT": "created_at",
                        "PERMALINK_URL": "permalink_url"
                    },
                },
                'openapi_types': {
                    'portfolio_gid':
                        (str,),
                    'create_portfolio_request':
                        (CreatePortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_gid': 'portfolio_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'portfolio_gid': 'path',
                    'create_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_custom_field_setting_for_portfolio(
        self,
        portfolio_gid,
        add_custom_field_setting_for_portfolio_request,
        **kwargs
    ):
        """Add a custom field to a portfolio  # noqa: E501

        Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_custom_field_setting_for_portfolio(portfolio_gid, add_custom_field_setting_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            add_custom_field_setting_for_portfolio_request (AddCustomFieldSettingForPortfolioRequest): Information about the custom field setting.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddCustomFieldSettingForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['add_custom_field_setting_for_portfolio_request'] = \
            add_custom_field_setting_for_portfolio_request
        return self.add_custom_field_setting_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def add_item_for_portfolio(
        self,
        portfolio_gid,
        add_item_for_portfolio_request,
        **kwargs
    ):
        """Add a portfolio item  # noqa: E501

        Add an item to a portfolio. Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_item_for_portfolio(portfolio_gid, add_item_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            add_item_for_portfolio_request (AddItemForPortfolioRequest): Information about the item being inserted.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['add_item_for_portfolio_request'] = \
            add_item_for_portfolio_request
        return self.add_item_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def add_members_for_portfolio(
        self,
        portfolio_gid,
        add_members_for_portfolio_request,
        **kwargs
    ):
        """Add users to a portfolio  # noqa: E501

        Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_members_for_portfolio(portfolio_gid, add_members_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            add_members_for_portfolio_request (AddMembersForPortfolioRequest): Information about the members being added.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePortfolio201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['add_members_for_portfolio_request'] = \
            add_members_for_portfolio_request
        return self.add_members_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def create_portfolio(
        self,
        create_portfolio_request,
        **kwargs
    ):
        """Create a portfolio  # noqa: E501

        Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_portfolio(create_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_portfolio_request (CreatePortfolioRequest): The portfolio to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePortfolio201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_portfolio_request'] = \
            create_portfolio_request
        return self.create_portfolio_endpoint.call_with_http_info(**kwargs)

    def delete_portfolio(
        self,
        portfolio_gid,
        **kwargs
    ):
        """Delete a portfolio  # noqa: E501

        An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_portfolio(portfolio_gid, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        return self.delete_portfolio_endpoint.call_with_http_info(**kwargs)

    def get_items_for_portfolio(
        self,
        portfolio_gid,
        **kwargs
    ):
        """Get portfolio items  # noqa: E501

        Get a list of the items in compact form in a portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_items_for_portfolio(portfolio_gid, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemsForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        return self.get_items_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def get_portfolio(
        self,
        portfolio_gid,
        **kwargs
    ):
        """Get a portfolio  # noqa: E501

        Returns the complete portfolio record for a single portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_portfolio(portfolio_gid, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePortfolio201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        return self.get_portfolio_endpoint.call_with_http_info(**kwargs)

    def get_portfolios(
        self,
        workspace,
        **kwargs
    ):
        """Get multiple portfolios  # noqa: E501

        Returns a list of the portfolios in compact representation that are owned by the current API user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_portfolios(workspace, async_req=True)
        >>> result = thread.get()

        Args:
            workspace (str): The workspace or organization to filter portfolios on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            owner (str): The user who owns the portfolio. Currently, API users can  only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetPortfolios200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace'] = \
            workspace
        return self.get_portfolios_endpoint.call_with_http_info(**kwargs)

    def remove_custom_field_setting_for_portfolio(
        self,
        portfolio_gid,
        remove_custom_field_setting_for_portfolio_request,
        **kwargs
    ):
        """Remove a custom field from a portfolio  # noqa: E501

        Removes a custom field setting from a portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_custom_field_setting_for_portfolio(portfolio_gid, remove_custom_field_setting_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            remove_custom_field_setting_for_portfolio_request (RemoveCustomFieldSettingForPortfolioRequest): Information about the custom field setting being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['remove_custom_field_setting_for_portfolio_request'] = \
            remove_custom_field_setting_for_portfolio_request
        return self.remove_custom_field_setting_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def remove_item_for_portfolio(
        self,
        portfolio_gid,
        remove_item_for_portfolio_request,
        **kwargs
    ):
        """Remove a portfolio item  # noqa: E501

        Remove an item from a portfolio. Returns an empty data block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_item_for_portfolio(portfolio_gid, remove_item_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            remove_item_for_portfolio_request (RemoveItemForPortfolioRequest): Information about the item being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['remove_item_for_portfolio_request'] = \
            remove_item_for_portfolio_request
        return self.remove_item_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def remove_members_for_portfolio(
        self,
        portfolio_gid,
        remove_members_for_portfolio_request,
        **kwargs
    ):
        """Remove users from a portfolio  # noqa: E501

        Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_members_for_portfolio(portfolio_gid, remove_members_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            remove_members_for_portfolio_request (RemoveMembersForPortfolioRequest): Information about the members being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePortfolio201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['remove_members_for_portfolio_request'] = \
            remove_members_for_portfolio_request
        return self.remove_members_for_portfolio_endpoint.call_with_http_info(**kwargs)

    def update_portfolio(
        self,
        portfolio_gid,
        create_portfolio_request,
        **kwargs
    ):
        """Update a portfolio  # noqa: E501

        An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_portfolio(portfolio_gid, create_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_gid (str): Globally unique identifier for the portfolio.
            create_portfolio_request (CreatePortfolioRequest): The updated fields for the portfolio.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreatePortfolio201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['portfolio_gid'] = \
            portfolio_gid
        kwargs['create_portfolio_request'] = \
            create_portfolio_request
        return self.update_portfolio_endpoint.call_with_http_info(**kwargs)

