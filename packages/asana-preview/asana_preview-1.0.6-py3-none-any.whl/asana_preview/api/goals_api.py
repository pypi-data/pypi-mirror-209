"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.create_goal_metric_request import CreateGoalMetricRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_goal200_response import GetGoal200Response
from asana_preview.model.get_goals200_response import GetGoals200Response
from asana_preview.model.update_goal_metric_request import UpdateGoalMetricRequest
from asana_preview.model.update_goal_request import UpdateGoalRequest


class GoalsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_goal_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoal200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals',
                'operation_id': 'create_goal',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_goal_request',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'update_goal_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'update_goal_request':
                        (UpdateGoalRequest,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'update_goal_request': 'body',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_goal_metric_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoal200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}/setMetric',
                'operation_id': 'create_goal_metric',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'create_goal_metric_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'goal_gid',
                    'create_goal_metric_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'create_goal_metric_request':
                        (CreateGoalMetricRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'create_goal_metric_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_goal_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}',
                'operation_id': 'delete_goal',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'opt_pretty',
                ],
                'required': [
                    'goal_gid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_goal_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoal200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}',
                'operation_id': 'get_goal',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'goal_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_goals_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoals200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals',
                'operation_id': 'get_goals',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'opt_pretty',
                    'limit',
                    'offset',
                    'portfolio',
                    'project',
                    'is_workspace_level',
                    'team',
                    'workspace',
                    'time_periods',
                    'opt_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'portfolio':
                        (str,),
                    'project':
                        (str,),
                    'is_workspace_level':
                        (bool,),
                    'team':
                        (str,),
                    'workspace':
                        (str,),
                    'time_periods':
                        ([str],),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'portfolio': 'portfolio',
                    'project': 'project',
                    'is_workspace_level': 'is_workspace_level',
                    'team': 'team',
                    'workspace': 'workspace',
                    'time_periods': 'time_periods',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'portfolio': 'query',
                    'project': 'query',
                    'is_workspace_level': 'query',
                    'team': 'query',
                    'workspace': 'query',
                    'time_periods': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'time_periods': 'multi',
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_parent_goals_for_goal_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoals200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}/parentGoals',
                'operation_id': 'get_parent_goals_for_goal',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'goal_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_goal_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoal200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}',
                'operation_id': 'update_goal',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'update_goal_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'goal_gid',
                    'update_goal_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'update_goal_request':
                        (UpdateGoalRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'update_goal_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_goal_metric_endpoint = _Endpoint(
            settings={
                'response_type': (GetGoal200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/goals/{goal_gid}/setMetricCurrentValue',
                'operation_id': 'update_goal_metric',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_gid',
                    'update_goal_metric_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'goal_gid',
                    'update_goal_metric_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "OWNER": "owner",
                        "HTML_NOTES": "html_notes",
                        "STATUS": "status",
                        "START_ON": "start_on",
                        "NAME": "name",
                        "LIKES": "likes",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "TIME_PERIOD": "time_period",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "DUE_ON": "due_on",
                        "LIKED": "liked",
                        "IS_WORKSPACE_LEVEL": "is_workspace_level",
                        "METRIC": "metric",
                        "NUM_LIKES": "num_likes",
                        "TEAM": "team",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'goal_gid':
                        (str,),
                    'update_goal_metric_request':
                        (UpdateGoalMetricRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'goal_gid': 'goal_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'goal_gid': 'path',
                    'update_goal_metric_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def create_goal(
        self,
        update_goal_request,
        **kwargs
    ):
        """Create a goal  # noqa: E501

        Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_goal(update_goal_request, async_req=True)
        >>> result = thread.get()

        Args:
            update_goal_request (UpdateGoalRequest): The goal to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoal200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['update_goal_request'] = \
            update_goal_request
        return self.create_goal_endpoint.call_with_http_info(**kwargs)

    def create_goal_metric(
        self,
        goal_gid,
        create_goal_metric_request,
        **kwargs
    ):
        """Create a goal metric  # noqa: E501

        Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_goal_metric(goal_gid, create_goal_metric_request, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.
            create_goal_metric_request (CreateGoalMetricRequest): The goal metric to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoal200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        kwargs['create_goal_metric_request'] = \
            create_goal_metric_request
        return self.create_goal_metric_endpoint.call_with_http_info(**kwargs)

    def delete_goal(
        self,
        goal_gid,
        **kwargs
    ):
        """Delete a goal  # noqa: E501

        A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_goal(goal_gid, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        return self.delete_goal_endpoint.call_with_http_info(**kwargs)

    def get_goal(
        self,
        goal_gid,
        **kwargs
    ):
        """Get a goal  # noqa: E501

        Returns the complete goal record for a single goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_goal(goal_gid, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoal200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        return self.get_goal_endpoint.call_with_http_info(**kwargs)

    def get_goals(
        self,
        **kwargs
    ):
        """Get goals  # noqa: E501

        Returns compact goal records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_goals(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            portfolio (str): Globally unique identifier for supporting portfolio.. [optional]
            project (str): Globally unique identifier for supporting project.. [optional]
            is_workspace_level (bool): Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.. [optional]
            team (str): Globally unique identifier for the team.. [optional]
            workspace (str): Globally unique identifier for the workspace.. [optional]
            time_periods ([str]): Globally unique identifiers for the time periods.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoals200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_goals_endpoint.call_with_http_info(**kwargs)

    def get_parent_goals_for_goal(
        self,
        goal_gid,
        **kwargs
    ):
        """Get parent goals from a goal  # noqa: E501

        Returns a compact representation of all of the parent goals of a goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parent_goals_for_goal(goal_gid, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoals200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        return self.get_parent_goals_for_goal_endpoint.call_with_http_info(**kwargs)

    def update_goal(
        self,
        goal_gid,
        update_goal_request,
        **kwargs
    ):
        """Update a goal  # noqa: E501

        An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_goal(goal_gid, update_goal_request, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.
            update_goal_request (UpdateGoalRequest): The updated fields for the goal.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoal200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        kwargs['update_goal_request'] = \
            update_goal_request
        return self.update_goal_endpoint.call_with_http_info(**kwargs)

    def update_goal_metric(
        self,
        goal_gid,
        update_goal_metric_request,
        **kwargs
    ):
        """Update a goal metric  # noqa: E501

        Updates a goal's existing metric's `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_goal_metric(goal_gid, update_goal_metric_request, async_req=True)
        >>> result = thread.get()

        Args:
            goal_gid (str): Globally unique identifier for the goal.
            update_goal_metric_request (UpdateGoalMetricRequest): The updated fields for the goal metric.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetGoal200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['goal_gid'] = \
            goal_gid
        kwargs['update_goal_metric_request'] = \
            update_goal_metric_request
        return self.update_goal_metric_endpoint.call_with_http_info(**kwargs)

