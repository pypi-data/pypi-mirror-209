"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.add_custom_field_setting_for_portfolio200_response import AddCustomFieldSettingForPortfolio200Response
from asana_preview.model.add_custom_field_setting_for_portfolio_request import AddCustomFieldSettingForPortfolioRequest
from asana_preview.model.add_followers_for_project_request import AddFollowersForProjectRequest
from asana_preview.model.add_members_for_portfolio_request import AddMembersForPortfolioRequest
from asana_preview.model.create_project201_response import CreateProject201Response
from asana_preview.model.create_project_request import CreateProjectRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.duplicate_project_request import DuplicateProjectRequest
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_items_for_portfolio200_response import GetItemsForPortfolio200Response
from asana_preview.model.get_job200_response import GetJob200Response
from asana_preview.model.get_task_counts_for_project200_response import GetTaskCountsForProject200Response
from asana_preview.model.project_save_as_template_request import ProjectSaveAsTemplateRequest
from asana_preview.model.remove_custom_field_setting_for_portfolio_request import RemoveCustomFieldSettingForPortfolioRequest
from asana_preview.model.remove_followers_for_project_request import RemoveFollowersForProjectRequest
from asana_preview.model.remove_members_for_portfolio_request import RemoveMembersForPortfolioRequest


class ProjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_custom_field_setting_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (AddCustomFieldSettingForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/addCustomFieldSetting',
                'operation_id': 'add_custom_field_setting_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'add_custom_field_setting_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'add_custom_field_setting_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "PROJECT": "project",
                        "IS_IMPORTANT": "is_important",
                        "CUSTOM_FIELD": "custom_field",
                        "PARENT": "parent"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'add_custom_field_setting_for_portfolio_request':
                        (AddCustomFieldSettingForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'add_custom_field_setting_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_followers_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/addFollowers',
                'operation_id': 'add_followers_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'add_followers_for_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'add_followers_for_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'add_followers_for_project_request':
                        (AddFollowersForProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'add_followers_for_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.add_members_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/addMembers',
                'operation_id': 'add_members_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'add_members_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'add_members_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'add_members_for_portfolio_request':
                        (AddMembersForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'add_members_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects',
                'operation_id': 'create_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'create_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'create_project_request':
                        (CreateProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'create_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_project_for_team_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams/{team_gid}/projects',
                'operation_id': 'create_project_for_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_gid',
                    'create_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'team_gid',
                    'create_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'team_gid':
                        (str,),
                    'create_project_request':
                        (CreateProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'team_gid': 'team_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'team_gid': 'path',
                    'create_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_project_for_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/workspaces/{workspace_gid}/projects',
                'operation_id': 'create_project_for_workspace',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace_gid',
                    'create_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'workspace_gid',
                    'create_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'workspace_gid':
                        (str,),
                    'create_project_request':
                        (CreateProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace_gid': 'workspace_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace_gid': 'path',
                    'create_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_project_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}',
                'operation_id': 'delete_project',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'opt_pretty',
                ],
                'required': [
                    'project_gid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'project_gid': 'path',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.duplicate_project_endpoint = _Endpoint(
            settings={
                'response_type': (GetJob200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/duplicate',
                'operation_id': 'duplicate_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'opt_pretty',
                    'opt_fields',
                    'duplicate_project_request',
                ],
                'required': [
                    'project_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "NEW_PROJECT": "new_project",
                        "STATUS": "status",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "NEW_TASK_TEMPLATE": "new_task_template",
                        "NEW_PROJECT_TEMPLATE": "new_project_template",
                        "NEW_TASK": "new_task"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                    'duplicate_project_request':
                        (DuplicateProjectRequest,),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                    'duplicate_project_request': 'body',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}',
                'operation_id': 'get_project',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_projects_endpoint = _Endpoint(
            settings={
                'response_type': (GetItemsForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects',
                'operation_id': 'get_projects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'opt_pretty',
                    'limit',
                    'offset',
                    'workspace',
                    'team',
                    'archived',
                    'opt_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'workspace':
                        (str,),
                    'team':
                        (str,),
                    'archived':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'workspace': 'workspace',
                    'team': 'team',
                    'archived': 'archived',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'workspace': 'query',
                    'team': 'query',
                    'archived': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_projects_for_task_endpoint = _Endpoint(
            settings={
                'response_type': (GetItemsForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/tasks/{task_gid}/projects',
                'operation_id': 'get_projects_for_task',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'task_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'task_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'task_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'task_gid': 'task_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'task_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_projects_for_team_endpoint = _Endpoint(
            settings={
                'response_type': (GetItemsForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams/{team_gid}/projects',
                'operation_id': 'get_projects_for_team',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'archived',
                    'opt_fields',
                ],
                'required': [
                    'team_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'team_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'archived':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'team_gid': 'team_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'archived': 'archived',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'team_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'archived': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_projects_for_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (GetItemsForPortfolio200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/workspaces/{workspace_gid}/projects',
                'operation_id': 'get_projects_for_workspace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'archived',
                    'opt_fields',
                ],
                'required': [
                    'workspace_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'workspace_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'archived':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace_gid': 'workspace_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'archived': 'archived',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'archived': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_task_counts_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (GetTaskCountsForProject200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/task_counts',
                'operation_id': 'get_task_counts_for_project',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "INCOMPLETE_MILESTONES": "num_incomplete_milestones",
                        "INCOMPLETE_TASKS": "num_incomplete_tasks",
                        "TASKS": "num_tasks",
                        "COMPLETED_TASKS": "num_completed_tasks",
                        "MILESTONES": "num_milestones",
                        "COMPLETED_MILESTONES": "num_completed_milestones"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.project_save_as_template_endpoint = _Endpoint(
            settings={
                'response_type': (GetJob200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/saveAsTemplate',
                'operation_id': 'project_save_as_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'project_save_as_template_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'project_save_as_template_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "NEW_PROJECT": "new_project",
                        "STATUS": "status",
                        "RESOURCE_SUBTYPE": "resource_subtype",
                        "NEW_TASK_TEMPLATE": "new_task_template",
                        "NEW_PROJECT_TEMPLATE": "new_project_template",
                        "NEW_TASK": "new_task"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'project_save_as_template_request':
                        (ProjectSaveAsTemplateRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'project_save_as_template_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_custom_field_setting_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/removeCustomFieldSetting',
                'operation_id': 'remove_custom_field_setting_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'remove_custom_field_setting_for_portfolio_request',
                    'opt_pretty',
                ],
                'required': [
                    'project_gid',
                    'remove_custom_field_setting_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'remove_custom_field_setting_for_portfolio_request':
                        (RemoveCustomFieldSettingForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'project_gid': 'path',
                    'remove_custom_field_setting_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_followers_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/removeFollowers',
                'operation_id': 'remove_followers_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'remove_followers_for_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'remove_followers_for_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'remove_followers_for_project_request':
                        (RemoveFollowersForProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'remove_followers_for_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.remove_members_for_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}/removeMembers',
                'operation_id': 'remove_members_for_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'remove_members_for_portfolio_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'remove_members_for_portfolio_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'remove_members_for_portfolio_request':
                        (RemoveMembersForPortfolioRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'remove_members_for_portfolio_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_project_endpoint = _Endpoint(
            settings={
                'response_type': (CreateProject201Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/projects/{project_gid}',
                'operation_id': 'update_project',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_gid',
                    'create_project_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'project_gid',
                    'create_project_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "CURRENT_STATUS": "current_status",
                        "CURRENT_STATUS_UPDATE": "current_status_update",
                        "ARCHIVED": "archived",
                        "TEAM": "team",
                        "MEMBERS": "members",
                        "DUE_ON": "due_on",
                        "MODIFIED_AT": "modified_at",
                        "COLOR": "color",
                        "OWNER": "owner",
                        "PERMALINK_URL": "permalink_url",
                        "CREATED_FROM_TEMPLATE": "created_from_template",
                        "PUBLIC": "public",
                        "HTML_NOTES": "html_notes",
                        "COMPLETED_AT": "completed_at",
                        "NAME": "name",
                        "COMPLETED_BY": "completed_by",
                        "DUE_DATE": "due_date",
                        "PRIVACY_SETTING": "privacy_setting",
                        "CUSTOM_FIELD_SETTINGS": "custom_field_settings",
                        "NOTES": "notes",
                        "WORKSPACE": "workspace",
                        "PROJECT_BRIEF": "project_brief",
                        "CREATED_AT": "created_at",
                        "DEFAULT_VIEW": "default_view",
                        "START_ON": "start_on",
                        "CUSTOM_FIELDS": "custom_fields",
                        "ICON": "icon",
                        "COMPLETED": "completed",
                        "FOLLOWERS": "followers"
                    },
                },
                'openapi_types': {
                    'project_gid':
                        (str,),
                    'create_project_request':
                        (CreateProjectRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'project_gid': 'project_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'project_gid': 'path',
                    'create_project_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_custom_field_setting_for_project(
        self,
        project_gid,
        add_custom_field_setting_for_portfolio_request,
        **kwargs
    ):
        """Add a custom field to a project  # noqa: E501

        Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_custom_field_setting_for_project(project_gid, add_custom_field_setting_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            add_custom_field_setting_for_portfolio_request (AddCustomFieldSettingForPortfolioRequest): Information about the custom field setting.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddCustomFieldSettingForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['add_custom_field_setting_for_portfolio_request'] = \
            add_custom_field_setting_for_portfolio_request
        return self.add_custom_field_setting_for_project_endpoint.call_with_http_info(**kwargs)

    def add_followers_for_project(
        self,
        project_gid,
        add_followers_for_project_request,
        **kwargs
    ):
        """Add followers to a project  # noqa: E501

        Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_followers_for_project(project_gid, add_followers_for_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            add_followers_for_project_request (AddFollowersForProjectRequest): Information about the followers being added.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['add_followers_for_project_request'] = \
            add_followers_for_project_request
        return self.add_followers_for_project_endpoint.call_with_http_info(**kwargs)

    def add_members_for_project(
        self,
        project_gid,
        add_members_for_portfolio_request,
        **kwargs
    ):
        """Add users to a project  # noqa: E501

        Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the \"Notifcations\" tab of \"My Profile Settings\") will override this endpoint's default behavior of setting \"Tasks added\" notifications to `false`. Returns the updated project record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_members_for_project(project_gid, add_members_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            add_members_for_portfolio_request (AddMembersForPortfolioRequest): Information about the members being added.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['add_members_for_portfolio_request'] = \
            add_members_for_portfolio_request
        return self.add_members_for_project_endpoint.call_with_http_info(**kwargs)

    def create_project(
        self,
        create_project_request,
        **kwargs
    ):
        """Create a project  # noqa: E501

        Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the `workspace` parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a `team` to share the project with.  Returns the full record of the newly created project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project(create_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_project_request (CreateProjectRequest): The project to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['create_project_request'] = \
            create_project_request
        return self.create_project_endpoint.call_with_http_info(**kwargs)

    def create_project_for_team(
        self,
        team_gid,
        create_project_request,
        **kwargs
    ):
        """Create a project in a team  # noqa: E501

        Creates a project shared with the given team.  Returns the full record of the newly created project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_for_team(team_gid, create_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            team_gid (str): Globally unique identifier for the team.
            create_project_request (CreateProjectRequest): The new project to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['team_gid'] = \
            team_gid
        kwargs['create_project_request'] = \
            create_project_request
        return self.create_project_for_team_endpoint.call_with_http_info(**kwargs)

    def create_project_for_workspace(
        self,
        workspace_gid,
        create_project_request,
        **kwargs
    ):
        """Create a project in a workspace  # noqa: E501

        Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_for_workspace(workspace_gid, create_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            workspace_gid (str): Globally unique identifier for the workspace or organization.
            create_project_request (CreateProjectRequest): The new project to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace_gid'] = \
            workspace_gid
        kwargs['create_project_request'] = \
            create_project_request
        return self.create_project_for_workspace_endpoint.call_with_http_info(**kwargs)

    def delete_project(
        self,
        project_gid,
        **kwargs
    ):
        """Delete a project  # noqa: E501

        A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project(project_gid, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        return self.delete_project_endpoint.call_with_http_info(**kwargs)

    def duplicate_project(
        self,
        project_gid,
        **kwargs
    ):
        """Duplicate a project  # noqa: E501

        Creates and returns a job that will asynchronously handle the duplication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_project(project_gid, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            duplicate_project_request (DuplicateProjectRequest): Describes the duplicate's name and the elements that will be duplicated.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetJob200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        return self.duplicate_project_endpoint.call_with_http_info(**kwargs)

    def get_project(
        self,
        project_gid,
        **kwargs
    ):
        """Get a project  # noqa: E501

        Returns the complete project record for a single project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project(project_gid, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        return self.get_project_endpoint.call_with_http_info(**kwargs)

    def get_projects(
        self,
        **kwargs
    ):
        """Get multiple projects  # noqa: E501

        Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_projects(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            workspace (str): The workspace or organization to filter projects on.. [optional]
            team (str): The team to filter projects on.. [optional]
            archived (bool): Only return projects whose `archived` field takes on the value of this parameter.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemsForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_projects_endpoint.call_with_http_info(**kwargs)

    def get_projects_for_task(
        self,
        task_gid,
        **kwargs
    ):
        """Get projects a task is in  # noqa: E501

        Returns a compact representation of all of the projects the task is in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_projects_for_task(task_gid, async_req=True)
        >>> result = thread.get()

        Args:
            task_gid (str): The task to operate on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemsForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['task_gid'] = \
            task_gid
        return self.get_projects_for_task_endpoint.call_with_http_info(**kwargs)

    def get_projects_for_team(
        self,
        team_gid,
        **kwargs
    ):
        """Get a team's projects  # noqa: E501

        Returns the compact project records for all projects in the team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_projects_for_team(team_gid, async_req=True)
        >>> result = thread.get()

        Args:
            team_gid (str): Globally unique identifier for the team.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            archived (bool): Only return projects whose `archived` field takes on the value of this parameter.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemsForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['team_gid'] = \
            team_gid
        return self.get_projects_for_team_endpoint.call_with_http_info(**kwargs)

    def get_projects_for_workspace(
        self,
        workspace_gid,
        **kwargs
    ):
        """Get all projects in a workspace  # noqa: E501

        Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_projects_for_workspace(workspace_gid, async_req=True)
        >>> result = thread.get()

        Args:
            workspace_gid (str): Globally unique identifier for the workspace or organization.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            archived (bool): Only return projects whose `archived` field takes on the value of this parameter.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemsForPortfolio200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace_gid'] = \
            workspace_gid
        return self.get_projects_for_workspace_endpoint.call_with_http_info(**kwargs)

    def get_task_counts_for_project(
        self,
        project_gid,
        **kwargs
    ):
        """Get task count of a project  # noqa: E501

        Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/inputoutput-options) using `opt_fields` to get any information from this endpoint.  This endpoint has an additional [rate limit](/docs/rate-limits) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_task_counts_for_project(project_gid, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTaskCountsForProject200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        return self.get_task_counts_for_project_endpoint.call_with_http_info(**kwargs)

    def project_save_as_template(
        self,
        project_gid,
        project_save_as_template_request,
        **kwargs
    ):
        """Create a project template from a project  # noqa: E501

        Creates and returns a job that will asynchronously handle the project template creation. Note that while the resulting project template can be accessed with the API, it won't be visible in the Asana UI until Project Templates 2.0 is launched in the app. See more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.project_save_as_template(project_gid, project_save_as_template_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            project_save_as_template_request (ProjectSaveAsTemplateRequest): Describes the inputs used for creating a project template, such as the resulting project template's name, which team it should be created in.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetJob200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['project_save_as_template_request'] = \
            project_save_as_template_request
        return self.project_save_as_template_endpoint.call_with_http_info(**kwargs)

    def remove_custom_field_setting_for_project(
        self,
        project_gid,
        remove_custom_field_setting_for_portfolio_request,
        **kwargs
    ):
        """Remove a custom field from a project  # noqa: E501

        Removes a custom field setting from a project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_custom_field_setting_for_project(project_gid, remove_custom_field_setting_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            remove_custom_field_setting_for_portfolio_request (RemoveCustomFieldSettingForPortfolioRequest): Information about the custom field setting being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['remove_custom_field_setting_for_portfolio_request'] = \
            remove_custom_field_setting_for_portfolio_request
        return self.remove_custom_field_setting_for_project_endpoint.call_with_http_info(**kwargs)

    def remove_followers_for_project(
        self,
        project_gid,
        remove_followers_for_project_request,
        **kwargs
    ):
        """Remove followers from a project  # noqa: E501

        Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_followers_for_project(project_gid, remove_followers_for_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            remove_followers_for_project_request (RemoveFollowersForProjectRequest): Information about the followers being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['remove_followers_for_project_request'] = \
            remove_followers_for_project_request
        return self.remove_followers_for_project_endpoint.call_with_http_info(**kwargs)

    def remove_members_for_project(
        self,
        project_gid,
        remove_members_for_portfolio_request,
        **kwargs
    ):
        """Remove users from a project  # noqa: E501

        Removes the specified list of users from members of the project. Returns the updated project record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_members_for_project(project_gid, remove_members_for_portfolio_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            remove_members_for_portfolio_request (RemoveMembersForPortfolioRequest): Information about the members being removed.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['remove_members_for_portfolio_request'] = \
            remove_members_for_portfolio_request
        return self.remove_members_for_project_endpoint.call_with_http_info(**kwargs)

    def update_project(
        self,
        project_gid,
        create_project_request,
        **kwargs
    ):
        """Update a project  # noqa: E501

        A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project(project_gid, create_project_request, async_req=True)
        >>> result = thread.get()

        Args:
            project_gid (str): Globally unique identifier for the project.
            create_project_request (CreateProjectRequest): The updated fields for the project.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateProject201Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['project_gid'] = \
            project_gid
        kwargs['create_project_request'] = \
            create_project_request
        return self.update_project_endpoint.call_with_http_info(**kwargs)

