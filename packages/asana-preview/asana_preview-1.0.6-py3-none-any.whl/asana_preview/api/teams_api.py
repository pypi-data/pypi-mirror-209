"""
    Asana

    This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from asana_preview.api_client import ApiClient, Endpoint as _Endpoint
from asana_preview.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from asana_preview.model.add_user_for_team_request import AddUserForTeamRequest
from asana_preview.model.delete_attachment200_response import DeleteAttachment200Response
from asana_preview.model.error_response import ErrorResponse
from asana_preview.model.get_team_membership200_response import GetTeamMembership200Response
from asana_preview.model.get_teams_for_workspace200_response import GetTeamsForWorkspace200Response
from asana_preview.model.remove_user_for_team_request import RemoveUserForTeamRequest
from asana_preview.model.update_team200_response import UpdateTeam200Response
from asana_preview.model.update_team_request import UpdateTeamRequest


class TeamsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_user_for_team_endpoint = _Endpoint(
            settings={
                'response_type': (GetTeamMembership200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams/{team_gid}/addUser',
                'operation_id': 'add_user_for_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_gid',
                    'add_user_for_team_request',
                    'opt_pretty',
                    'opt_fields',
                ],
                'required': [
                    'team_gid',
                    'add_user_for_team_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "USER": "user",
                        "IS_ADMIN": "is_admin",
                        "IS_LIMITED_ACCESS": "is_limited_access",
                        "IS_GUEST": "is_guest",
                        "TEAM": "team"
                    },
                },
                'openapi_types': {
                    'team_gid':
                        (str,),
                    'add_user_for_team_request':
                        (AddUserForTeamRequest,),
                    'opt_pretty':
                        (bool,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'team_gid': 'team_gid',
                    'opt_pretty': 'opt_pretty',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'team_gid': 'path',
                    'add_user_for_team_request': 'body',
                    'opt_pretty': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_team_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateTeam200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams',
                'operation_id': 'create_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_team_request',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'update_team_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL": "edit_team_visibility_or_trash_team_access_level",
                        "GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL": "guest_invite_management_access_level",
                        "TEAM_MEMBER_REMOVAL_ACCESS_LEVEL": "team_member_removal_access_level",
                        "NAME": "name",
                        "HTML_DESCRIPTION": "html_description",
                        "EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL": "edit_team_name_or_description_access_level",
                        "MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL": "member_invite_management_access_level",
                        "PERMALINK_URL": "permalink_url",
                        "ORGANIZATION": "organization",
                        "JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL": "join_request_management_access_level",
                        "VISIBILITY": "visibility",
                        "DESCRIPTION": "description"
                    },
                },
                'openapi_types': {
                    'update_team_request':
                        (UpdateTeamRequest,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'update_team_request': 'body',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_team_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateTeam200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams/{team_gid}',
                'operation_id': 'get_team',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'team_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL": "edit_team_visibility_or_trash_team_access_level",
                        "GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL": "guest_invite_management_access_level",
                        "TEAM_MEMBER_REMOVAL_ACCESS_LEVEL": "team_member_removal_access_level",
                        "NAME": "name",
                        "HTML_DESCRIPTION": "html_description",
                        "EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL": "edit_team_name_or_description_access_level",
                        "MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL": "member_invite_management_access_level",
                        "PERMALINK_URL": "permalink_url",
                        "ORGANIZATION": "organization",
                        "JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL": "join_request_management_access_level",
                        "VISIBILITY": "visibility",
                        "DESCRIPTION": "description"
                    },
                },
                'openapi_types': {
                    'team_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'team_gid': 'team_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'team_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_teams_for_user_endpoint = _Endpoint(
            settings={
                'response_type': (GetTeamsForWorkspace200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/users/{user_gid}/teams',
                'operation_id': 'get_teams_for_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_gid',
                    'organization',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'user_gid',
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL": "edit_team_visibility_or_trash_team_access_level",
                        "GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL": "guest_invite_management_access_level",
                        "TEAM_MEMBER_REMOVAL_ACCESS_LEVEL": "team_member_removal_access_level",
                        "NAME": "name",
                        "HTML_DESCRIPTION": "html_description",
                        "EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL": "edit_team_name_or_description_access_level",
                        "MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL": "member_invite_management_access_level",
                        "PERMALINK_URL": "permalink_url",
                        "ORGANIZATION": "organization",
                        "JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL": "join_request_management_access_level",
                        "VISIBILITY": "visibility",
                        "DESCRIPTION": "description"
                    },
                },
                'openapi_types': {
                    'user_gid':
                        (str,),
                    'organization':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'user_gid': 'user_gid',
                    'organization': 'organization',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'user_gid': 'path',
                    'organization': 'query',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_teams_for_workspace_endpoint = _Endpoint(
            settings={
                'response_type': (GetTeamsForWorkspace200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/workspaces/{workspace_gid}/teams',
                'operation_id': 'get_teams_for_workspace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'workspace_gid',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'workspace_gid',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL": "edit_team_visibility_or_trash_team_access_level",
                        "GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL": "guest_invite_management_access_level",
                        "TEAM_MEMBER_REMOVAL_ACCESS_LEVEL": "team_member_removal_access_level",
                        "NAME": "name",
                        "HTML_DESCRIPTION": "html_description",
                        "EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL": "edit_team_name_or_description_access_level",
                        "MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL": "member_invite_management_access_level",
                        "PERMALINK_URL": "permalink_url",
                        "ORGANIZATION": "organization",
                        "JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL": "join_request_management_access_level",
                        "VISIBILITY": "visibility",
                        "DESCRIPTION": "description"
                    },
                },
                'openapi_types': {
                    'workspace_gid':
                        (str,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'workspace_gid': 'workspace_gid',
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'workspace_gid': 'path',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_user_for_team_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAttachment200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams/{team_gid}/removeUser',
                'operation_id': 'remove_user_for_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_gid',
                    'remove_user_for_team_request',
                    'opt_pretty',
                ],
                'required': [
                    'team_gid',
                    'remove_user_for_team_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'team_gid':
                        (str,),
                    'remove_user_for_team_request':
                        (RemoveUserForTeamRequest,),
                    'opt_pretty':
                        (bool,),
                },
                'attribute_map': {
                    'team_gid': 'team_gid',
                    'opt_pretty': 'opt_pretty',
                },
                'location_map': {
                    'team_gid': 'path',
                    'remove_user_for_team_request': 'body',
                    'opt_pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_team_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateTeam200Response,),
                'auth': [
                    'personalAccessToken'
                ],
                'endpoint_path': '/teams',
                'operation_id': 'update_team',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_team_request',
                    'opt_pretty',
                    'limit',
                    'offset',
                    'opt_fields',
                ],
                'required': [
                    'update_team_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'opt_fields',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('opt_fields',): {

                        "EDIT_TEAM_VISIBILITY_OR_TRASH_TEAM_ACCESS_LEVEL": "edit_team_visibility_or_trash_team_access_level",
                        "GUEST_INVITE_MANAGEMENT_ACCESS_LEVEL": "guest_invite_management_access_level",
                        "TEAM_MEMBER_REMOVAL_ACCESS_LEVEL": "team_member_removal_access_level",
                        "NAME": "name",
                        "HTML_DESCRIPTION": "html_description",
                        "EDIT_TEAM_NAME_OR_DESCRIPTION_ACCESS_LEVEL": "edit_team_name_or_description_access_level",
                        "MEMBER_INVITE_MANAGEMENT_ACCESS_LEVEL": "member_invite_management_access_level",
                        "PERMALINK_URL": "permalink_url",
                        "ORGANIZATION": "organization",
                        "JOIN_REQUEST_MANAGEMENT_ACCESS_LEVEL": "join_request_management_access_level",
                        "VISIBILITY": "visibility",
                        "DESCRIPTION": "description"
                    },
                },
                'openapi_types': {
                    'update_team_request':
                        (UpdateTeamRequest,),
                    'opt_pretty':
                        (bool,),
                    'limit':
                        (int,),
                    'offset':
                        (str,),
                    'opt_fields':
                        ([str],),
                },
                'attribute_map': {
                    'opt_pretty': 'opt_pretty',
                    'limit': 'limit',
                    'offset': 'offset',
                    'opt_fields': 'opt_fields',
                },
                'location_map': {
                    'update_team_request': 'body',
                    'opt_pretty': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'opt_fields': 'query',
                },
                'collection_format_map': {
                    'opt_fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json; charset=UTF-8'
                ],
                'content_type': [
                    'application/json; charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_user_for_team(
        self,
        team_gid,
        add_user_for_team_request,
        **kwargs
    ):
        """Add a user to a team  # noqa: E501

        The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_user_for_team(team_gid, add_user_for_team_request, async_req=True)
        >>> result = thread.get()

        Args:
            team_gid (str): Globally unique identifier for the team.
            add_user_for_team_request (AddUserForTeamRequest): The user to add to the team.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTeamMembership200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['team_gid'] = \
            team_gid
        kwargs['add_user_for_team_request'] = \
            add_user_for_team_request
        return self.add_user_for_team_endpoint.call_with_http_info(**kwargs)

    def create_team(
        self,
        update_team_request,
        **kwargs
    ):
        """Create a team  # noqa: E501

        Creates a team within the current workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_team(update_team_request, async_req=True)
        >>> result = thread.get()

        Args:
            update_team_request (UpdateTeamRequest): The team to create.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateTeam200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['update_team_request'] = \
            update_team_request
        return self.create_team_endpoint.call_with_http_info(**kwargs)

    def get_team(
        self,
        team_gid,
        **kwargs
    ):
        """Get a team  # noqa: E501

        Returns the full record for a single team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_team(team_gid, async_req=True)
        >>> result = thread.get()

        Args:
            team_gid (str): Globally unique identifier for the team.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateTeam200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['team_gid'] = \
            team_gid
        return self.get_team_endpoint.call_with_http_info(**kwargs)

    def get_teams_for_user(
        self,
        user_gid,
        organization,
        **kwargs
    ):
        """Get teams for a user  # noqa: E501

        Returns the compact records for all teams to which the given user is assigned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_teams_for_user(user_gid, organization, async_req=True)
        >>> result = thread.get()

        Args:
            user_gid (str): A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
            organization (str): The workspace or organization to filter teams on.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTeamsForWorkspace200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_gid'] = \
            user_gid
        kwargs['organization'] = \
            organization
        return self.get_teams_for_user_endpoint.call_with_http_info(**kwargs)

    def get_teams_for_workspace(
        self,
        workspace_gid,
        **kwargs
    ):
        """Get teams in a workspace  # noqa: E501

        Returns the compact records for all teams in the workspace visible to the authorized user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_teams_for_workspace(workspace_gid, async_req=True)
        >>> result = thread.get()

        Args:
            workspace_gid (str): Globally unique identifier for the workspace or organization.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTeamsForWorkspace200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['workspace_gid'] = \
            workspace_gid
        return self.get_teams_for_workspace_endpoint.call_with_http_info(**kwargs)

    def remove_user_for_team(
        self,
        team_gid,
        remove_user_for_team_request,
        **kwargs
    ):
        """Remove a user from a team  # noqa: E501

        The user making this call must be a member of the team in order to remove themselves or others.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_user_for_team(team_gid, remove_user_for_team_request, async_req=True)
        >>> result = thread.get()

        Args:
            team_gid (str): Globally unique identifier for the team.
            remove_user_for_team_request (RemoveUserForTeamRequest): The user to remove from the team.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAttachment200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['team_gid'] = \
            team_gid
        kwargs['remove_user_for_team_request'] = \
            remove_user_for_team_request
        return self.remove_user_for_team_endpoint.call_with_http_info(**kwargs)

    def update_team(
        self,
        update_team_request,
        **kwargs
    ):
        """Update a team  # noqa: E501

        Updates a team within the current workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_team(update_team_request, async_req=True)
        >>> result = thread.get()

        Args:
            update_team_request (UpdateTeamRequest): The team to update.

        Keyword Args:
            opt_pretty (bool): Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.. [optional]
            limit (int): Results per page. The number of objects to return per page. The value must be between 1 and 100.. [optional]
            offset (str): Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. 'Note: You can only pass in an offset that was returned to you via a previously paginated request.'. [optional]
            opt_fields ([str]): This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateTeam200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['update_team_request'] = \
            update_team_request
        return self.update_team_endpoint.call_with_http_info(**kwargs)

