# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/inverter.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.microgrid import common_pb2 as frequenz_dot_api_dot_microgrid_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n%frequenz/api/microgrid/inverter.proto\x12\x1f\x66requenz.api.microgrid.inverter\x1a#frequenz/api/microgrid/common.proto\"?\n\x08Metadata\x12\x33\n\x04type\x18\x01 \x01(\x0e\x32%.frequenz.api.microgrid.inverter.Type\"Q\n\x05State\x12H\n\x0f\x63omponent_state\x18\x01 \x01(\x0e\x32/.frequenz.api.microgrid.inverter.ComponentState\"\x88\x01\n\x05\x45rror\x12\x38\n\x04\x63ode\x18\x01 \x01(\x0e\x32*.frequenz.api.microgrid.inverter.ErrorCode\x12\x38\n\x05level\x18\x02 \x01(\x0e\x32).frequenz.api.microgrid.common.ErrorLevel\x12\x0b\n\x03msg\x18\x03 \x01(\t\"\xdd\x01\n\x04\x44\x61ta\x12\x35\n\ndc_battery\x18\x04 \x01(\x0b\x32!.frequenz.api.microgrid.common.DC\x12\x33\n\x08\x64\x63_solar\x18\x05 \x01(\x0b\x32!.frequenz.api.microgrid.common.DC\x12-\n\x02\x61\x63\x18\x02 \x01(\x0b\x32!.frequenz.api.microgrid.common.AC\x12:\n\x0btemperature\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\"\"\n\nProperties\x12\x14\n\x0c\x66irmware_ver\x18\x01 \x01(\t\"\xef\x01\n\x08Inverter\x12?\n\nproperties\x18\x01 \x01(\x0b\x32+.frequenz.api.microgrid.inverter.Properties\x12\x35\n\x05state\x18\x02 \x01(\x0b\x32&.frequenz.api.microgrid.inverter.State\x12\x36\n\x06\x65rrors\x18\x03 \x03(\x0b\x32&.frequenz.api.microgrid.inverter.Error\x12\x33\n\x04\x64\x61ta\x18\x04 \x01(\x0b\x32%.frequenz.api.microgrid.inverter.Data*O\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n\x0cTYPE_BATTERY\x10\x01\x12\x0e\n\nTYPE_SOLAR\x10\x02\x12\x0f\n\x0bTYPE_HYBRID\x10\x03*\xc1\x02\n\x0e\x43omponentState\x12\x1f\n\x1b\x43OMPONENT_STATE_UNSPECIFIED\x10\x00\x12\x17\n\x13\x43OMPONENT_STATE_OFF\x10\x01\x12 \n\x1c\x43OMPONENT_STATE_SWITCHING_ON\x10\x02\x12!\n\x1d\x43OMPONENT_STATE_SWITCHING_OFF\x10\x03\x12\x1b\n\x17\x43OMPONENT_STATE_STANDBY\x10\x04\x12\x18\n\x14\x43OMPONENT_STATE_IDLE\x10\x05\x12\x1c\n\x18\x43OMPONENT_STATE_CHARGING\x10\n\x12\x1f\n\x1b\x43OMPONENT_STATE_DISCHARGING\x10\x0b\x12\x19\n\x15\x43OMPONENT_STATE_ERROR\x10\x0e\x12\x1f\n\x1b\x43OMPONENT_STATE_UNAVAILABLE\x10\x0f*\'\n\tErrorCode\x12\x1a\n\x16\x45RROR_CODE_UNSPECIFIED\x10\x00\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'frequenz.api.microgrid.inverter_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _globals['_TYPE']._serialized_start=900
  _globals['_TYPE']._serialized_end=979
  _globals['_COMPONENTSTATE']._serialized_start=982
  _globals['_COMPONENTSTATE']._serialized_end=1303
  _globals['_ERRORCODE']._serialized_start=1305
  _globals['_ERRORCODE']._serialized_end=1344
  _globals['_METADATA']._serialized_start=111
  _globals['_METADATA']._serialized_end=174
  _globals['_STATE']._serialized_start=176
  _globals['_STATE']._serialized_end=257
  _globals['_ERROR']._serialized_start=260
  _globals['_ERROR']._serialized_end=396
  _globals['_DATA']._serialized_start=399
  _globals['_DATA']._serialized_end=620
  _globals['_PROPERTIES']._serialized_start=622
  _globals['_PROPERTIES']._serialized_end=656
  _globals['_INVERTER']._serialized_start=659
  _globals['_INVERTER']._serialized_end=898
# @@protoc_insertion_point(module_scope)
